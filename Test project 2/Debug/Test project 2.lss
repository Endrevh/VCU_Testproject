
Test project 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ca0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404ca0  00404ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00404ca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ad4  204009b8  00405660  000209b8  2**2
                  ALLOC
  4 .stack        00002004  2040148c  00406134  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20403490  00408138  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001a3ee  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000034cf  00000000  00000000  0003ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006029  00000000  00000000  0003e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c28  00000000  00000000  00044325  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c70  00000000  00000000  00044f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022659  00000000  00000000  00045bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dab7  00000000  00000000  00068216  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097d4a  00000000  00000000  00075ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000270c  00000000  00000000  0010da18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 34 40 20 81 0f 40 00 7d 0f 40 00 7d 0f 40 00     .4@ ..@.}.@.}.@.
  400010:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  40002c:	7d 0f 40 00 7d 0f 40 00 00 00 00 00 7d 0f 40 00     }.@.}.@.....}.@.
  40003c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40004c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40005c:	7d 0f 40 00 7d 0f 40 00 00 00 00 00 d1 0c 40 00     }.@.}.@.......@.
  40006c:	e5 0c 40 00 f9 0c 40 00 7d 0f 40 00 7d 0f 40 00     ..@...@.}.@.}.@.
  40007c:	7d 0f 40 00 0d 0d 40 00 21 0d 40 00 7d 0f 40 00     }.@...@.!.@.}.@.
  40008c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40009c:	55 15 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     U.@.}.@.}.@.}.@.
  4000ac:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  4000bc:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  4000cc:	b1 18 40 00 7d 0f 40 00 9d 19 40 00 7d 0f 40 00     ..@.}.@...@.}.@.
  4000dc:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  4000ec:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  4000fc:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40010c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 00 00 00 00     }.@.}.@.}.@.....
  40011c:	00 00 00 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     ....}.@.}.@.}.@.
  40012c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40013c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40014c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00 7d 0f 40 00     }.@.}.@.}.@.}.@.
  40015c:	7d 0f 40 00 7d 0f 40 00 7d 0f 40 00                 }.@.}.@.}.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00404ca8 	.word	0x00404ca8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404ca8 	.word	0x00404ca8
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00404ca8 	.word	0x00404ca8
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20401460 	.word	0x20401460
  40020c:	20401458 	.word	0x20401458

00400210 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400210:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400212:	010b      	lsls	r3, r1, #4
  400214:	4293      	cmp	r3, r2
  400216:	d914      	bls.n	400242 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400218:	00c9      	lsls	r1, r1, #3
  40021a:	084b      	lsrs	r3, r1, #1
  40021c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400220:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400224:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400226:	1e5c      	subs	r4, r3, #1
  400228:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40022c:	428c      	cmp	r4, r1
  40022e:	d901      	bls.n	400234 <usart_set_async_baudrate+0x24>
		return 1;
  400230:	2001      	movs	r0, #1
  400232:	e017      	b.n	400264 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400234:	6841      	ldr	r1, [r0, #4]
  400236:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40023a:	6041      	str	r1, [r0, #4]
  40023c:	e00c      	b.n	400258 <usart_set_async_baudrate+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	e010      	b.n	400264 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400242:	0859      	lsrs	r1, r3, #1
  400244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400248:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d8f2      	bhi.n	40023e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400258:	0412      	lsls	r2, r2, #16
  40025a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40025e:	431a      	orrs	r2, r3
  400260:	6202      	str	r2, [r0, #32]

	return 0;
  400262:	2000      	movs	r0, #0
}
  400264:	f85d 4b04 	ldr.w	r4, [sp], #4
  400268:	4770      	bx	lr
	...

0040026c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <usart_reset+0x24>)
  40026e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400272:	2300      	movs	r3, #0
  400274:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400276:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400278:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40027a:	2388      	movs	r3, #136	; 0x88
  40027c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40027e:	2324      	movs	r3, #36	; 0x24
  400280:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400282:	f44f 7380 	mov.w	r3, #256	; 0x100
  400286:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40028c:	6003      	str	r3, [r0, #0]
  40028e:	4770      	bx	lr
  400290:	55534100 	.word	0x55534100

00400294 <usart_init_rs232>:
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	4605      	mov	r5, r0
  400298:	460c      	mov	r4, r1
  40029a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40029c:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <usart_init_rs232+0x48>)
  40029e:	4798      	blx	r3
	ul_reg_val = 0;
  4002a0:	2200      	movs	r2, #0
  4002a2:	4b0f      	ldr	r3, [pc, #60]	; (4002e0 <usart_init_rs232+0x4c>)
  4002a4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002a6:	b1a4      	cbz	r4, 4002d2 <usart_init_rs232+0x3e>
  4002a8:	4632      	mov	r2, r6
  4002aa:	6821      	ldr	r1, [r4, #0]
  4002ac:	4628      	mov	r0, r5
  4002ae:	4b0d      	ldr	r3, [pc, #52]	; (4002e4 <usart_init_rs232+0x50>)
  4002b0:	4798      	blx	r3
  4002b2:	4602      	mov	r2, r0
  4002b4:	b978      	cbnz	r0, 4002d6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002b6:	6863      	ldr	r3, [r4, #4]
  4002b8:	68a1      	ldr	r1, [r4, #8]
  4002ba:	430b      	orrs	r3, r1
  4002bc:	6921      	ldr	r1, [r4, #16]
  4002be:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002c0:	68e1      	ldr	r1, [r4, #12]
  4002c2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002c4:	4906      	ldr	r1, [pc, #24]	; (4002e0 <usart_init_rs232+0x4c>)
  4002c6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002c8:	6869      	ldr	r1, [r5, #4]
  4002ca:	430b      	orrs	r3, r1
  4002cc:	606b      	str	r3, [r5, #4]
}
  4002ce:	4610      	mov	r0, r2
  4002d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002d2:	2201      	movs	r2, #1
  4002d4:	e7fb      	b.n	4002ce <usart_init_rs232+0x3a>
  4002d6:	2201      	movs	r2, #1
  4002d8:	e7f9      	b.n	4002ce <usart_init_rs232+0x3a>
  4002da:	bf00      	nop
  4002dc:	0040026d 	.word	0x0040026d
  4002e0:	204009d4 	.word	0x204009d4
  4002e4:	00400211 	.word	0x00400211

004002e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4002e8:	2340      	movs	r3, #64	; 0x40
  4002ea:	6003      	str	r3, [r0, #0]
  4002ec:	4770      	bx	lr

004002ee <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4002ee:	2310      	movs	r3, #16
  4002f0:	6003      	str	r3, [r0, #0]
  4002f2:	4770      	bx	lr

004002f4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4002f4:	6943      	ldr	r3, [r0, #20]
  4002f6:	f013 0f02 	tst.w	r3, #2
  4002fa:	d004      	beq.n	400306 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4002fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400300:	61c1      	str	r1, [r0, #28]
	return 0;
  400302:	2000      	movs	r0, #0
  400304:	4770      	bx	lr
		return 1;
  400306:	2001      	movs	r0, #1
}
  400308:	4770      	bx	lr

0040030a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40030a:	6943      	ldr	r3, [r0, #20]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d005      	beq.n	40031e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400312:	6983      	ldr	r3, [r0, #24]
  400314:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400318:	600b      	str	r3, [r1, #0]
	return 0;
  40031a:	2000      	movs	r0, #0
  40031c:	4770      	bx	lr
		return 1;
  40031e:	2001      	movs	r0, #1
}
  400320:	4770      	bx	lr

00400322 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400326:	6043      	str	r3, [r0, #4]
  400328:	4770      	bx	lr
	...

0040032c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40032c:	3801      	subs	r0, #1
  40032e:	2802      	cmp	r0, #2
  400330:	d815      	bhi.n	40035e <_write+0x32>
{
  400332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400336:	460e      	mov	r6, r1
  400338:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033a:	b19a      	cbz	r2, 400364 <_write+0x38>
  40033c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40033e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400378 <_write+0x4c>
  400342:	4f0c      	ldr	r7, [pc, #48]	; (400374 <_write+0x48>)
  400344:	f8d8 0000 	ldr.w	r0, [r8]
  400348:	f815 1b01 	ldrb.w	r1, [r5], #1
  40034c:	683b      	ldr	r3, [r7, #0]
  40034e:	4798      	blx	r3
  400350:	2800      	cmp	r0, #0
  400352:	db0a      	blt.n	40036a <_write+0x3e>
  400354:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400356:	3c01      	subs	r4, #1
  400358:	d1f4      	bne.n	400344 <_write+0x18>
  40035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40035e:	f04f 30ff 	mov.w	r0, #4294967295
  400362:	4770      	bx	lr
	for (; len != 0; --len) {
  400364:	4610      	mov	r0, r2
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40036e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400372:	bf00      	nop
  400374:	2040145c 	.word	0x2040145c
  400378:	20401460 	.word	0x20401460

0040037c <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  40037c:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  40037e:	6803      	ldr	r3, [r0, #0]
  400380:	4a07      	ldr	r2, [pc, #28]	; (4003a0 <_mcan_enable_peripheral_clock+0x24>)
  400382:	4293      	cmp	r3, r2
  400384:	d003      	beq.n	40038e <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400386:	4a07      	ldr	r2, [pc, #28]	; (4003a4 <_mcan_enable_peripheral_clock+0x28>)
  400388:	4293      	cmp	r3, r2
  40038a:	d004      	beq.n	400396 <_mcan_enable_peripheral_clock+0x1a>
  40038c:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  40038e:	2023      	movs	r0, #35	; 0x23
  400390:	4b05      	ldr	r3, [pc, #20]	; (4003a8 <_mcan_enable_peripheral_clock+0x2c>)
  400392:	4798      	blx	r3
  400394:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400396:	2025      	movs	r0, #37	; 0x25
  400398:	4b03      	ldr	r3, [pc, #12]	; (4003a8 <_mcan_enable_peripheral_clock+0x2c>)
  40039a:	4798      	blx	r3
	}
}
  40039c:	e7f6      	b.n	40038c <_mcan_enable_peripheral_clock+0x10>
  40039e:	bf00      	nop
  4003a0:	40030000 	.word	0x40030000
  4003a4:	40034000 	.word	0x40034000
  4003a8:	00400e6d 	.word	0x00400e6d

004003ac <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  4003ac:	b570      	push	{r4, r5, r6, lr}
  4003ae:	4606      	mov	r6, r0
  4003b0:	460c      	mov	r4, r1
  4003b2:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  4003b4:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  4003b6:	2005      	movs	r0, #5
  4003b8:	4b82      	ldr	r3, [pc, #520]	; (4005c4 <mcan_init+0x218>)
  4003ba:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  4003bc:	2190      	movs	r1, #144	; 0x90
  4003be:	2005      	movs	r0, #5
  4003c0:	4b81      	ldr	r3, [pc, #516]	; (4005c8 <mcan_init+0x21c>)
  4003c2:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  4003c4:	2005      	movs	r0, #5
  4003c6:	4b81      	ldr	r3, [pc, #516]	; (4005cc <mcan_init+0x220>)
  4003c8:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  4003ca:	4630      	mov	r0, r6
  4003cc:	4b80      	ldr	r3, [pc, #512]	; (4005d0 <mcan_init+0x224>)
  4003ce:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  4003d0:	69a3      	ldr	r3, [r4, #24]
  4003d2:	f043 0302 	orr.w	r3, r3, #2
  4003d6:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  4003d8:	4b7e      	ldr	r3, [pc, #504]	; (4005d4 <mcan_init+0x228>)
  4003da:	429c      	cmp	r4, r3
  4003dc:	f000 809c 	beq.w	400518 <mcan_init+0x16c>
	} else if (hw == MCAN1) {
  4003e0:	4b7d      	ldr	r3, [pc, #500]	; (4005d8 <mcan_init+0x22c>)
  4003e2:	429c      	cmp	r4, r3
  4003e4:	f000 80c3 	beq.w	40056e <mcan_init+0x1c2>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  4003e8:	2300      	movs	r3, #0
  4003ea:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  4003ee:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  4003f2:	4b7a      	ldr	r3, [pc, #488]	; (4005dc <mcan_init+0x230>)
  4003f4:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  4003f6:	4b7a      	ldr	r3, [pc, #488]	; (4005e0 <mcan_init+0x234>)
  4003f8:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  4003fa:	7beb      	ldrb	r3, [r5, #15]
  4003fc:	021b      	lsls	r3, r3, #8
  4003fe:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400402:	7c2a      	ldrb	r2, [r5, #16]
  400404:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400408:	4313      	orrs	r3, r2
  40040a:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  40040c:	7bab      	ldrb	r3, [r5, #14]
  40040e:	b11b      	cbz	r3, 400418 <mcan_init+0x6c>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400410:	68e3      	ldr	r3, [r4, #12]
  400412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400416:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400418:	6962      	ldr	r2, [r4, #20]
  40041a:	786b      	ldrb	r3, [r5, #1]
  40041c:	4313      	orrs	r3, r2
  40041e:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400420:	78ab      	ldrb	r3, [r5, #2]
  400422:	b11b      	cbz	r3, 40042c <mcan_init+0x80>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400424:	69a3      	ldr	r3, [r4, #24]
  400426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40042a:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  40042c:	796b      	ldrb	r3, [r5, #5]
  40042e:	b91b      	cbnz	r3, 400438 <mcan_init+0x8c>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400430:	69a3      	ldr	r3, [r4, #24]
  400432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400436:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400438:	79ab      	ldrb	r3, [r5, #6]
  40043a:	b11b      	cbz	r3, 400444 <mcan_init+0x98>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  40043c:	69a3      	ldr	r3, [r4, #24]
  40043e:	f043 0310 	orr.w	r3, r3, #16
  400442:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400444:	7a2b      	ldrb	r3, [r5, #8]
  400446:	041b      	lsls	r3, r3, #16
  400448:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40044c:	f043 0301 	orr.w	r3, r3, #1
  400450:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400452:	7b2b      	ldrb	r3, [r5, #12]
  400454:	7b6a      	ldrb	r2, [r5, #13]
  400456:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400458:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  40045a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  40045e:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400460:	7c6b      	ldrb	r3, [r5, #17]
  400462:	011b      	lsls	r3, r3, #4
  400464:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400468:	7caa      	ldrb	r2, [r5, #18]
  40046a:	0092      	lsls	r2, r2, #2
  40046c:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400470:	4313      	orrs	r3, r2
  400472:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400476:	7ceb      	ldrb	r3, [r5, #19]
  400478:	b12b      	cbz	r3, 400486 <mcan_init+0xda>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  40047a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40047e:	f043 0302 	orr.w	r3, r3, #2
  400482:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400486:	7d2b      	ldrb	r3, [r5, #20]
  400488:	b12b      	cbz	r3, 400496 <mcan_init+0xea>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  40048a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  40048e:	f043 0301 	orr.w	r3, r3, #1
  400492:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400496:	69ab      	ldr	r3, [r5, #24]
  400498:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  40049c:	7f2b      	ldrb	r3, [r5, #28]
  40049e:	b12b      	cbz	r3, 4004ac <mcan_init+0x100>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  4004a0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  4004a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  4004ac:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  4004b0:	7f6b      	ldrb	r3, [r5, #29]
  4004b2:	061b      	lsls	r3, r3, #24
  4004b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  4004b8:	4313      	orrs	r3, r2
  4004ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  4004be:	7fab      	ldrb	r3, [r5, #30]
  4004c0:	b12b      	cbz	r3, 4004ce <mcan_init+0x122>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  4004c2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  4004c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004ca:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  4004ce:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  4004d2:	7feb      	ldrb	r3, [r5, #31]
  4004d4:	061b      	lsls	r3, r3, #24
  4004d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  4004da:	4313      	orrs	r3, r2
  4004dc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  4004e0:	f895 3020 	ldrb.w	r3, [r5, #32]
  4004e4:	b12b      	cbz	r3, 4004f2 <mcan_init+0x146>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  4004e6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  4004ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4004ee:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  4004f2:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  4004f6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  4004fa:	061b      	lsls	r3, r3, #24
  4004fc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400500:	4313      	orrs	r3, r2
  400502:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400506:	2303      	movs	r3, #3
  400508:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  40050a:	f04f 33ff 	mov.w	r3, #4294967295
  40050e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400512:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  400516:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400518:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  40051c:	4931      	ldr	r1, [pc, #196]	; (4005e4 <mcan_init+0x238>)
  40051e:	4011      	ands	r1, r2
  400520:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400524:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400528:	492f      	ldr	r1, [pc, #188]	; (4005e8 <mcan_init+0x23c>)
  40052a:	4011      	ands	r1, r2
  40052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400530:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400534:	492d      	ldr	r1, [pc, #180]	; (4005ec <mcan_init+0x240>)
  400536:	4011      	ands	r1, r2
  400538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40053c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400540:	492b      	ldr	r1, [pc, #172]	; (4005f0 <mcan_init+0x244>)
  400542:	4011      	ands	r1, r2
  400544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400548:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  40054c:	4929      	ldr	r1, [pc, #164]	; (4005f4 <mcan_init+0x248>)
  40054e:	4011      	ands	r1, r2
  400550:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400554:	4828      	ldr	r0, [pc, #160]	; (4005f8 <mcan_init+0x24c>)
  400556:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400558:	4928      	ldr	r1, [pc, #160]	; (4005fc <mcan_init+0x250>)
  40055a:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  40055c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400560:	4927      	ldr	r1, [pc, #156]	; (400600 <mcan_init+0x254>)
  400562:	400a      	ands	r2, r1
  400564:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  400568:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  40056c:	e73c      	b.n	4003e8 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  40056e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400572:	4924      	ldr	r1, [pc, #144]	; (400604 <mcan_init+0x258>)
  400574:	4011      	ands	r1, r2
  400576:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  40057a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  40057e:	4922      	ldr	r1, [pc, #136]	; (400608 <mcan_init+0x25c>)
  400580:	4011      	ands	r1, r2
  400582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400586:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  40058a:	4920      	ldr	r1, [pc, #128]	; (40060c <mcan_init+0x260>)
  40058c:	4011      	ands	r1, r2
  40058e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400592:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400596:	491e      	ldr	r1, [pc, #120]	; (400610 <mcan_init+0x264>)
  400598:	4011      	ands	r1, r2
  40059a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40059e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  4005a2:	491c      	ldr	r1, [pc, #112]	; (400614 <mcan_init+0x268>)
  4005a4:	4011      	ands	r1, r2
  4005a6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  4005aa:	481b      	ldr	r0, [pc, #108]	; (400618 <mcan_init+0x26c>)
  4005ac:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  4005ae:	4913      	ldr	r1, [pc, #76]	; (4005fc <mcan_init+0x250>)
  4005b0:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  4005b2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  4005b6:	4919      	ldr	r1, [pc, #100]	; (40061c <mcan_init+0x270>)
  4005b8:	400a      	ands	r2, r1
  4005ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4005be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  4005c2:	e711      	b.n	4003e8 <mcan_init+0x3c>
  4005c4:	00400f69 	.word	0x00400f69
  4005c8:	00400e8d 	.word	0x00400e8d
  4005cc:	00400f55 	.word	0x00400f55
  4005d0:	0040037d 	.word	0x0040037d
  4005d4:	40030000 	.word	0x40030000
  4005d8:	40034000 	.word	0x40034000
  4005dc:	06020a07 	.word	0x06020a07
  4005e0:	00050a33 	.word	0x00050a33
  4005e4:	20400d58 	.word	0x20400d58
  4005e8:	20400ad8 	.word	0x20400ad8
  4005ec:	20400b58 	.word	0x20400b58
  4005f0:	20400c58 	.word	0x20400c58
  4005f4:	204009d8 	.word	0x204009d8
  4005f8:	20400dd8 	.word	0x20400dd8
  4005fc:	04040000 	.word	0x04040000
  400600:	20400e58 	.word	0x20400e58
  400604:	20401218 	.word	0x20401218
  400608:	20400f98 	.word	0x20400f98
  40060c:	20401018 	.word	0x20401018
  400610:	20401118 	.word	0x20401118
  400614:	20400e98 	.word	0x20400e98
  400618:	20401298 	.word	0x20401298
  40061c:	20401318 	.word	0x20401318

00400620 <mcan_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN module instance
 * \param[in]  baudrate    MCAN baudrate
 */
void mcan_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400622:	4605      	mov	r5, r0
  400624:	460f      	mov	r7, r1
//@{
static inline uint32_t genclk_get_frequency_hz(uint32_t ul_id)
{
	uint32_t pck_source,clock_config;
	uint32_t pck_freq = 0;
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  400626:	4b2d      	ldr	r3, [pc, #180]	; (4006dc <mcan_set_baudrate+0xbc>)
  400628:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  40062a:	f006 0607 	and.w	r6, r6, #7
	switch(pck_source)
  40062e:	2e04      	cmp	r6, #4
  400630:	d84f      	bhi.n	4006d2 <mcan_set_baudrate+0xb2>
  400632:	e8df f006 	tbb	[pc, r6]
  400636:	2219      	.short	0x2219
  400638:	4622      	.short	0x4622
  40063a:	03          	.byte	0x03
  40063b:	00          	.byte	0x00
			break;
		case PMC_PCK_CSS_UPLL_CLK:
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
			break;
		case PMC_PCK_CSS_MCK:
			pck_freq = sysclk_get_main_hz();
  40063c:	4c28      	ldr	r4, [pc, #160]	; (4006e0 <mcan_set_baudrate+0xc0>)
			break;
		default:
			break;
	}
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  40063e:	4b27      	ldr	r3, [pc, #156]	; (4006dc <mcan_set_baudrate+0xbc>)
  400640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400642:	f3c3 1307 	ubfx	r3, r3, #4, #8
  400646:	3301      	adds	r3, #1
  400648:	fbb4 f3f3 	udiv	r3, r4, r3
	uint32_t mcan_nbtp_nbrp_value;
	uint32_t mcan_nbtp_nsgw_value = 3, mcan_nbtp_ntseg1_value = 10, mcan_nbtp_ntseg2_value = 7;

	gclk_mcan_value = genclk_get_frequency_hz(PMC_PCK_5);

	mcan_nbtp_nbrp_value = gclk_mcan_value / baudrate / (3 + mcan_nbtp_ntseg1_value + mcan_nbtp_ntseg2_value);
  40064c:	fbb3 f3f7 	udiv	r3, r3, r7
  400650:	4a24      	ldr	r2, [pc, #144]	; (4006e4 <mcan_set_baudrate+0xc4>)
  400652:	fba2 2303 	umull	r2, r3, r2, r3
  400656:	091b      	lsrs	r3, r3, #4
#if (SAMV71B || SAME70B || SAMV70B)
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  400658:	3b01      	subs	r3, #1
  40065a:	4a23      	ldr	r2, [pc, #140]	; (4006e8 <mcan_set_baudrate+0xc8>)
  40065c:	ea02 4303 	and.w	r3, r2, r3, lsl #16
			MCAN_NBTP_NSJW(mcan_nbtp_nsgw_value) |
			MCAN_NBTP_NTSEG1(mcan_nbtp_ntseg1_value) |
  400660:	4a22      	ldr	r2, [pc, #136]	; (4006ec <mcan_set_baudrate+0xcc>)
  400662:	431a      	orrs	r2, r3
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  400664:	61ea      	str	r2, [r5, #28]
  400666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pmc_get_slck_config())
  400668:	4b21      	ldr	r3, [pc, #132]	; (4006f0 <mcan_set_baudrate+0xd0>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  40066e:	bf14      	ite	ne
  400670:	f44f 44fa 	movne.w	r4, #32000	; 0x7d00
  400674:	f44f 4400 	moveq.w	r4, #32768	; 0x8000
  400678:	e7e1      	b.n	40063e <mcan_set_baudrate+0x1e>
			clock_config = pmc_get_mainck_config();
  40067a:	4b1e      	ldr	r3, [pc, #120]	; (4006f4 <mcan_set_baudrate+0xd4>)
  40067c:	4798      	blx	r3
			if (clock_config & CKGR_MOR_MOSCSEL)
  40067e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400682:	d00e      	beq.n	4006a2 <mcan_set_baudrate+0x82>
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  400684:	f000 0070 	and.w	r0, r0, #112	; 0x70
  400688:	2810      	cmp	r0, #16
  40068a:	d006      	beq.n	40069a <mcan_set_baudrate+0x7a>
  40068c:	2820      	cmp	r0, #32
  40068e:	d006      	beq.n	40069e <mcan_set_baudrate+0x7e>
	uint32_t pck_freq = 0;
  400690:	2800      	cmp	r0, #0
  400692:	4c19      	ldr	r4, [pc, #100]	; (4006f8 <mcan_set_baudrate+0xd8>)
  400694:	bf18      	it	ne
  400696:	2400      	movne	r4, #0
  400698:	e004      	b.n	4006a4 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  40069a:	4c18      	ldr	r4, [pc, #96]	; (4006fc <mcan_set_baudrate+0xdc>)
  40069c:	e002      	b.n	4006a4 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  40069e:	4c18      	ldr	r4, [pc, #96]	; (400700 <mcan_set_baudrate+0xe0>)
  4006a0:	e000      	b.n	4006a4 <mcan_set_baudrate+0x84>
				pck_freq = OSC_MAINCK_XTAL_HZ;
  4006a2:	4c17      	ldr	r4, [pc, #92]	; (400700 <mcan_set_baudrate+0xe0>)
			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  4006a4:	2e02      	cmp	r6, #2
  4006a6:	d1ca      	bne.n	40063e <mcan_set_baudrate+0x1e>
				clock_config = pmc_get_pllack_config();
  4006a8:	4b16      	ldr	r3, [pc, #88]	; (400704 <mcan_set_baudrate+0xe4>)
  4006aa:	4798      	blx	r3
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  4006ac:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
  4006b0:	d011      	beq.n	4006d6 <mcan_set_baudrate+0xb6>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  4006b2:	f3c0 430a 	ubfx	r3, r0, #16, #11
  4006b6:	3301      	adds	r3, #1
  4006b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4006bc:	fb03 f404 	mul.w	r4, r3, r4
  4006c0:	e7bd      	b.n	40063e <mcan_set_baudrate+0x1e>
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  4006c2:	4b11      	ldr	r3, [pc, #68]	; (400708 <mcan_set_baudrate+0xe8>)
  4006c4:	4798      	blx	r3
  4006c6:	4c11      	ldr	r4, [pc, #68]	; (40070c <mcan_set_baudrate+0xec>)
  4006c8:	4b11      	ldr	r3, [pc, #68]	; (400710 <mcan_set_baudrate+0xf0>)
  4006ca:	2800      	cmp	r0, #0
  4006cc:	bf18      	it	ne
  4006ce:	461c      	movne	r4, r3
  4006d0:	e7b5      	b.n	40063e <mcan_set_baudrate+0x1e>
	uint32_t pck_freq = 0;
  4006d2:	2400      	movs	r4, #0
  4006d4:	e7b3      	b.n	40063e <mcan_set_baudrate+0x1e>
					return 0;
  4006d6:	2300      	movs	r3, #0
  4006d8:	e7b8      	b.n	40064c <mcan_set_baudrate+0x2c>
  4006da:	bf00      	nop
  4006dc:	400e0600 	.word	0x400e0600
  4006e0:	11e1a300 	.word	0x11e1a300
  4006e4:	cccccccd 	.word	0xcccccccd
  4006e8:	01ff0000 	.word	0x01ff0000
  4006ec:	06000a07 	.word	0x06000a07
  4006f0:	00400ec9 	.word	0x00400ec9
  4006f4:	00400ed9 	.word	0x00400ed9
  4006f8:	003d0900 	.word	0x003d0900
  4006fc:	007a1200 	.word	0x007a1200
  400700:	00b71b00 	.word	0x00b71b00
  400704:	00400ef5 	.word	0x00400ef5
  400708:	00400f09 	.word	0x00400f09
  40070c:	1c9c3800 	.word	0x1c9c3800
  400710:	0e4e1c00 	.word	0x0e4e1c00

00400714 <mcan_fd_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN_FD module instance
 * \param[in]  baudrate    MCAN_FD baudrate
 */
void mcan_fd_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400716:	4604      	mov	r4, r0
  400718:	460f      	mov	r7, r1
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  40071a:	4b2d      	ldr	r3, [pc, #180]	; (4007d0 <mcan_fd_set_baudrate+0xbc>)
  40071c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  40071e:	f006 0607 	and.w	r6, r6, #7
	switch(pck_source)
  400722:	2e04      	cmp	r6, #4
  400724:	d850      	bhi.n	4007c8 <mcan_fd_set_baudrate+0xb4>
  400726:	e8df f006 	tbb	[pc, r6]
  40072a:	231a      	.short	0x231a
  40072c:	4723      	.short	0x4723
  40072e:	03          	.byte	0x03
  40072f:	00          	.byte	0x00
			pck_freq = sysclk_get_main_hz();
  400730:	4d28      	ldr	r5, [pc, #160]	; (4007d4 <mcan_fd_set_baudrate+0xc0>)
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  400732:	4b27      	ldr	r3, [pc, #156]	; (4007d0 <mcan_fd_set_baudrate+0xbc>)
  400734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400736:	f3c3 1307 	ubfx	r3, r3, #4, #8
  40073a:	3301      	adds	r3, #1
  40073c:	fbb5 f3f3 	udiv	r3, r5, r3
	uint32_t mcan_fd_dbtp_dbrp_value;
	uint32_t mcan_fd_dbtp_dsgw_value = 3, mcan_fd_dbtp_dtseg1_value = 9, mcan_fd_dbtp_dtseg2_value = 3;

	gclk_mcan_fd_value = genclk_get_frequency_hz(PMC_PCK_5);
	
	mcan_fd_dbtp_dbrp_value = gclk_mcan_fd_value / baudrate / (3 + mcan_fd_dbtp_dtseg1_value + mcan_fd_dbtp_dtseg2_value);
  400740:	fbb3 f3f7 	udiv	r3, r3, r7
  400744:	4a24      	ldr	r2, [pc, #144]	; (4007d8 <mcan_fd_set_baudrate+0xc4>)
  400746:	fba2 2303 	umull	r2, r3, r2, r3
  40074a:	08db      	lsrs	r3, r3, #3
#if (SAMV71B || SAME70B || SAMV70B)
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(mcan_fd_dbtp_dbrp_value - 1) |
  40074c:	3b01      	subs	r3, #1
  40074e:	041b      	lsls	r3, r3, #16
  400750:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
			MCAN_DBTP_DSJW(mcan_fd_dbtp_dsgw_value) |
			MCAN_DBTP_DTSEG1(mcan_fd_dbtp_dtseg1_value) |
  400754:	f640 1233 	movw	r2, #2355	; 0x933
  400758:	431a      	orrs	r2, r3
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(mcan_fd_dbtp_dbrp_value - 1) |
  40075a:	60e2      	str	r2, [r4, #12]
  40075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pmc_get_slck_config())
  40075e:	4b1f      	ldr	r3, [pc, #124]	; (4007dc <mcan_fd_set_baudrate+0xc8>)
  400760:	4798      	blx	r3
  400762:	2800      	cmp	r0, #0
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  400764:	bf14      	ite	ne
  400766:	f44f 45fa 	movne.w	r5, #32000	; 0x7d00
  40076a:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
  40076e:	e7e0      	b.n	400732 <mcan_fd_set_baudrate+0x1e>
			clock_config = pmc_get_mainck_config();
  400770:	4b1b      	ldr	r3, [pc, #108]	; (4007e0 <mcan_fd_set_baudrate+0xcc>)
  400772:	4798      	blx	r3
			if (clock_config & CKGR_MOR_MOSCSEL)
  400774:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400778:	d00e      	beq.n	400798 <mcan_fd_set_baudrate+0x84>
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  40077a:	f000 0070 	and.w	r0, r0, #112	; 0x70
  40077e:	2810      	cmp	r0, #16
  400780:	d006      	beq.n	400790 <mcan_fd_set_baudrate+0x7c>
  400782:	2820      	cmp	r0, #32
  400784:	d006      	beq.n	400794 <mcan_fd_set_baudrate+0x80>
	uint32_t pck_freq = 0;
  400786:	2800      	cmp	r0, #0
  400788:	4d16      	ldr	r5, [pc, #88]	; (4007e4 <mcan_fd_set_baudrate+0xd0>)
  40078a:	bf18      	it	ne
  40078c:	2500      	movne	r5, #0
  40078e:	e004      	b.n	40079a <mcan_fd_set_baudrate+0x86>
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  400790:	4d15      	ldr	r5, [pc, #84]	; (4007e8 <mcan_fd_set_baudrate+0xd4>)
  400792:	e002      	b.n	40079a <mcan_fd_set_baudrate+0x86>
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  400794:	4d15      	ldr	r5, [pc, #84]	; (4007ec <mcan_fd_set_baudrate+0xd8>)
  400796:	e000      	b.n	40079a <mcan_fd_set_baudrate+0x86>
				pck_freq = OSC_MAINCK_XTAL_HZ;
  400798:	4d14      	ldr	r5, [pc, #80]	; (4007ec <mcan_fd_set_baudrate+0xd8>)
			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  40079a:	2e02      	cmp	r6, #2
  40079c:	d1c9      	bne.n	400732 <mcan_fd_set_baudrate+0x1e>
				clock_config = pmc_get_pllack_config();
  40079e:	4b14      	ldr	r3, [pc, #80]	; (4007f0 <mcan_fd_set_baudrate+0xdc>)
  4007a0:	4798      	blx	r3
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  4007a2:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
  4007a6:	d011      	beq.n	4007cc <mcan_fd_set_baudrate+0xb8>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  4007a8:	f3c0 430a 	ubfx	r3, r0, #16, #11
  4007ac:	3301      	adds	r3, #1
  4007ae:	fbb3 f3f2 	udiv	r3, r3, r2
  4007b2:	fb03 f505 	mul.w	r5, r3, r5
  4007b6:	e7bc      	b.n	400732 <mcan_fd_set_baudrate+0x1e>
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  4007b8:	4b0e      	ldr	r3, [pc, #56]	; (4007f4 <mcan_fd_set_baudrate+0xe0>)
  4007ba:	4798      	blx	r3
  4007bc:	4d0e      	ldr	r5, [pc, #56]	; (4007f8 <mcan_fd_set_baudrate+0xe4>)
  4007be:	4b0f      	ldr	r3, [pc, #60]	; (4007fc <mcan_fd_set_baudrate+0xe8>)
  4007c0:	2800      	cmp	r0, #0
  4007c2:	bf18      	it	ne
  4007c4:	461d      	movne	r5, r3
  4007c6:	e7b4      	b.n	400732 <mcan_fd_set_baudrate+0x1e>
	uint32_t pck_freq = 0;
  4007c8:	2500      	movs	r5, #0
  4007ca:	e7b2      	b.n	400732 <mcan_fd_set_baudrate+0x1e>
					return 0;
  4007cc:	2300      	movs	r3, #0
  4007ce:	e7b7      	b.n	400740 <mcan_fd_set_baudrate+0x2c>
  4007d0:	400e0600 	.word	0x400e0600
  4007d4:	11e1a300 	.word	0x11e1a300
  4007d8:	88888889 	.word	0x88888889
  4007dc:	00400ec9 	.word	0x00400ec9
  4007e0:	00400ed9 	.word	0x00400ed9
  4007e4:	003d0900 	.word	0x003d0900
  4007e8:	007a1200 	.word	0x007a1200
  4007ec:	00b71b00 	.word	0x00b71b00
  4007f0:	00400ef5 	.word	0x00400ef5
  4007f4:	00400f09 	.word	0x00400f09
  4007f8:	1c9c3800 	.word	0x1c9c3800
  4007fc:	0e4e1c00 	.word	0x0e4e1c00

00400800 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400800:	6802      	ldr	r2, [r0, #0]
  400802:	6993      	ldr	r3, [r2, #24]
  400804:	f023 0301 	bic.w	r3, r3, #1
  400808:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  40080a:	6802      	ldr	r2, [r0, #0]
  40080c:	6993      	ldr	r3, [r2, #24]
  40080e:	f013 0f01 	tst.w	r3, #1
  400812:	d1fb      	bne.n	40080c <mcan_start+0xc>
}
  400814:	4770      	bx	lr

00400816 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400816:	6802      	ldr	r2, [r0, #0]
  400818:	6993      	ldr	r3, [r2, #24]
  40081a:	f043 0301 	orr.w	r3, r3, #1
  40081e:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400820:	6802      	ldr	r2, [r0, #0]
  400822:	6993      	ldr	r3, [r2, #24]
  400824:	f013 0f01 	tst.w	r3, #1
  400828:	d0fb      	beq.n	400822 <mcan_stop+0xc>
}
  40082a:	4770      	bx	lr

0040082c <mcan_enable_fd_mode>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_enable_fd_mode(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  40082c:	6802      	ldr	r2, [r0, #0]
  40082e:	6993      	ldr	r3, [r2, #24]
  400830:	f043 0301 	orr.w	r3, r3, #1
  400834:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400836:	6802      	ldr	r2, [r0, #0]
  400838:	6993      	ldr	r3, [r2, #24]
  40083a:	f013 0f01 	tst.w	r3, #1
  40083e:	d0fb      	beq.n	400838 <mcan_enable_fd_mode+0xc>
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400840:	6993      	ldr	r3, [r2, #24]
  400842:	f043 0302 	orr.w	r3, r3, #2
  400846:	6193      	str	r3, [r2, #24]
#if (SAMV71B || SAME70B || SAMV70B)
	module_inst->hw->MCAN_CCCR |= (MCAN_CCCR_FDOE | MCAN_CCCR_BRSE);
  400848:	6802      	ldr	r2, [r0, #0]
  40084a:	6993      	ldr	r3, [r2, #24]
  40084c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
  400850:	6193      	str	r3, [r2, #24]
  400852:	4770      	bx	lr

00400854 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  400854:	b430      	push	{r4, r5}
  400856:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  400858:	6803      	ldr	r3, [r0, #0]
  40085a:	490f      	ldr	r1, [pc, #60]	; (400898 <mcan_get_rx_fifo_0_element+0x44>)
  40085c:	428b      	cmp	r3, r1
  40085e:	d00d      	beq.n	40087c <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  400860:	490e      	ldr	r1, [pc, #56]	; (40089c <mcan_get_rx_fifo_0_element+0x48>)
  400862:	428b      	cmp	r3, r1
  400864:	d114      	bne.n	400890 <mcan_get_rx_fifo_0_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400866:	4c0e      	ldr	r4, [pc, #56]	; (4008a0 <mcan_get_rx_fifo_0_element+0x4c>)
  400868:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  40086c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40086e:	6028      	str	r0, [r5, #0]
  400870:	6069      	str	r1, [r5, #4]
  400872:	60aa      	str	r2, [r5, #8]
  400874:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  400876:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  400878:	bc30      	pop	{r4, r5}
  40087a:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  40087c:	4c09      	ldr	r4, [pc, #36]	; (4008a4 <mcan_get_rx_fifo_0_element+0x50>)
  40087e:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  400884:	6028      	str	r0, [r5, #0]
  400886:	6069      	str	r1, [r5, #4]
  400888:	60aa      	str	r2, [r5, #8]
  40088a:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  40088c:	2000      	movs	r0, #0
  40088e:	e7f3      	b.n	400878 <mcan_get_rx_fifo_0_element+0x24>
	return ERR_INVALID_ARG;
  400890:	f06f 0007 	mvn.w	r0, #7
  400894:	e7f0      	b.n	400878 <mcan_get_rx_fifo_0_element+0x24>
  400896:	bf00      	nop
  400898:	40030000 	.word	0x40030000
  40089c:	40034000 	.word	0x40034000
  4008a0:	20401018 	.word	0x20401018
  4008a4:	20400b58 	.word	0x20400b58

004008a8 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  4008a8:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  4008aa:	6803      	ldr	r3, [r0, #0]
  4008ac:	4819      	ldr	r0, [pc, #100]	; (400914 <mcan_set_tx_buffer_element+0x6c>)
  4008ae:	4283      	cmp	r3, r0
  4008b0:	d018      	beq.n	4008e4 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  4008b2:	4819      	ldr	r0, [pc, #100]	; (400918 <mcan_set_tx_buffer_element+0x70>)
  4008b4:	4283      	cmp	r3, r0
  4008b6:	d129      	bne.n	40090c <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  4008b8:	680c      	ldr	r4, [r1, #0]
  4008ba:	4818      	ldr	r0, [pc, #96]	; (40091c <mcan_set_tx_buffer_element+0x74>)
  4008bc:	0112      	lsls	r2, r2, #4
  4008be:	1883      	adds	r3, r0, r2
  4008c0:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  4008c2:	684c      	ldr	r4, [r1, #4]
  4008c4:	605c      	str	r4, [r3, #4]
  4008c6:	f101 0308 	add.w	r3, r1, #8
  4008ca:	3207      	adds	r2, #7
  4008cc:	4402      	add	r2, r0
  4008ce:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  4008d0:	f813 0b01 	ldrb.w	r0, [r3], #1
  4008d4:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4008d8:	428b      	cmp	r3, r1
  4008da:	d1f9      	bne.n	4008d0 <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  4008dc:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  4008de:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008e2:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  4008e4:	680c      	ldr	r4, [r1, #0]
  4008e6:	480e      	ldr	r0, [pc, #56]	; (400920 <mcan_set_tx_buffer_element+0x78>)
  4008e8:	0112      	lsls	r2, r2, #4
  4008ea:	1883      	adds	r3, r0, r2
  4008ec:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  4008ee:	684c      	ldr	r4, [r1, #4]
  4008f0:	605c      	str	r4, [r3, #4]
  4008f2:	f101 0308 	add.w	r3, r1, #8
  4008f6:	3207      	adds	r2, #7
  4008f8:	4402      	add	r2, r0
  4008fa:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  4008fc:	f813 0b01 	ldrb.w	r0, [r3], #1
  400900:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400904:	428b      	cmp	r3, r1
  400906:	d1f9      	bne.n	4008fc <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  400908:	2000      	movs	r0, #0
  40090a:	e7e8      	b.n	4008de <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  40090c:	f06f 0007 	mvn.w	r0, #7
  400910:	e7e5      	b.n	4008de <mcan_set_tx_buffer_element+0x36>
  400912:	bf00      	nop
  400914:	40030000 	.word	0x40030000
  400918:	40034000 	.word	0x40034000
  40091c:	20401298 	.word	0x20401298
  400920:	20400dd8 	.word	0x20400dd8

00400924 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400924:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400926:	0189      	lsls	r1, r1, #6
  400928:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40092a:	2402      	movs	r4, #2
  40092c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40092e:	f04f 31ff 	mov.w	r1, #4294967295
  400932:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400934:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400936:	605a      	str	r2, [r3, #4]
}
  400938:	f85d 4b04 	ldr.w	r4, [sp], #4
  40093c:	4770      	bx	lr

0040093e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40093e:	0189      	lsls	r1, r1, #6
  400940:	2305      	movs	r3, #5
  400942:	5043      	str	r3, [r0, r1]
  400944:	4770      	bx	lr

00400946 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400946:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40094a:	61ca      	str	r2, [r1, #28]
  40094c:	4770      	bx	lr

0040094e <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40094e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400952:	624a      	str	r2, [r1, #36]	; 0x24
  400954:	4770      	bx	lr

00400956 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400956:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40095a:	6a08      	ldr	r0, [r1, #32]
}
  40095c:	4770      	bx	lr

0040095e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40095e:	6943      	ldr	r3, [r0, #20]
  400960:	f013 0f02 	tst.w	r3, #2
  400964:	d002      	beq.n	40096c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400966:	61c1      	str	r1, [r0, #28]
	return 0;
  400968:	2000      	movs	r0, #0
  40096a:	4770      	bx	lr
		return 1;
  40096c:	2001      	movs	r0, #1
}
  40096e:	4770      	bx	lr

00400970 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400970:	6943      	ldr	r3, [r0, #20]
  400972:	f013 0f01 	tst.w	r3, #1
  400976:	d003      	beq.n	400980 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400978:	6983      	ldr	r3, [r0, #24]
  40097a:	700b      	strb	r3, [r1, #0]
	return 0;
  40097c:	2000      	movs	r0, #0
  40097e:	4770      	bx	lr
		return 1;
  400980:	2001      	movs	r0, #1
}
  400982:	4770      	bx	lr

00400984 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400984:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400986:	4810      	ldr	r0, [pc, #64]	; (4009c8 <sysclk_init+0x44>)
  400988:	4b10      	ldr	r3, [pc, #64]	; (4009cc <sysclk_init+0x48>)
  40098a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40098c:	213e      	movs	r1, #62	; 0x3e
  40098e:	2000      	movs	r0, #0
  400990:	4b0f      	ldr	r3, [pc, #60]	; (4009d0 <sysclk_init+0x4c>)
  400992:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400994:	4c0f      	ldr	r4, [pc, #60]	; (4009d4 <sysclk_init+0x50>)
  400996:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400998:	2800      	cmp	r0, #0
  40099a:	d0fc      	beq.n	400996 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40099c:	4b0e      	ldr	r3, [pc, #56]	; (4009d8 <sysclk_init+0x54>)
  40099e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4009a0:	4a0e      	ldr	r2, [pc, #56]	; (4009dc <sysclk_init+0x58>)
  4009a2:	4b0f      	ldr	r3, [pc, #60]	; (4009e0 <sysclk_init+0x5c>)
  4009a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4009a6:	4c0f      	ldr	r4, [pc, #60]	; (4009e4 <sysclk_init+0x60>)
  4009a8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4009aa:	2800      	cmp	r0, #0
  4009ac:	d0fc      	beq.n	4009a8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4009ae:	2002      	movs	r0, #2
  4009b0:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <sysclk_init+0x64>)
  4009b2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4009b4:	2000      	movs	r0, #0
  4009b6:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <sysclk_init+0x68>)
  4009b8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4009ba:	4b0d      	ldr	r3, [pc, #52]	; (4009f0 <sysclk_init+0x6c>)
  4009bc:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  4009be:	4802      	ldr	r0, [pc, #8]	; (4009c8 <sysclk_init+0x44>)
  4009c0:	4b02      	ldr	r3, [pc, #8]	; (4009cc <sysclk_init+0x48>)
  4009c2:	4798      	blx	r3
  4009c4:	bd10      	pop	{r4, pc}
  4009c6:	bf00      	nop
  4009c8:	08f0d180 	.word	0x08f0d180
  4009cc:	00401155 	.word	0x00401155
  4009d0:	00400dd1 	.word	0x00400dd1
  4009d4:	00400e25 	.word	0x00400e25
  4009d8:	00400e35 	.word	0x00400e35
  4009dc:	20183f01 	.word	0x20183f01
  4009e0:	400e0600 	.word	0x400e0600
  4009e4:	00400e45 	.word	0x00400e45
  4009e8:	00400d35 	.word	0x00400d35
  4009ec:	00400d6d 	.word	0x00400d6d
  4009f0:	00401049 	.word	0x00401049

004009f4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009fa:	4b83      	ldr	r3, [pc, #524]	; (400c08 <board_init+0x214>)
  4009fc:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4009fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a02:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400a06:	4b81      	ldr	r3, [pc, #516]	; (400c0c <board_init+0x218>)
  400a08:	2100      	movs	r1, #0
  400a0a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400a0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a12:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400a16:	695a      	ldr	r2, [r3, #20]
  400a18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400a1c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400a1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a22:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400a26:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400a2a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400a2e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400a32:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400a36:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400a3a:	016e      	lsls	r6, r5, #5
  400a3c:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400a40:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400a44:	461c      	mov	r4, r3
  400a46:	ea06 000e 	and.w	r0, r6, lr
  400a4a:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400a4c:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400a4e:	ea40 0102 	orr.w	r1, r0, r2
  400a52:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400a56:	3b01      	subs	r3, #1
  400a58:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a60:	d1f5      	bne.n	400a4e <board_init+0x5a>
    } while(sets-- != 0U);
  400a62:	3d01      	subs	r5, #1
  400a64:	3e20      	subs	r6, #32
  400a66:	f1b5 3fff 	cmp.w	r5, #4294967295
  400a6a:	d1ec      	bne.n	400a46 <board_init+0x52>
  400a6c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  400a70:	4b66      	ldr	r3, [pc, #408]	; (400c0c <board_init+0x218>)
  400a72:	695a      	ldr	r2, [r3, #20]
  400a74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a78:	615a      	str	r2, [r3, #20]
  400a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a7e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a82:	4a63      	ldr	r2, [pc, #396]	; (400c10 <board_init+0x21c>)
  400a84:	4963      	ldr	r1, [pc, #396]	; (400c14 <board_init+0x220>)
  400a86:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a88:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a8c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  400a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a92:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a96:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a9a:	f022 0201 	bic.w	r2, r2, #1
  400a9e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400aa2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400aa6:	f022 0201 	bic.w	r2, r2, #1
  400aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ab2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400ab6:	200a      	movs	r0, #10
  400ab8:	4c57      	ldr	r4, [pc, #348]	; (400c18 <board_init+0x224>)
  400aba:	47a0      	blx	r4
  400abc:	200b      	movs	r0, #11
  400abe:	47a0      	blx	r4
  400ac0:	200c      	movs	r0, #12
  400ac2:	47a0      	blx	r4
  400ac4:	2010      	movs	r0, #16
  400ac6:	47a0      	blx	r4
  400ac8:	2011      	movs	r0, #17
  400aca:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400acc:	4b53      	ldr	r3, [pc, #332]	; (400c1c <board_init+0x228>)
  400ace:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400ad2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ad4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ad8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ada:	4a51      	ldr	r2, [pc, #324]	; (400c20 <board_init+0x22c>)
  400adc:	f44f 7100 	mov.w	r1, #512	; 0x200
  400ae0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ae2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ae6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ae8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aea:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400aee:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400af0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400af4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400af6:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400af8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400afc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400afe:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400b02:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b04:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b06:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400b0a:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b0c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b10:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b14:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400b18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400b1c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b1e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b22:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b24:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b26:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b2a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b2c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400b30:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b32:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b34:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400b38:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b3a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b3c:	4939      	ldr	r1, [pc, #228]	; (400c24 <board_init+0x230>)
  400b3e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400b42:	f043 0310 	orr.w	r3, r3, #16
  400b46:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b4a:	4b37      	ldr	r3, [pc, #220]	; (400c28 <board_init+0x234>)
  400b4c:	2110      	movs	r1, #16
  400b4e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b50:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b54:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b56:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b58:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b5c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b5e:	4308      	orrs	r0, r1
  400b60:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b62:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b64:	4308      	orrs	r0, r1
  400b66:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b68:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400b6a:	2108      	movs	r1, #8
  400b6c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b6e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b72:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b74:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b76:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b7a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b7c:	f020 0008 	bic.w	r0, r0, #8
  400b80:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b82:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b84:	f020 0008 	bic.w	r0, r0, #8
  400b88:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b8a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400b8c:	2104      	movs	r1, #4
  400b8e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b90:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b94:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b96:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b98:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b9e:	f020 0004 	bic.w	r0, r0, #4
  400ba2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ba4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400ba6:	f020 0004 	bic.w	r0, r0, #4
  400baa:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bac:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bae:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400bb2:	2101      	movs	r1, #1
  400bb4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bb6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bba:	2102      	movs	r1, #2
  400bbc:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bbe:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bc6:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bcc:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bce:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400bd4:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400bd6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400bda:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400bdc:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400bde:	4319      	orrs	r1, r3
  400be0:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400be2:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400be8:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bee:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bf0:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400bf6:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400bf8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400bfc:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400bfe:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c00:	4319      	orrs	r1, r3
  400c02:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c04:	6053      	str	r3, [r2, #4]
  400c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c08:	400e1850 	.word	0x400e1850
  400c0c:	e000ed00 	.word	0xe000ed00
  400c10:	400e0c00 	.word	0x400e0c00
  400c14:	5a00080c 	.word	0x5a00080c
  400c18:	00400e6d 	.word	0x00400e6d
  400c1c:	400e0e00 	.word	0x400e0e00
  400c20:	400e1200 	.word	0x400e1200
  400c24:	40088000 	.word	0x40088000
  400c28:	400e1000 	.word	0x400e1000

00400c2c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400c2c:	b410      	push	{r4}
  400c2e:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c30:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c32:	b94c      	cbnz	r4, 400c48 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400c34:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400c36:	b14b      	cbz	r3, 400c4c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400c38:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400c3a:	b94a      	cbnz	r2, 400c50 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400c3c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400c3e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400c40:	6001      	str	r1, [r0, #0]
}
  400c42:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c46:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400c48:	6641      	str	r1, [r0, #100]	; 0x64
  400c4a:	e7f4      	b.n	400c36 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400c4c:	6541      	str	r1, [r0, #84]	; 0x54
  400c4e:	e7f4      	b.n	400c3a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400c50:	6301      	str	r1, [r0, #48]	; 0x30
  400c52:	e7f4      	b.n	400c3e <pio_set_output+0x12>

00400c54 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c54:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c56:	4770      	bx	lr

00400c58 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c58:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c5a:	4770      	bx	lr

00400c5c <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400c5c:	4b07      	ldr	r3, [pc, #28]	; (400c7c <pio_toggle_pin+0x20>)
  400c5e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  400c62:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400c64:	6b99      	ldr	r1, [r3, #56]	; 0x38
  400c66:	f000 021f 	and.w	r2, r0, #31
  400c6a:	2001      	movs	r0, #1
  400c6c:	4090      	lsls	r0, r2
  400c6e:	4201      	tst	r1, r0
  400c70:	d101      	bne.n	400c76 <pio_toggle_pin+0x1a>
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400c72:	6318      	str	r0, [r3, #48]	; 0x30
  400c74:	4770      	bx	lr
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400c76:	6358      	str	r0, [r3, #52]	; 0x34
  400c78:	4770      	bx	lr
  400c7a:	bf00      	nop
  400c7c:	00200707 	.word	0x00200707

00400c80 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c84:	4604      	mov	r4, r0
  400c86:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c88:	4b0e      	ldr	r3, [pc, #56]	; (400cc4 <pio_handler_process+0x44>)
  400c8a:	4798      	blx	r3
  400c8c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c8e:	4620      	mov	r0, r4
  400c90:	4b0d      	ldr	r3, [pc, #52]	; (400cc8 <pio_handler_process+0x48>)
  400c92:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c94:	4005      	ands	r5, r0
  400c96:	d013      	beq.n	400cc0 <pio_handler_process+0x40>
  400c98:	4c0c      	ldr	r4, [pc, #48]	; (400ccc <pio_handler_process+0x4c>)
  400c9a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c9e:	e003      	b.n	400ca8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ca0:	42b4      	cmp	r4, r6
  400ca2:	d00d      	beq.n	400cc0 <pio_handler_process+0x40>
  400ca4:	3410      	adds	r4, #16
		while (status != 0) {
  400ca6:	b15d      	cbz	r5, 400cc0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400ca8:	6820      	ldr	r0, [r4, #0]
  400caa:	4540      	cmp	r0, r8
  400cac:	d1f8      	bne.n	400ca0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cae:	6861      	ldr	r1, [r4, #4]
  400cb0:	4229      	tst	r1, r5
  400cb2:	d0f5      	beq.n	400ca0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400cb4:	68e3      	ldr	r3, [r4, #12]
  400cb6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cb8:	6863      	ldr	r3, [r4, #4]
  400cba:	ea25 0503 	bic.w	r5, r5, r3
  400cbe:	e7ef      	b.n	400ca0 <pio_handler_process+0x20>
  400cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cc4:	00400c55 	.word	0x00400c55
  400cc8:	00400c59 	.word	0x00400c59
  400ccc:	20401358 	.word	0x20401358

00400cd0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cd2:	210a      	movs	r1, #10
  400cd4:	4801      	ldr	r0, [pc, #4]	; (400cdc <PIOA_Handler+0xc>)
  400cd6:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <PIOA_Handler+0x10>)
  400cd8:	4798      	blx	r3
  400cda:	bd08      	pop	{r3, pc}
  400cdc:	400e0e00 	.word	0x400e0e00
  400ce0:	00400c81 	.word	0x00400c81

00400ce4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ce4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ce6:	210b      	movs	r1, #11
  400ce8:	4801      	ldr	r0, [pc, #4]	; (400cf0 <PIOB_Handler+0xc>)
  400cea:	4b02      	ldr	r3, [pc, #8]	; (400cf4 <PIOB_Handler+0x10>)
  400cec:	4798      	blx	r3
  400cee:	bd08      	pop	{r3, pc}
  400cf0:	400e1000 	.word	0x400e1000
  400cf4:	00400c81 	.word	0x00400c81

00400cf8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cf8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cfa:	210c      	movs	r1, #12
  400cfc:	4801      	ldr	r0, [pc, #4]	; (400d04 <PIOC_Handler+0xc>)
  400cfe:	4b02      	ldr	r3, [pc, #8]	; (400d08 <PIOC_Handler+0x10>)
  400d00:	4798      	blx	r3
  400d02:	bd08      	pop	{r3, pc}
  400d04:	400e1200 	.word	0x400e1200
  400d08:	00400c81 	.word	0x00400c81

00400d0c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d0e:	2110      	movs	r1, #16
  400d10:	4801      	ldr	r0, [pc, #4]	; (400d18 <PIOD_Handler+0xc>)
  400d12:	4b02      	ldr	r3, [pc, #8]	; (400d1c <PIOD_Handler+0x10>)
  400d14:	4798      	blx	r3
  400d16:	bd08      	pop	{r3, pc}
  400d18:	400e1400 	.word	0x400e1400
  400d1c:	00400c81 	.word	0x00400c81

00400d20 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d20:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d22:	2111      	movs	r1, #17
  400d24:	4801      	ldr	r0, [pc, #4]	; (400d2c <PIOE_Handler+0xc>)
  400d26:	4b02      	ldr	r3, [pc, #8]	; (400d30 <PIOE_Handler+0x10>)
  400d28:	4798      	blx	r3
  400d2a:	bd08      	pop	{r3, pc}
  400d2c:	400e1600 	.word	0x400e1600
  400d30:	00400c81 	.word	0x00400c81

00400d34 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d34:	2803      	cmp	r0, #3
  400d36:	d011      	beq.n	400d5c <pmc_mck_set_division+0x28>
  400d38:	2804      	cmp	r0, #4
  400d3a:	d012      	beq.n	400d62 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d3c:	2802      	cmp	r0, #2
  400d3e:	bf0c      	ite	eq
  400d40:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d44:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d46:	4a08      	ldr	r2, [pc, #32]	; (400d68 <pmc_mck_set_division+0x34>)
  400d48:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d4e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d50:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d52:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d54:	f013 0f08 	tst.w	r3, #8
  400d58:	d0fb      	beq.n	400d52 <pmc_mck_set_division+0x1e>
}
  400d5a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d5c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d60:	e7f1      	b.n	400d46 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d62:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d66:	e7ee      	b.n	400d46 <pmc_mck_set_division+0x12>
  400d68:	400e0600 	.word	0x400e0600

00400d6c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d6c:	4a17      	ldr	r2, [pc, #92]	; (400dcc <pmc_switch_mck_to_pllack+0x60>)
  400d6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d74:	4318      	orrs	r0, r3
  400d76:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d7a:	f013 0f08 	tst.w	r3, #8
  400d7e:	d10a      	bne.n	400d96 <pmc_switch_mck_to_pllack+0x2a>
  400d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d84:	4911      	ldr	r1, [pc, #68]	; (400dcc <pmc_switch_mck_to_pllack+0x60>)
  400d86:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d88:	f012 0f08 	tst.w	r2, #8
  400d8c:	d103      	bne.n	400d96 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d8e:	3b01      	subs	r3, #1
  400d90:	d1f9      	bne.n	400d86 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d92:	2001      	movs	r0, #1
  400d94:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d96:	4a0d      	ldr	r2, [pc, #52]	; (400dcc <pmc_switch_mck_to_pllack+0x60>)
  400d98:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d9a:	f023 0303 	bic.w	r3, r3, #3
  400d9e:	f043 0302 	orr.w	r3, r3, #2
  400da2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400da4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400da6:	f013 0f08 	tst.w	r3, #8
  400daa:	d10a      	bne.n	400dc2 <pmc_switch_mck_to_pllack+0x56>
  400dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400db0:	4906      	ldr	r1, [pc, #24]	; (400dcc <pmc_switch_mck_to_pllack+0x60>)
  400db2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400db4:	f012 0f08 	tst.w	r2, #8
  400db8:	d105      	bne.n	400dc6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dba:	3b01      	subs	r3, #1
  400dbc:	d1f9      	bne.n	400db2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400dbe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dc0:	4770      	bx	lr
	return 0;
  400dc2:	2000      	movs	r0, #0
  400dc4:	4770      	bx	lr
  400dc6:	2000      	movs	r0, #0
  400dc8:	4770      	bx	lr
  400dca:	bf00      	nop
  400dcc:	400e0600 	.word	0x400e0600

00400dd0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dd0:	b9a0      	cbnz	r0, 400dfc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dd2:	480e      	ldr	r0, [pc, #56]	; (400e0c <pmc_switch_mainck_to_xtal+0x3c>)
  400dd4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dd6:	0209      	lsls	r1, r1, #8
  400dd8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dda:	4a0d      	ldr	r2, [pc, #52]	; (400e10 <pmc_switch_mainck_to_xtal+0x40>)
  400ddc:	401a      	ands	r2, r3
  400dde:	4b0d      	ldr	r3, [pc, #52]	; (400e14 <pmc_switch_mainck_to_xtal+0x44>)
  400de0:	4313      	orrs	r3, r2
  400de2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400de4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400de6:	4602      	mov	r2, r0
  400de8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dea:	f013 0f01 	tst.w	r3, #1
  400dee:	d0fb      	beq.n	400de8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400df0:	4a06      	ldr	r2, [pc, #24]	; (400e0c <pmc_switch_mainck_to_xtal+0x3c>)
  400df2:	6a11      	ldr	r1, [r2, #32]
  400df4:	4b08      	ldr	r3, [pc, #32]	; (400e18 <pmc_switch_mainck_to_xtal+0x48>)
  400df6:	430b      	orrs	r3, r1
  400df8:	6213      	str	r3, [r2, #32]
  400dfa:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dfc:	4903      	ldr	r1, [pc, #12]	; (400e0c <pmc_switch_mainck_to_xtal+0x3c>)
  400dfe:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e00:	4a06      	ldr	r2, [pc, #24]	; (400e1c <pmc_switch_mainck_to_xtal+0x4c>)
  400e02:	401a      	ands	r2, r3
  400e04:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pmc_switch_mainck_to_xtal+0x50>)
  400e06:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e08:	620b      	str	r3, [r1, #32]
  400e0a:	4770      	bx	lr
  400e0c:	400e0600 	.word	0x400e0600
  400e10:	ffc8fffc 	.word	0xffc8fffc
  400e14:	00370001 	.word	0x00370001
  400e18:	01370000 	.word	0x01370000
  400e1c:	fec8fffc 	.word	0xfec8fffc
  400e20:	01370002 	.word	0x01370002

00400e24 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e24:	4b02      	ldr	r3, [pc, #8]	; (400e30 <pmc_osc_is_ready_mainck+0xc>)
  400e26:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e28:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	400e0600 	.word	0x400e0600

00400e34 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e38:	4b01      	ldr	r3, [pc, #4]	; (400e40 <pmc_disable_pllack+0xc>)
  400e3a:	629a      	str	r2, [r3, #40]	; 0x28
  400e3c:	4770      	bx	lr
  400e3e:	bf00      	nop
  400e40:	400e0600 	.word	0x400e0600

00400e44 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e44:	4b02      	ldr	r3, [pc, #8]	; (400e50 <pmc_is_locked_pllack+0xc>)
  400e46:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e48:	f000 0002 	and.w	r0, r0, #2
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop
  400e50:	400e0600 	.word	0x400e0600

00400e54 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  400e54:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  400e58:	4b03      	ldr	r3, [pc, #12]	; (400e68 <pmc_enable_upll_clock+0x14>)
  400e5a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  400e5c:	461a      	mov	r2, r3
  400e5e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e60:	f013 0f40 	tst.w	r3, #64	; 0x40
  400e64:	d0fb      	beq.n	400e5e <pmc_enable_upll_clock+0xa>
}
  400e66:	4770      	bx	lr
  400e68:	400e0600 	.word	0x400e0600

00400e6c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400e6c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400e70:	4b05      	ldr	r3, [pc, #20]	; (400e88 <pmc_enable_periph_clk+0x1c>)
  400e72:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400e76:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400e7a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400e7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e82:	2000      	movs	r0, #0
  400e84:	4770      	bx	lr
  400e86:	bf00      	nop
  400e88:	400e0600 	.word	0x400e0600

00400e8c <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  400e8c:	f041 0102 	orr.w	r1, r1, #2
  400e90:	4b0c      	ldr	r3, [pc, #48]	; (400ec4 <pmc_switch_pck_to_pllack+0x38>)
  400e92:	f100 0210 	add.w	r2, r0, #16
  400e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400e9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ea0:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400ea4:	4202      	tst	r2, r0
  400ea6:	d109      	bne.n	400ebc <pmc_switch_pck_to_pllack+0x30>
  400ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400eac:	4905      	ldr	r1, [pc, #20]	; (400ec4 <pmc_switch_pck_to_pllack+0x38>)
  400eae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400eb0:	4202      	tst	r2, r0
  400eb2:	d105      	bne.n	400ec0 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  400eb4:	3b01      	subs	r3, #1
  400eb6:	d1fa      	bne.n	400eae <pmc_switch_pck_to_pllack+0x22>
			return 1;
  400eb8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400eba:	4770      	bx	lr
	return 0;
  400ebc:	2000      	movs	r0, #0
  400ebe:	4770      	bx	lr
  400ec0:	2000      	movs	r0, #0
  400ec2:	4770      	bx	lr
  400ec4:	400e0600 	.word	0x400e0600

00400ec8 <pmc_get_slck_config>:
 *
 * \retval Crystal Oscillator Select value.
 */
uint32_t pmc_get_slck_config(void)
{
	return (SUPC->SUPC_CR & SUPC_CR_XTALSEL);
  400ec8:	4b02      	ldr	r3, [pc, #8]	; (400ed4 <pmc_get_slck_config+0xc>)
  400eca:	6818      	ldr	r0, [r3, #0]
}
  400ecc:	f000 0008 	and.w	r0, r0, #8
  400ed0:	4770      	bx	lr
  400ed2:	bf00      	nop
  400ed4:	400e1810 	.word	0x400e1810

00400ed8 <pmc_get_mainck_config>:
 *
 * \retval Main Clock Source Oscillator Selection and Main RC Oscillator Frequency Selection values.
 */
uint32_t pmc_get_mainck_config(void)
{
	return (PMC->CKGR_MOR & (CKGR_MOR_MOSCSEL | CKGR_MOR_MOSCRCF_Msk));
  400ed8:	4b05      	ldr	r3, [pc, #20]	; (400ef0 <pmc_get_mainck_config+0x18>)
  400eda:	6a18      	ldr	r0, [r3, #32]
}
  400edc:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
  400ee0:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
  400ee4:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  400ee8:	f020 008f 	bic.w	r0, r0, #143	; 0x8f
  400eec:	4770      	bx	lr
  400eee:	bf00      	nop
  400ef0:	400e0600 	.word	0x400e0600

00400ef4 <pmc_get_pllack_config>:
 *
 * \retval PLLA Multiplier and PLLA Front End Divider values.
 */
uint32_t pmc_get_pllack_config(void)
{
	return (PMC->CKGR_PLLAR & (CKGR_PLLAR_DIVA_Msk | CKGR_PLLAR_MULA_Msk));
  400ef4:	4b02      	ldr	r3, [pc, #8]	; (400f00 <pmc_get_pllack_config+0xc>)
  400ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
  400ef8:	4802      	ldr	r0, [pc, #8]	; (400f04 <pmc_get_pllack_config+0x10>)
  400efa:	4018      	ands	r0, r3
  400efc:	4770      	bx	lr
  400efe:	bf00      	nop
  400f00:	400e0600 	.word	0x400e0600
  400f04:	07ff00ff 	.word	0x07ff00ff

00400f08 <pmc_get_upllckdiv_config>:
 *
 * \retval UPLL Divider by 2 value.
 */
uint32_t pmc_get_upllckdiv_config(void)
{
	return (PMC->PMC_MCKR & PMC_MCKR_UPLLDIV2);
  400f08:	4b02      	ldr	r3, [pc, #8]	; (400f14 <pmc_get_upllckdiv_config+0xc>)
  400f0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
  400f0c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  400f10:	4770      	bx	lr
  400f12:	bf00      	nop
  400f14:	400e0600 	.word	0x400e0600

00400f18 <pmc_switch_pck_to_upllck>:
 */
uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
  400f18:	f041 0103 	orr.w	r1, r1, #3
  400f1c:	4b0c      	ldr	r3, [pc, #48]	; (400f50 <pmc_switch_pck_to_upllck+0x38>)
  400f1e:	f100 0210 	add.w	r2, r0, #16
  400f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  400f26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400f28:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f2c:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  400f30:	4202      	tst	r2, r0
  400f32:	d109      	bne.n	400f48 <pmc_switch_pck_to_upllck+0x30>
  400f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  400f38:	4905      	ldr	r1, [pc, #20]	; (400f50 <pmc_switch_pck_to_upllck+0x38>)
  400f3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  400f3c:	4202      	tst	r2, r0
  400f3e:	d105      	bne.n	400f4c <pmc_switch_pck_to_upllck+0x34>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f40:	3b01      	subs	r3, #1
  400f42:	d1fa      	bne.n	400f3a <pmc_switch_pck_to_upllck+0x22>
			return 1;
  400f44:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f46:	4770      	bx	lr
	return 0;
  400f48:	2000      	movs	r0, #0
  400f4a:	4770      	bx	lr
  400f4c:	2000      	movs	r0, #0
  400f4e:	4770      	bx	lr
  400f50:	400e0600 	.word	0x400e0600

00400f54 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400f54:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f58:	fa03 f000 	lsl.w	r0, r3, r0
  400f5c:	4b01      	ldr	r3, [pc, #4]	; (400f64 <pmc_enable_pck+0x10>)
  400f5e:	6018      	str	r0, [r3, #0]
  400f60:	4770      	bx	lr
  400f62:	bf00      	nop
  400f64:	400e0600 	.word	0x400e0600

00400f68 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  400f68:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f6c:	fa03 f000 	lsl.w	r0, r3, r0
  400f70:	4b01      	ldr	r3, [pc, #4]	; (400f78 <pmc_disable_pck+0x10>)
  400f72:	6058      	str	r0, [r3, #4]
  400f74:	4770      	bx	lr
  400f76:	bf00      	nop
  400f78:	400e0600 	.word	0x400e0600

00400f7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f7c:	e7fe      	b.n	400f7c <Dummy_Handler>
	...

00400f80 <Reset_Handler>:
{
  400f80:	b500      	push	{lr}
  400f82:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400f84:	4b25      	ldr	r3, [pc, #148]	; (40101c <Reset_Handler+0x9c>)
  400f86:	4a26      	ldr	r2, [pc, #152]	; (401020 <Reset_Handler+0xa0>)
  400f88:	429a      	cmp	r2, r3
  400f8a:	d010      	beq.n	400fae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400f8c:	4b25      	ldr	r3, [pc, #148]	; (401024 <Reset_Handler+0xa4>)
  400f8e:	4a23      	ldr	r2, [pc, #140]	; (40101c <Reset_Handler+0x9c>)
  400f90:	429a      	cmp	r2, r3
  400f92:	d20c      	bcs.n	400fae <Reset_Handler+0x2e>
  400f94:	3b01      	subs	r3, #1
  400f96:	1a9b      	subs	r3, r3, r2
  400f98:	f023 0303 	bic.w	r3, r3, #3
  400f9c:	3304      	adds	r3, #4
  400f9e:	4413      	add	r3, r2
  400fa0:	491f      	ldr	r1, [pc, #124]	; (401020 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400fa2:	f851 0b04 	ldr.w	r0, [r1], #4
  400fa6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400faa:	429a      	cmp	r2, r3
  400fac:	d1f9      	bne.n	400fa2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400fae:	4b1e      	ldr	r3, [pc, #120]	; (401028 <Reset_Handler+0xa8>)
  400fb0:	4a1e      	ldr	r2, [pc, #120]	; (40102c <Reset_Handler+0xac>)
  400fb2:	429a      	cmp	r2, r3
  400fb4:	d20a      	bcs.n	400fcc <Reset_Handler+0x4c>
  400fb6:	3b01      	subs	r3, #1
  400fb8:	1a9b      	subs	r3, r3, r2
  400fba:	f023 0303 	bic.w	r3, r3, #3
  400fbe:	3304      	adds	r3, #4
  400fc0:	4413      	add	r3, r2
                *pDest++ = 0;
  400fc2:	2100      	movs	r1, #0
  400fc4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400fc8:	4293      	cmp	r3, r2
  400fca:	d1fb      	bne.n	400fc4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400fcc:	4a18      	ldr	r2, [pc, #96]	; (401030 <Reset_Handler+0xb0>)
  400fce:	4b19      	ldr	r3, [pc, #100]	; (401034 <Reset_Handler+0xb4>)
  400fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400fd4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400fd6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400fda:	fab3 f383 	clz	r3, r3
  400fde:	095b      	lsrs	r3, r3, #5
  400fe0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400fe2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400fe4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400fe8:	2200      	movs	r2, #0
  400fea:	4b13      	ldr	r3, [pc, #76]	; (401038 <Reset_Handler+0xb8>)
  400fec:	701a      	strb	r2, [r3, #0]
	return flags;
  400fee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ff0:	4a12      	ldr	r2, [pc, #72]	; (40103c <Reset_Handler+0xbc>)
  400ff2:	6813      	ldr	r3, [r2, #0]
  400ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ff8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400ffa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ffe:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401002:	b129      	cbz	r1, 401010 <Reset_Handler+0x90>
		cpu_irq_enable();
  401004:	2201      	movs	r2, #1
  401006:	4b0c      	ldr	r3, [pc, #48]	; (401038 <Reset_Handler+0xb8>)
  401008:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40100a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40100e:	b662      	cpsie	i
        __libc_init_array();
  401010:	4b0b      	ldr	r3, [pc, #44]	; (401040 <Reset_Handler+0xc0>)
  401012:	4798      	blx	r3
        main();
  401014:	4b0b      	ldr	r3, [pc, #44]	; (401044 <Reset_Handler+0xc4>)
  401016:	4798      	blx	r3
  401018:	e7fe      	b.n	401018 <Reset_Handler+0x98>
  40101a:	bf00      	nop
  40101c:	20400000 	.word	0x20400000
  401020:	00404ca8 	.word	0x00404ca8
  401024:	204009b8 	.word	0x204009b8
  401028:	2040148c 	.word	0x2040148c
  40102c:	204009b8 	.word	0x204009b8
  401030:	e000ed00 	.word	0xe000ed00
  401034:	00400000 	.word	0x00400000
  401038:	20400000 	.word	0x20400000
  40103c:	e000ed88 	.word	0xe000ed88
  401040:	00401a89 	.word	0x00401a89
  401044:	00401485 	.word	0x00401485

00401048 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401048:	4b3b      	ldr	r3, [pc, #236]	; (401138 <SystemCoreClockUpdate+0xf0>)
  40104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40104c:	f003 0303 	and.w	r3, r3, #3
  401050:	2b01      	cmp	r3, #1
  401052:	d01d      	beq.n	401090 <SystemCoreClockUpdate+0x48>
  401054:	b183      	cbz	r3, 401078 <SystemCoreClockUpdate+0x30>
  401056:	2b02      	cmp	r3, #2
  401058:	d036      	beq.n	4010c8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40105a:	4b37      	ldr	r3, [pc, #220]	; (401138 <SystemCoreClockUpdate+0xf0>)
  40105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40105e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401062:	2b70      	cmp	r3, #112	; 0x70
  401064:	d05f      	beq.n	401126 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401066:	4b34      	ldr	r3, [pc, #208]	; (401138 <SystemCoreClockUpdate+0xf0>)
  401068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40106a:	4934      	ldr	r1, [pc, #208]	; (40113c <SystemCoreClockUpdate+0xf4>)
  40106c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401070:	680b      	ldr	r3, [r1, #0]
  401072:	40d3      	lsrs	r3, r2
  401074:	600b      	str	r3, [r1, #0]
  401076:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401078:	4b31      	ldr	r3, [pc, #196]	; (401140 <SystemCoreClockUpdate+0xf8>)
  40107a:	695b      	ldr	r3, [r3, #20]
  40107c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401080:	bf14      	ite	ne
  401082:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401086:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40108a:	4b2c      	ldr	r3, [pc, #176]	; (40113c <SystemCoreClockUpdate+0xf4>)
  40108c:	601a      	str	r2, [r3, #0]
  40108e:	e7e4      	b.n	40105a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401090:	4b29      	ldr	r3, [pc, #164]	; (401138 <SystemCoreClockUpdate+0xf0>)
  401092:	6a1b      	ldr	r3, [r3, #32]
  401094:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401098:	d003      	beq.n	4010a2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40109a:	4a2a      	ldr	r2, [pc, #168]	; (401144 <SystemCoreClockUpdate+0xfc>)
  40109c:	4b27      	ldr	r3, [pc, #156]	; (40113c <SystemCoreClockUpdate+0xf4>)
  40109e:	601a      	str	r2, [r3, #0]
  4010a0:	e7db      	b.n	40105a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010a2:	4a29      	ldr	r2, [pc, #164]	; (401148 <SystemCoreClockUpdate+0x100>)
  4010a4:	4b25      	ldr	r3, [pc, #148]	; (40113c <SystemCoreClockUpdate+0xf4>)
  4010a6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4010a8:	4b23      	ldr	r3, [pc, #140]	; (401138 <SystemCoreClockUpdate+0xf0>)
  4010aa:	6a1b      	ldr	r3, [r3, #32]
  4010ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010b0:	2b10      	cmp	r3, #16
  4010b2:	d005      	beq.n	4010c0 <SystemCoreClockUpdate+0x78>
  4010b4:	2b20      	cmp	r3, #32
  4010b6:	d1d0      	bne.n	40105a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4010b8:	4a22      	ldr	r2, [pc, #136]	; (401144 <SystemCoreClockUpdate+0xfc>)
  4010ba:	4b20      	ldr	r3, [pc, #128]	; (40113c <SystemCoreClockUpdate+0xf4>)
  4010bc:	601a      	str	r2, [r3, #0]
          break;
  4010be:	e7cc      	b.n	40105a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4010c0:	4a22      	ldr	r2, [pc, #136]	; (40114c <SystemCoreClockUpdate+0x104>)
  4010c2:	4b1e      	ldr	r3, [pc, #120]	; (40113c <SystemCoreClockUpdate+0xf4>)
  4010c4:	601a      	str	r2, [r3, #0]
          break;
  4010c6:	e7c8      	b.n	40105a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4010c8:	4b1b      	ldr	r3, [pc, #108]	; (401138 <SystemCoreClockUpdate+0xf0>)
  4010ca:	6a1b      	ldr	r3, [r3, #32]
  4010cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010d0:	d016      	beq.n	401100 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4010d2:	4a1c      	ldr	r2, [pc, #112]	; (401144 <SystemCoreClockUpdate+0xfc>)
  4010d4:	4b19      	ldr	r3, [pc, #100]	; (40113c <SystemCoreClockUpdate+0xf4>)
  4010d6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4010d8:	4b17      	ldr	r3, [pc, #92]	; (401138 <SystemCoreClockUpdate+0xf0>)
  4010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010dc:	f003 0303 	and.w	r3, r3, #3
  4010e0:	2b02      	cmp	r3, #2
  4010e2:	d1ba      	bne.n	40105a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010e4:	4a14      	ldr	r2, [pc, #80]	; (401138 <SystemCoreClockUpdate+0xf0>)
  4010e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4010ea:	4814      	ldr	r0, [pc, #80]	; (40113c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4010f0:	6803      	ldr	r3, [r0, #0]
  4010f2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010f6:	b2d2      	uxtb	r2, r2
  4010f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4010fc:	6003      	str	r3, [r0, #0]
  4010fe:	e7ac      	b.n	40105a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401100:	4a11      	ldr	r2, [pc, #68]	; (401148 <SystemCoreClockUpdate+0x100>)
  401102:	4b0e      	ldr	r3, [pc, #56]	; (40113c <SystemCoreClockUpdate+0xf4>)
  401104:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401106:	4b0c      	ldr	r3, [pc, #48]	; (401138 <SystemCoreClockUpdate+0xf0>)
  401108:	6a1b      	ldr	r3, [r3, #32]
  40110a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40110e:	2b10      	cmp	r3, #16
  401110:	d005      	beq.n	40111e <SystemCoreClockUpdate+0xd6>
  401112:	2b20      	cmp	r3, #32
  401114:	d1e0      	bne.n	4010d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401116:	4a0b      	ldr	r2, [pc, #44]	; (401144 <SystemCoreClockUpdate+0xfc>)
  401118:	4b08      	ldr	r3, [pc, #32]	; (40113c <SystemCoreClockUpdate+0xf4>)
  40111a:	601a      	str	r2, [r3, #0]
          break;
  40111c:	e7dc      	b.n	4010d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40111e:	4a0b      	ldr	r2, [pc, #44]	; (40114c <SystemCoreClockUpdate+0x104>)
  401120:	4b06      	ldr	r3, [pc, #24]	; (40113c <SystemCoreClockUpdate+0xf4>)
  401122:	601a      	str	r2, [r3, #0]
          break;
  401124:	e7d8      	b.n	4010d8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401126:	4a05      	ldr	r2, [pc, #20]	; (40113c <SystemCoreClockUpdate+0xf4>)
  401128:	6813      	ldr	r3, [r2, #0]
  40112a:	4909      	ldr	r1, [pc, #36]	; (401150 <SystemCoreClockUpdate+0x108>)
  40112c:	fba1 1303 	umull	r1, r3, r1, r3
  401130:	085b      	lsrs	r3, r3, #1
  401132:	6013      	str	r3, [r2, #0]
  401134:	4770      	bx	lr
  401136:	bf00      	nop
  401138:	400e0600 	.word	0x400e0600
  40113c:	20400004 	.word	0x20400004
  401140:	400e1810 	.word	0x400e1810
  401144:	00b71b00 	.word	0x00b71b00
  401148:	003d0900 	.word	0x003d0900
  40114c:	007a1200 	.word	0x007a1200
  401150:	aaaaaaab 	.word	0xaaaaaaab

00401154 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401154:	4b16      	ldr	r3, [pc, #88]	; (4011b0 <system_init_flash+0x5c>)
  401156:	4298      	cmp	r0, r3
  401158:	d913      	bls.n	401182 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40115a:	4b16      	ldr	r3, [pc, #88]	; (4011b4 <system_init_flash+0x60>)
  40115c:	4298      	cmp	r0, r3
  40115e:	d915      	bls.n	40118c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401160:	4b15      	ldr	r3, [pc, #84]	; (4011b8 <system_init_flash+0x64>)
  401162:	4298      	cmp	r0, r3
  401164:	d916      	bls.n	401194 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401166:	4b15      	ldr	r3, [pc, #84]	; (4011bc <system_init_flash+0x68>)
  401168:	4298      	cmp	r0, r3
  40116a:	d917      	bls.n	40119c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40116c:	4b14      	ldr	r3, [pc, #80]	; (4011c0 <system_init_flash+0x6c>)
  40116e:	4298      	cmp	r0, r3
  401170:	d918      	bls.n	4011a4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401172:	4b14      	ldr	r3, [pc, #80]	; (4011c4 <system_init_flash+0x70>)
  401174:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401176:	bf94      	ite	ls
  401178:	4a13      	ldrls	r2, [pc, #76]	; (4011c8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40117a:	4a14      	ldrhi	r2, [pc, #80]	; (4011cc <system_init_flash+0x78>)
  40117c:	4b14      	ldr	r3, [pc, #80]	; (4011d0 <system_init_flash+0x7c>)
  40117e:	601a      	str	r2, [r3, #0]
  401180:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401182:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401186:	4b12      	ldr	r3, [pc, #72]	; (4011d0 <system_init_flash+0x7c>)
  401188:	601a      	str	r2, [r3, #0]
  40118a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40118c:	4a11      	ldr	r2, [pc, #68]	; (4011d4 <system_init_flash+0x80>)
  40118e:	4b10      	ldr	r3, [pc, #64]	; (4011d0 <system_init_flash+0x7c>)
  401190:	601a      	str	r2, [r3, #0]
  401192:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401194:	4a10      	ldr	r2, [pc, #64]	; (4011d8 <system_init_flash+0x84>)
  401196:	4b0e      	ldr	r3, [pc, #56]	; (4011d0 <system_init_flash+0x7c>)
  401198:	601a      	str	r2, [r3, #0]
  40119a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40119c:	4a0f      	ldr	r2, [pc, #60]	; (4011dc <system_init_flash+0x88>)
  40119e:	4b0c      	ldr	r3, [pc, #48]	; (4011d0 <system_init_flash+0x7c>)
  4011a0:	601a      	str	r2, [r3, #0]
  4011a2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4011a4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4011a8:	4b09      	ldr	r3, [pc, #36]	; (4011d0 <system_init_flash+0x7c>)
  4011aa:	601a      	str	r2, [r3, #0]
  4011ac:	4770      	bx	lr
  4011ae:	bf00      	nop
  4011b0:	015ef3bf 	.word	0x015ef3bf
  4011b4:	02bde77f 	.word	0x02bde77f
  4011b8:	041cdb3f 	.word	0x041cdb3f
  4011bc:	057bceff 	.word	0x057bceff
  4011c0:	06dac2bf 	.word	0x06dac2bf
  4011c4:	0839b67f 	.word	0x0839b67f
  4011c8:	04000500 	.word	0x04000500
  4011cc:	04000600 	.word	0x04000600
  4011d0:	400e0c00 	.word	0x400e0c00
  4011d4:	04000100 	.word	0x04000100
  4011d8:	04000200 	.word	0x04000200
  4011dc:	04000300 	.word	0x04000300

004011e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4011e0:	4b0a      	ldr	r3, [pc, #40]	; (40120c <_sbrk+0x2c>)
  4011e2:	681b      	ldr	r3, [r3, #0]
  4011e4:	b153      	cbz	r3, 4011fc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4011e6:	4b09      	ldr	r3, [pc, #36]	; (40120c <_sbrk+0x2c>)
  4011e8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4011ea:	181a      	adds	r2, r3, r0
  4011ec:	4908      	ldr	r1, [pc, #32]	; (401210 <_sbrk+0x30>)
  4011ee:	4291      	cmp	r1, r2
  4011f0:	db08      	blt.n	401204 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011f2:	4610      	mov	r0, r2
  4011f4:	4a05      	ldr	r2, [pc, #20]	; (40120c <_sbrk+0x2c>)
  4011f6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4011f8:	4618      	mov	r0, r3
  4011fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4011fc:	4a05      	ldr	r2, [pc, #20]	; (401214 <_sbrk+0x34>)
  4011fe:	4b03      	ldr	r3, [pc, #12]	; (40120c <_sbrk+0x2c>)
  401200:	601a      	str	r2, [r3, #0]
  401202:	e7f0      	b.n	4011e6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401204:	f04f 30ff 	mov.w	r0, #4294967295
}
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	204013c8 	.word	0x204013c8
  401210:	2045fffc 	.word	0x2045fffc
  401214:	20403690 	.word	0x20403690

00401218 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401218:	f04f 30ff 	mov.w	r0, #4294967295
  40121c:	4770      	bx	lr

0040121e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401222:	604b      	str	r3, [r1, #4]

	return 0;
}
  401224:	2000      	movs	r0, #0
  401226:	4770      	bx	lr

00401228 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401228:	2001      	movs	r0, #1
  40122a:	4770      	bx	lr

0040122c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40122c:	2000      	movs	r0, #0
  40122e:	4770      	bx	lr

00401230 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401230:	b5f0      	push	{r4, r5, r6, r7, lr}
  401232:	b083      	sub	sp, #12
  401234:	4605      	mov	r5, r0
  401236:	460c      	mov	r4, r1
	uint32_t val = 0;
  401238:	2300      	movs	r3, #0
  40123a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40123c:	4b2a      	ldr	r3, [pc, #168]	; (4012e8 <usart_serial_getchar+0xb8>)
  40123e:	4298      	cmp	r0, r3
  401240:	d013      	beq.n	40126a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401242:	4b2a      	ldr	r3, [pc, #168]	; (4012ec <usart_serial_getchar+0xbc>)
  401244:	4298      	cmp	r0, r3
  401246:	d018      	beq.n	40127a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401248:	4b29      	ldr	r3, [pc, #164]	; (4012f0 <usart_serial_getchar+0xc0>)
  40124a:	4298      	cmp	r0, r3
  40124c:	d01d      	beq.n	40128a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40124e:	4b29      	ldr	r3, [pc, #164]	; (4012f4 <usart_serial_getchar+0xc4>)
  401250:	429d      	cmp	r5, r3
  401252:	d022      	beq.n	40129a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401254:	4b28      	ldr	r3, [pc, #160]	; (4012f8 <usart_serial_getchar+0xc8>)
  401256:	429d      	cmp	r5, r3
  401258:	d027      	beq.n	4012aa <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40125a:	4b28      	ldr	r3, [pc, #160]	; (4012fc <usart_serial_getchar+0xcc>)
  40125c:	429d      	cmp	r5, r3
  40125e:	d02e      	beq.n	4012be <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401260:	4b27      	ldr	r3, [pc, #156]	; (401300 <usart_serial_getchar+0xd0>)
  401262:	429d      	cmp	r5, r3
  401264:	d035      	beq.n	4012d2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401266:	b003      	add	sp, #12
  401268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40126a:	461f      	mov	r7, r3
  40126c:	4e25      	ldr	r6, [pc, #148]	; (401304 <usart_serial_getchar+0xd4>)
  40126e:	4621      	mov	r1, r4
  401270:	4638      	mov	r0, r7
  401272:	47b0      	blx	r6
  401274:	2800      	cmp	r0, #0
  401276:	d1fa      	bne.n	40126e <usart_serial_getchar+0x3e>
  401278:	e7e9      	b.n	40124e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40127a:	461f      	mov	r7, r3
  40127c:	4e21      	ldr	r6, [pc, #132]	; (401304 <usart_serial_getchar+0xd4>)
  40127e:	4621      	mov	r1, r4
  401280:	4638      	mov	r0, r7
  401282:	47b0      	blx	r6
  401284:	2800      	cmp	r0, #0
  401286:	d1fa      	bne.n	40127e <usart_serial_getchar+0x4e>
  401288:	e7e4      	b.n	401254 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40128a:	461f      	mov	r7, r3
  40128c:	4e1d      	ldr	r6, [pc, #116]	; (401304 <usart_serial_getchar+0xd4>)
  40128e:	4621      	mov	r1, r4
  401290:	4638      	mov	r0, r7
  401292:	47b0      	blx	r6
  401294:	2800      	cmp	r0, #0
  401296:	d1fa      	bne.n	40128e <usart_serial_getchar+0x5e>
  401298:	e7df      	b.n	40125a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40129a:	461f      	mov	r7, r3
  40129c:	4e19      	ldr	r6, [pc, #100]	; (401304 <usart_serial_getchar+0xd4>)
  40129e:	4621      	mov	r1, r4
  4012a0:	4638      	mov	r0, r7
  4012a2:	47b0      	blx	r6
  4012a4:	2800      	cmp	r0, #0
  4012a6:	d1fa      	bne.n	40129e <usart_serial_getchar+0x6e>
  4012a8:	e7da      	b.n	401260 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4012aa:	461e      	mov	r6, r3
  4012ac:	4d16      	ldr	r5, [pc, #88]	; (401308 <usart_serial_getchar+0xd8>)
  4012ae:	a901      	add	r1, sp, #4
  4012b0:	4630      	mov	r0, r6
  4012b2:	47a8      	blx	r5
  4012b4:	2800      	cmp	r0, #0
  4012b6:	d1fa      	bne.n	4012ae <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4012b8:	9b01      	ldr	r3, [sp, #4]
  4012ba:	7023      	strb	r3, [r4, #0]
  4012bc:	e7d3      	b.n	401266 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4012be:	461e      	mov	r6, r3
  4012c0:	4d11      	ldr	r5, [pc, #68]	; (401308 <usart_serial_getchar+0xd8>)
  4012c2:	a901      	add	r1, sp, #4
  4012c4:	4630      	mov	r0, r6
  4012c6:	47a8      	blx	r5
  4012c8:	2800      	cmp	r0, #0
  4012ca:	d1fa      	bne.n	4012c2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4012cc:	9b01      	ldr	r3, [sp, #4]
  4012ce:	7023      	strb	r3, [r4, #0]
  4012d0:	e7c9      	b.n	401266 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4012d2:	461e      	mov	r6, r3
  4012d4:	4d0c      	ldr	r5, [pc, #48]	; (401308 <usart_serial_getchar+0xd8>)
  4012d6:	a901      	add	r1, sp, #4
  4012d8:	4630      	mov	r0, r6
  4012da:	47a8      	blx	r5
  4012dc:	2800      	cmp	r0, #0
  4012de:	d1fa      	bne.n	4012d6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4012e0:	9b01      	ldr	r3, [sp, #4]
  4012e2:	7023      	strb	r3, [r4, #0]
}
  4012e4:	e7bf      	b.n	401266 <usart_serial_getchar+0x36>
  4012e6:	bf00      	nop
  4012e8:	400e0800 	.word	0x400e0800
  4012ec:	400e0a00 	.word	0x400e0a00
  4012f0:	400e1a00 	.word	0x400e1a00
  4012f4:	400e1c00 	.word	0x400e1c00
  4012f8:	40024000 	.word	0x40024000
  4012fc:	40028000 	.word	0x40028000
  401300:	4002c000 	.word	0x4002c000
  401304:	00400971 	.word	0x00400971
  401308:	0040030b 	.word	0x0040030b

0040130c <usart_serial_putchar>:
{
  40130c:	b570      	push	{r4, r5, r6, lr}
  40130e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401310:	4b2a      	ldr	r3, [pc, #168]	; (4013bc <usart_serial_putchar+0xb0>)
  401312:	4298      	cmp	r0, r3
  401314:	d013      	beq.n	40133e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401316:	4b2a      	ldr	r3, [pc, #168]	; (4013c0 <usart_serial_putchar+0xb4>)
  401318:	4298      	cmp	r0, r3
  40131a:	d019      	beq.n	401350 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40131c:	4b29      	ldr	r3, [pc, #164]	; (4013c4 <usart_serial_putchar+0xb8>)
  40131e:	4298      	cmp	r0, r3
  401320:	d01f      	beq.n	401362 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  401322:	4b29      	ldr	r3, [pc, #164]	; (4013c8 <usart_serial_putchar+0xbc>)
  401324:	4298      	cmp	r0, r3
  401326:	d025      	beq.n	401374 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401328:	4b28      	ldr	r3, [pc, #160]	; (4013cc <usart_serial_putchar+0xc0>)
  40132a:	4298      	cmp	r0, r3
  40132c:	d02b      	beq.n	401386 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40132e:	4b28      	ldr	r3, [pc, #160]	; (4013d0 <usart_serial_putchar+0xc4>)
  401330:	4298      	cmp	r0, r3
  401332:	d031      	beq.n	401398 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401334:	4b27      	ldr	r3, [pc, #156]	; (4013d4 <usart_serial_putchar+0xc8>)
  401336:	4298      	cmp	r0, r3
  401338:	d037      	beq.n	4013aa <usart_serial_putchar+0x9e>
	return 0;
  40133a:	2000      	movs	r0, #0
}
  40133c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40133e:	461e      	mov	r6, r3
  401340:	4d25      	ldr	r5, [pc, #148]	; (4013d8 <usart_serial_putchar+0xcc>)
  401342:	4621      	mov	r1, r4
  401344:	4630      	mov	r0, r6
  401346:	47a8      	blx	r5
  401348:	2800      	cmp	r0, #0
  40134a:	d1fa      	bne.n	401342 <usart_serial_putchar+0x36>
		return 1;
  40134c:	2001      	movs	r0, #1
  40134e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401350:	461e      	mov	r6, r3
  401352:	4d21      	ldr	r5, [pc, #132]	; (4013d8 <usart_serial_putchar+0xcc>)
  401354:	4621      	mov	r1, r4
  401356:	4630      	mov	r0, r6
  401358:	47a8      	blx	r5
  40135a:	2800      	cmp	r0, #0
  40135c:	d1fa      	bne.n	401354 <usart_serial_putchar+0x48>
		return 1;
  40135e:	2001      	movs	r0, #1
  401360:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401362:	461e      	mov	r6, r3
  401364:	4d1c      	ldr	r5, [pc, #112]	; (4013d8 <usart_serial_putchar+0xcc>)
  401366:	4621      	mov	r1, r4
  401368:	4630      	mov	r0, r6
  40136a:	47a8      	blx	r5
  40136c:	2800      	cmp	r0, #0
  40136e:	d1fa      	bne.n	401366 <usart_serial_putchar+0x5a>
		return 1;
  401370:	2001      	movs	r0, #1
  401372:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401374:	461e      	mov	r6, r3
  401376:	4d18      	ldr	r5, [pc, #96]	; (4013d8 <usart_serial_putchar+0xcc>)
  401378:	4621      	mov	r1, r4
  40137a:	4630      	mov	r0, r6
  40137c:	47a8      	blx	r5
  40137e:	2800      	cmp	r0, #0
  401380:	d1fa      	bne.n	401378 <usart_serial_putchar+0x6c>
		return 1;
  401382:	2001      	movs	r0, #1
  401384:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401386:	461e      	mov	r6, r3
  401388:	4d14      	ldr	r5, [pc, #80]	; (4013dc <usart_serial_putchar+0xd0>)
  40138a:	4621      	mov	r1, r4
  40138c:	4630      	mov	r0, r6
  40138e:	47a8      	blx	r5
  401390:	2800      	cmp	r0, #0
  401392:	d1fa      	bne.n	40138a <usart_serial_putchar+0x7e>
		return 1;
  401394:	2001      	movs	r0, #1
  401396:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401398:	461e      	mov	r6, r3
  40139a:	4d10      	ldr	r5, [pc, #64]	; (4013dc <usart_serial_putchar+0xd0>)
  40139c:	4621      	mov	r1, r4
  40139e:	4630      	mov	r0, r6
  4013a0:	47a8      	blx	r5
  4013a2:	2800      	cmp	r0, #0
  4013a4:	d1fa      	bne.n	40139c <usart_serial_putchar+0x90>
		return 1;
  4013a6:	2001      	movs	r0, #1
  4013a8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4013aa:	461e      	mov	r6, r3
  4013ac:	4d0b      	ldr	r5, [pc, #44]	; (4013dc <usart_serial_putchar+0xd0>)
  4013ae:	4621      	mov	r1, r4
  4013b0:	4630      	mov	r0, r6
  4013b2:	47a8      	blx	r5
  4013b4:	2800      	cmp	r0, #0
  4013b6:	d1fa      	bne.n	4013ae <usart_serial_putchar+0xa2>
		return 1;
  4013b8:	2001      	movs	r0, #1
  4013ba:	bd70      	pop	{r4, r5, r6, pc}
  4013bc:	400e0800 	.word	0x400e0800
  4013c0:	400e0a00 	.word	0x400e0a00
  4013c4:	400e1a00 	.word	0x400e1a00
  4013c8:	400e1c00 	.word	0x400e1c00
  4013cc:	40024000 	.word	0x40024000
  4013d0:	40028000 	.word	0x40028000
  4013d4:	4002c000 	.word	0x4002c000
  4013d8:	0040095f 	.word	0x0040095f
  4013dc:	004002f5 	.word	0x004002f5

004013e0 <SetupPeripherals>:
        //delay_ms(500);
    }
}
//Initialize MCU Peripherals
void SetupPeripherals(void)
{
  4013e0:	b570      	push	{r4, r5, r6, lr}
  4013e2:	b082      	sub	sp, #8
    //Disable watchdog timer
    wdt_disable(WDT);
  4013e4:	481c      	ldr	r0, [pc, #112]	; (401458 <SetupPeripherals+0x78>)
  4013e6:	4b1d      	ldr	r3, [pc, #116]	; (40145c <SetupPeripherals+0x7c>)
  4013e8:	4798      	blx	r3
    //Set PA19 (blue LED) as an output
    pio_set_output(PIOA, PIO_PA19, PIO_TYPE_PIO_OUTPUT_0, PIO_DEFAULT, PIO_DEFAULT);
  4013ea:	4e1d      	ldr	r6, [pc, #116]	; (401460 <SetupPeripherals+0x80>)
  4013ec:	2400      	movs	r4, #0
  4013ee:	9400      	str	r4, [sp, #0]
  4013f0:	4623      	mov	r3, r4
  4013f2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  4013f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4013fa:	4630      	mov	r0, r6
  4013fc:	4d19      	ldr	r5, [pc, #100]	; (401464 <SetupPeripherals+0x84>)
  4013fe:	47a8      	blx	r5
    //Set PA20 (green LED) as an output
    pio_set_output(PIOA, PIO_PA20, PIO_TYPE_PIO_OUTPUT_0, PIO_DEFAULT, PIO_DEFAULT);
  401400:	9400      	str	r4, [sp, #0]
  401402:	4623      	mov	r3, r4
  401404:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  401408:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40140c:	4630      	mov	r0, r6
  40140e:	47a8      	blx	r5
  401410:	2017      	movs	r0, #23
  401412:	4b15      	ldr	r3, [pc, #84]	; (401468 <SetupPeripherals+0x88>)
  401414:	4798      	blx	r3
    //Enable Timer/Counter Clock
    sysclk_enable_peripheral_clock(ID_TC0); //Use TC0
    //Setup the Timer (note you will need the datasheet)
    tc_init(TC0, 0,                                 //Timer 0, Channel 0
  401416:	4d15      	ldr	r5, [pc, #84]	; (40146c <SetupPeripherals+0x8c>)
  401418:	f24c 0203 	movw	r2, #49155	; 0xc003
  40141c:	4621      	mov	r1, r4
  40141e:	4628      	mov	r0, r5
  401420:	4b13      	ldr	r3, [pc, #76]	; (401470 <SetupPeripherals+0x90>)
  401422:	4798      	blx	r3
    TC_CMR_TCCLKS_TIMER_CLOCK4 |     //Timer clock = internal MCK/128
    TC_CMR_WAVE |                    //Waveform generation mode
    TC_CMR_WAVSEL_UP_RC);            //Up count, clear on match RC
    //Set Compare match value
    tc_write_rc(TC0, 0, 46875);                        //Roughly 20Hz (120e6/128/46875)  
  401424:	f24b 721b 	movw	r2, #46875	; 0xb71b
  401428:	4621      	mov	r1, r4
  40142a:	4628      	mov	r0, r5
  40142c:	4b11      	ldr	r3, [pc, #68]	; (401474 <SetupPeripherals+0x94>)
  40142e:	4798      	blx	r3
    //Enable the Interrupt in the TC
    tc_enable_interrupt(TC0, 0, TC_IER_CPCS);          //Timer 0, Channel 0, Compare match C
  401430:	2210      	movs	r2, #16
  401432:	4621      	mov	r1, r4
  401434:	4628      	mov	r0, r5
  401436:	4b10      	ldr	r3, [pc, #64]	; (401478 <SetupPeripherals+0x98>)
  401438:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40143a:	4b10      	ldr	r3, [pc, #64]	; (40147c <SetupPeripherals+0x9c>)
  40143c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401440:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401444:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401448:	601a      	str	r2, [r3, #0]
    //Load NVIC Vectors (SAM4S Interrupt Controller)
    irq_initialize_vectors();                          //Technically not required for SAM4S
    //Configure TC Interrupt in NVIC
    irq_register_handler(TC0_IRQn, 0);
    //Start the timer
    tc_start(TC0, 0);
  40144a:	4621      	mov	r1, r4
  40144c:	4628      	mov	r0, r5
  40144e:	4b0c      	ldr	r3, [pc, #48]	; (401480 <SetupPeripherals+0xa0>)
  401450:	4798      	blx	r3
}
  401452:	b002      	add	sp, #8
  401454:	bd70      	pop	{r4, r5, r6, pc}
  401456:	bf00      	nop
  401458:	400e1850 	.word	0x400e1850
  40145c:	00400323 	.word	0x00400323
  401460:	400e0e00 	.word	0x400e0e00
  401464:	00400c2d 	.word	0x00400c2d
  401468:	00400e6d 	.word	0x00400e6d
  40146c:	4000c000 	.word	0x4000c000
  401470:	00400925 	.word	0x00400925
  401474:	00400947 	.word	0x00400947
  401478:	0040094f 	.word	0x0040094f
  40147c:	e000e100 	.word	0xe000e100
  401480:	0040093f 	.word	0x0040093f

00401484 <main>:
{
  401484:	b500      	push	{lr}
  401486:	b089      	sub	sp, #36	; 0x24
    sysclk_init();
  401488:	4b1f      	ldr	r3, [pc, #124]	; (401508 <main+0x84>)
  40148a:	4798      	blx	r3
	board_init();
  40148c:	4b1f      	ldr	r3, [pc, #124]	; (40150c <main+0x88>)
  40148e:	4798      	blx	r3
  401490:	200e      	movs	r0, #14
  401492:	4e1f      	ldr	r6, [pc, #124]	; (401510 <main+0x8c>)
  401494:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401496:	4d1f      	ldr	r5, [pc, #124]	; (401514 <main+0x90>)
  401498:	4b1f      	ldr	r3, [pc, #124]	; (401518 <main+0x94>)
  40149a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40149c:	4a1f      	ldr	r2, [pc, #124]	; (40151c <main+0x98>)
  40149e:	4b20      	ldr	r3, [pc, #128]	; (401520 <main+0x9c>)
  4014a0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4014a2:	4a20      	ldr	r2, [pc, #128]	; (401524 <main+0xa0>)
  4014a4:	4b20      	ldr	r3, [pc, #128]	; (401528 <main+0xa4>)
  4014a6:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4014a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4014ac:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  4014ae:	23c0      	movs	r3, #192	; 0xc0
  4014b0:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  4014b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4014b6:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  4014b8:	2400      	movs	r4, #0
  4014ba:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4014bc:	9406      	str	r4, [sp, #24]
  4014be:	200e      	movs	r0, #14
  4014c0:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4014c2:	4a1a      	ldr	r2, [pc, #104]	; (40152c <main+0xa8>)
  4014c4:	a902      	add	r1, sp, #8
  4014c6:	4628      	mov	r0, r5
  4014c8:	4b19      	ldr	r3, [pc, #100]	; (401530 <main+0xac>)
  4014ca:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4014cc:	4628      	mov	r0, r5
  4014ce:	4b19      	ldr	r3, [pc, #100]	; (401534 <main+0xb0>)
  4014d0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4014d2:	4628      	mov	r0, r5
  4014d4:	4b18      	ldr	r3, [pc, #96]	; (401538 <main+0xb4>)
  4014d6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4014d8:	4e18      	ldr	r6, [pc, #96]	; (40153c <main+0xb8>)
  4014da:	6833      	ldr	r3, [r6, #0]
  4014dc:	4621      	mov	r1, r4
  4014de:	6898      	ldr	r0, [r3, #8]
  4014e0:	4d17      	ldr	r5, [pc, #92]	; (401540 <main+0xbc>)
  4014e2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4014e4:	6833      	ldr	r3, [r6, #0]
  4014e6:	4621      	mov	r1, r4
  4014e8:	6858      	ldr	r0, [r3, #4]
  4014ea:	47a8      	blx	r5
    SetupPeripherals();    
  4014ec:	4b15      	ldr	r3, [pc, #84]	; (401544 <main+0xc0>)
  4014ee:	4798      	blx	r3
    pio_set_output(PIOA, PIO_PA23, PIO_TYPE_PIO_OUTPUT_0, PIO_DEFAULT, PIO_DEFAULT);
  4014f0:	9400      	str	r4, [sp, #0]
  4014f2:	4623      	mov	r3, r4
  4014f4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  4014f8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4014fc:	4812      	ldr	r0, [pc, #72]	; (401548 <main+0xc4>)
  4014fe:	4c13      	ldr	r4, [pc, #76]	; (40154c <main+0xc8>)
  401500:	47a0      	blx	r4
	init_can_module();
  401502:	4b13      	ldr	r3, [pc, #76]	; (401550 <main+0xcc>)
  401504:	4798      	blx	r3
  401506:	e7fe      	b.n	401506 <main+0x82>
  401508:	00400985 	.word	0x00400985
  40150c:	004009f5 	.word	0x004009f5
  401510:	00400e6d 	.word	0x00400e6d
  401514:	40028000 	.word	0x40028000
  401518:	20401460 	.word	0x20401460
  40151c:	0040130d 	.word	0x0040130d
  401520:	2040145c 	.word	0x2040145c
  401524:	00401231 	.word	0x00401231
  401528:	20401458 	.word	0x20401458
  40152c:	08f0d180 	.word	0x08f0d180
  401530:	00400295 	.word	0x00400295
  401534:	004002e9 	.word	0x004002e9
  401538:	004002ef 	.word	0x004002ef
  40153c:	20400008 	.word	0x20400008
  401540:	00401cd1 	.word	0x00401cd1
  401544:	004013e1 	.word	0x004013e1
  401548:	400e0e00 	.word	0x400e0e00
  40154c:	00400c2d 	.word	0x00400c2d
  401550:	004016bd 	.word	0x004016bd

00401554 <TC0_Handler>:
//Timer/Counter 0 ISR Handler
ISR(TC0_Handler)
{
  401554:	b510      	push	{r4, lr}
  401556:	b094      	sub	sp, #80	; 0x50
    //Read TC Status (required to reset this interrupt)
    uint32_t status = tc_get_status(TC0, 0);
  401558:	2100      	movs	r1, #0
  40155a:	4815      	ldr	r0, [pc, #84]	; (4015b0 <TC0_Handler+0x5c>)
  40155c:	4b15      	ldr	r3, [pc, #84]	; (4015b4 <TC0_Handler+0x60>)
  40155e:	4798      	blx	r3
    //If Compare Match, toggle LED
    if((status & TC_SR_CPCS) == TC_SR_CPCS)
  401560:	f010 0f10 	tst.w	r0, #16
  401564:	d005      	beq.n	401572 <TC0_Handler+0x1e>
    {
		interruptCounter++;
  401566:	4a14      	ldr	r2, [pc, #80]	; (4015b8 <TC0_Handler+0x64>)
  401568:	6813      	ldr	r3, [r2, #0]
  40156a:	3301      	adds	r3, #1
  40156c:	6013      	str	r3, [r2, #0]
		if(interruptCounter == 200) {
  40156e:	2bc8      	cmp	r3, #200	; 0xc8
  401570:	d001      	beq.n	401576 <TC0_Handler+0x22>
			interruptCounter = 0;			
			
		}
		
    }
}
  401572:	b014      	add	sp, #80	; 0x50
  401574:	bd10      	pop	{r4, pc}
			init_can_module();
  401576:	4b11      	ldr	r3, [pc, #68]	; (4015bc <TC0_Handler+0x68>)
  401578:	4798      	blx	r3
			test_struct.state = 69;
  40157a:	2345      	movs	r3, #69	; 0x45
  40157c:	f88d 3000 	strb.w	r3, [sp]
			serialize_data(&test_struct, sizeof(test_struct), buffer);
  401580:	ac04      	add	r4, sp, #16
  401582:	4622      	mov	r2, r4
  401584:	2101      	movs	r1, #1
  401586:	4668      	mov	r0, sp
  401588:	4b0d      	ldr	r3, [pc, #52]	; (4015c0 <TC0_Handler+0x6c>)
  40158a:	4798      	blx	r3
			customMsg.data = buffer;
  40158c:	9402      	str	r4, [sp, #8]
			customMsg.dataSize = sizeof(test_struct);
  40158e:	2301      	movs	r3, #1
  401590:	f88d 300c 	strb.w	r3, [sp, #12]
			customMsg.id = 0x15;
  401594:	a814      	add	r0, sp, #80	; 0x50
  401596:	2315      	movs	r3, #21
  401598:	f840 3d4c 	str.w	r3, [r0, #-76]!
			send_message_module_0(&customMsg);
  40159c:	4b09      	ldr	r3, [pc, #36]	; (4015c4 <TC0_Handler+0x70>)
  40159e:	4798      	blx	r3
			pio_toggle_pin(PIO_PA23_IDX);
  4015a0:	2017      	movs	r0, #23
  4015a2:	4b09      	ldr	r3, [pc, #36]	; (4015c8 <TC0_Handler+0x74>)
  4015a4:	4798      	blx	r3
			interruptCounter = 0;			
  4015a6:	2200      	movs	r2, #0
  4015a8:	4b03      	ldr	r3, [pc, #12]	; (4015b8 <TC0_Handler+0x64>)
  4015aa:	601a      	str	r2, [r3, #0]
}
  4015ac:	e7e1      	b.n	401572 <TC0_Handler+0x1e>
  4015ae:	bf00      	nop
  4015b0:	4000c000 	.word	0x4000c000
  4015b4:	00400957 	.word	0x00400957
  4015b8:	204013cc 	.word	0x204013cc
  4015bc:	004016bd 	.word	0x004016bd
  4015c0:	004016a9 	.word	0x004016a9
  4015c4:	004017e5 	.word	0x004017e5
  4015c8:	00400c5d 	.word	0x00400c5d

004015cc <message_received>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

void message_received(shift_can_message_t* message)
{
  4015cc:	b510      	push	{r4, lr}
  4015ce:	4604      	mov	r4, r0
	printf("Message received!\n");
  4015d0:	4806      	ldr	r0, [pc, #24]	; (4015ec <message_received+0x20>)
  4015d2:	4b07      	ldr	r3, [pc, #28]	; (4015f0 <message_received+0x24>)
  4015d4:	4798      	blx	r3
	//simple_struct_t* test_struct = (simple_struct_t*) message->data;
	pod_states_struct_t* recieved_msg = (pod_states_struct_t*) message->data;
	uint32_t id = message->id;
	uint32_t dataSize = message->dataSize;

	pio_toggle_pin(PIO_PA23_IDX);
  4015d6:	2017      	movs	r0, #23
  4015d8:	4b06      	ldr	r3, [pc, #24]	; (4015f4 <message_received+0x28>)
  4015da:	4798      	blx	r3
	
	if(message->id == 0x15) {
  4015dc:	6823      	ldr	r3, [r4, #0]
  4015de:	2b15      	cmp	r3, #21
  4015e0:	d000      	beq.n	4015e4 <message_received+0x18>
  4015e2:	bd10      	pop	{r4, pc}
		printf("WAZZZZZZZZZZZZZZZZZZAAAAAAAAAAAAAAAAAAAAAAAAAA in the beninging\n");
  4015e4:	4804      	ldr	r0, [pc, #16]	; (4015f8 <message_received+0x2c>)
  4015e6:	4b02      	ldr	r3, [pc, #8]	; (4015f0 <message_received+0x24>)
  4015e8:	4798      	blx	r3
		
	}
	
	
	//test_message_received(message);
  4015ea:	e7fa      	b.n	4015e2 <message_received+0x16>
  4015ec:	00404a08 	.word	0x00404a08
  4015f0:	00401ad9 	.word	0x00401ad9
  4015f4:	00400c5d 	.word	0x00400c5d
  4015f8:	00404a1c 	.word	0x00404a1c

004015fc <data_size_to_dlc>:
  4015fc:	2808      	cmp	r0, #8
  4015fe:	d916      	bls.n	40162e <data_size_to_dlc+0x32>
  401600:	280c      	cmp	r0, #12
  401602:	d801      	bhi.n	401608 <data_size_to_dlc+0xc>
  401604:	2009      	movs	r0, #9
  401606:	4770      	bx	lr
  401608:	2810      	cmp	r0, #16
  40160a:	d801      	bhi.n	401610 <data_size_to_dlc+0x14>
  40160c:	200a      	movs	r0, #10
  40160e:	4770      	bx	lr
  401610:	2814      	cmp	r0, #20
  401612:	d801      	bhi.n	401618 <data_size_to_dlc+0x1c>
  401614:	200b      	movs	r0, #11
  401616:	4770      	bx	lr
  401618:	2818      	cmp	r0, #24
  40161a:	d801      	bhi.n	401620 <data_size_to_dlc+0x24>
  40161c:	200c      	movs	r0, #12
  40161e:	4770      	bx	lr
  401620:	2820      	cmp	r0, #32
  401622:	d801      	bhi.n	401628 <data_size_to_dlc+0x2c>
  401624:	200d      	movs	r0, #13
  401626:	4770      	bx	lr
  401628:	2830      	cmp	r0, #48	; 0x30
  40162a:	d801      	bhi.n	401630 <data_size_to_dlc+0x34>
  40162c:	200e      	movs	r0, #14
  40162e:	4770      	bx	lr
  401630:	2841      	cmp	r0, #65	; 0x41
  401632:	bf34      	ite	cc
  401634:	200f      	movcc	r0, #15
  401636:	2000      	movcs	r0, #0
  401638:	4770      	bx	lr

0040163a <dlc_to_data_size>:
  40163a:	f1a0 0309 	sub.w	r3, r0, #9
  40163e:	2b06      	cmp	r3, #6
  401640:	d812      	bhi.n	401668 <dlc_to_data_size+0x2e>
  401642:	e8df f003 	tbb	[pc, r3]
  401646:	0410      	.short	0x0410
  401648:	0c0a0806 	.word	0x0c0a0806
  40164c:	0e          	.byte	0x0e
  40164d:	00          	.byte	0x00
  40164e:	2010      	movs	r0, #16
  401650:	4770      	bx	lr
  401652:	2014      	movs	r0, #20
  401654:	4770      	bx	lr
  401656:	2018      	movs	r0, #24
  401658:	4770      	bx	lr
  40165a:	2020      	movs	r0, #32
  40165c:	4770      	bx	lr
  40165e:	2030      	movs	r0, #48	; 0x30
  401660:	4770      	bx	lr
  401662:	2040      	movs	r0, #64	; 0x40
  401664:	4770      	bx	lr
  401666:	200c      	movs	r0, #12
  401668:	4770      	bx	lr
	...

0040166c <configure_upll>:
  40166c:	b510      	push	{r4, lr}
  40166e:	2005      	movs	r0, #5
  401670:	4b08      	ldr	r3, [pc, #32]	; (401694 <configure_upll+0x28>)
  401672:	4798      	blx	r3
  401674:	2160      	movs	r1, #96	; 0x60
  401676:	2005      	movs	r0, #5
  401678:	4b07      	ldr	r3, [pc, #28]	; (401698 <configure_upll+0x2c>)
  40167a:	4798      	blx	r3
  40167c:	2005      	movs	r0, #5
  40167e:	4b07      	ldr	r3, [pc, #28]	; (40169c <configure_upll+0x30>)
  401680:	4798      	blx	r3
  401682:	4b07      	ldr	r3, [pc, #28]	; (4016a0 <configure_upll+0x34>)
  401684:	4798      	blx	r3
  401686:	2023      	movs	r0, #35	; 0x23
  401688:	4c06      	ldr	r4, [pc, #24]	; (4016a4 <configure_upll+0x38>)
  40168a:	47a0      	blx	r4
  40168c:	2025      	movs	r0, #37	; 0x25
  40168e:	47a0      	blx	r4
  401690:	bd10      	pop	{r4, pc}
  401692:	bf00      	nop
  401694:	00400f69 	.word	0x00400f69
  401698:	00400f19 	.word	0x00400f19
  40169c:	00400f55 	.word	0x00400f55
  4016a0:	00400e55 	.word	0x00400e55
  4016a4:	00400e6d 	.word	0x00400e6d

004016a8 <serialize_data>:
  4016a8:	b508      	push	{r3, lr}
  4016aa:	4613      	mov	r3, r2
  4016ac:	460a      	mov	r2, r1
  4016ae:	4601      	mov	r1, r0
  4016b0:	4618      	mov	r0, r3
  4016b2:	4b01      	ldr	r3, [pc, #4]	; (4016b8 <serialize_data+0x10>)
  4016b4:	4798      	blx	r3
  4016b6:	bd08      	pop	{r3, pc}
  4016b8:	00401b01 	.word	0x00401b01

004016bc <init_can_module>:
  4016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016be:	b08b      	sub	sp, #44	; 0x2c
  4016c0:	2300      	movs	r3, #0
  4016c2:	f88d 3004 	strb.w	r3, [sp, #4]
  4016c6:	f88d 3005 	strb.w	r3, [sp, #5]
  4016ca:	2201      	movs	r2, #1
  4016cc:	f88d 2006 	strb.w	r2, [sp, #6]
  4016d0:	f88d 2007 	strb.w	r2, [sp, #7]
  4016d4:	f88d 2008 	strb.w	r2, [sp, #8]
  4016d8:	f88d 2009 	strb.w	r2, [sp, #9]
  4016dc:	f88d 300a 	strb.w	r3, [sp, #10]
  4016e0:	f88d 300b 	strb.w	r3, [sp, #11]
  4016e4:	f88d 300c 	strb.w	r3, [sp, #12]
  4016e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4016ec:	f8ad 100e 	strh.w	r1, [sp, #14]
  4016f0:	f88d 3010 	strb.w	r3, [sp, #16]
  4016f4:	f88d 3011 	strb.w	r3, [sp, #17]
  4016f8:	f88d 3012 	strb.w	r3, [sp, #18]
  4016fc:	f88d 3013 	strb.w	r3, [sp, #19]
  401700:	f88d 3014 	strb.w	r3, [sp, #20]
  401704:	2102      	movs	r1, #2
  401706:	f88d 1015 	strb.w	r1, [sp, #21]
  40170a:	f88d 1016 	strb.w	r1, [sp, #22]
  40170e:	f88d 2017 	strb.w	r2, [sp, #23]
  401712:	f88d 2018 	strb.w	r2, [sp, #24]
  401716:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  40171a:	9107      	str	r1, [sp, #28]
  40171c:	f88d 2020 	strb.w	r2, [sp, #32]
  401720:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  401724:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  401728:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  40172c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  401730:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  401734:	4e1f      	ldr	r6, [pc, #124]	; (4017b4 <init_can_module+0xf8>)
  401736:	4d20      	ldr	r5, [pc, #128]	; (4017b8 <init_can_module+0xfc>)
  401738:	4631      	mov	r1, r6
  40173a:	4628      	mov	r0, r5
  40173c:	4f1f      	ldr	r7, [pc, #124]	; (4017bc <init_can_module+0x100>)
  40173e:	47b8      	blx	r7
  401740:	4c1f      	ldr	r4, [pc, #124]	; (4017c0 <init_can_module+0x104>)
  401742:	4631      	mov	r1, r6
  401744:	4620      	mov	r0, r4
  401746:	47b8      	blx	r7
  401748:	4631      	mov	r1, r6
  40174a:	4628      	mov	r0, r5
  40174c:	4f1d      	ldr	r7, [pc, #116]	; (4017c4 <init_can_module+0x108>)
  40174e:	47b8      	blx	r7
  401750:	4631      	mov	r1, r6
  401752:	4620      	mov	r0, r4
  401754:	47b8      	blx	r7
  401756:	aa01      	add	r2, sp, #4
  401758:	491b      	ldr	r1, [pc, #108]	; (4017c8 <init_can_module+0x10c>)
  40175a:	4628      	mov	r0, r5
  40175c:	4f1b      	ldr	r7, [pc, #108]	; (4017cc <init_can_module+0x110>)
  40175e:	47b8      	blx	r7
  401760:	4628      	mov	r0, r5
  401762:	4e1b      	ldr	r6, [pc, #108]	; (4017d0 <init_can_module+0x114>)
  401764:	47b0      	blx	r6
  401766:	aa01      	add	r2, sp, #4
  401768:	491a      	ldr	r1, [pc, #104]	; (4017d4 <init_can_module+0x118>)
  40176a:	4620      	mov	r0, r4
  40176c:	47b8      	blx	r7
  40176e:	4620      	mov	r0, r4
  401770:	47b0      	blx	r6
  401772:	4b19      	ldr	r3, [pc, #100]	; (4017d8 <init_can_module+0x11c>)
  401774:	4798      	blx	r3
  401776:	4628      	mov	r0, r5
  401778:	4e18      	ldr	r6, [pc, #96]	; (4017dc <init_can_module+0x120>)
  40177a:	47b0      	blx	r6
  40177c:	4620      	mov	r0, r4
  40177e:	47b0      	blx	r6
  401780:	4b17      	ldr	r3, [pc, #92]	; (4017e0 <init_can_module+0x124>)
  401782:	2108      	movs	r1, #8
  401784:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  401788:	2220      	movs	r2, #32
  40178a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  40178e:	6059      	str	r1, [r3, #4]
  401790:	6828      	ldr	r0, [r5, #0]
  401792:	6d41      	ldr	r1, [r0, #84]	; 0x54
  401794:	f041 41c4 	orr.w	r1, r1, #1644167168	; 0x62000000
  401798:	6541      	str	r1, [r0, #84]	; 0x54
  40179a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  40179e:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
  4017a2:	605a      	str	r2, [r3, #4]
  4017a4:	6822      	ldr	r2, [r4, #0]
  4017a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
  4017a8:	f043 43c4 	orr.w	r3, r3, #1644167168	; 0x62000000
  4017ac:	6553      	str	r3, [r2, #84]	; 0x54
  4017ae:	b00b      	add	sp, #44	; 0x2c
  4017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017b2:	bf00      	nop
  4017b4:	001e8480 	.word	0x001e8480
  4017b8:	204013d4 	.word	0x204013d4
  4017bc:	00400621 	.word	0x00400621
  4017c0:	204013d8 	.word	0x204013d8
  4017c4:	00400715 	.word	0x00400715
  4017c8:	40030000 	.word	0x40030000
  4017cc:	004003ad 	.word	0x004003ad
  4017d0:	0040082d 	.word	0x0040082d
  4017d4:	40034000 	.word	0x40034000
  4017d8:	0040166d 	.word	0x0040166d
  4017dc:	00400801 	.word	0x00400801
  4017e0:	e000e100 	.word	0xe000e100

004017e4 <send_message_module_0>:
  4017e4:	b530      	push	{r4, r5, lr}
  4017e6:	b093      	sub	sp, #76	; 0x4c
  4017e8:	6803      	ldr	r3, [r0, #0]
  4017ea:	6844      	ldr	r4, [r0, #4]
  4017ec:	7a05      	ldrb	r5, [r0, #8]
  4017ee:	1e59      	subs	r1, r3, #1
  4017f0:	f240 72fd 	movw	r2, #2045	; 0x7fd
  4017f4:	4291      	cmp	r1, r2
  4017f6:	d835      	bhi.n	401864 <send_message_module_0+0x80>
  4017f8:	2c00      	cmp	r4, #0
  4017fa:	d033      	beq.n	401864 <send_message_module_0+0x80>
  4017fc:	1e6a      	subs	r2, r5, #1
  4017fe:	b2d2      	uxtb	r2, r2
  401800:	2a3f      	cmp	r2, #63	; 0x3f
  401802:	d82f      	bhi.n	401864 <send_message_module_0+0x80>
  401804:	2200      	movs	r2, #0
  401806:	9200      	str	r2, [sp, #0]
  401808:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  40180c:	9201      	str	r2, [sp, #4]
  40180e:	9900      	ldr	r1, [sp, #0]
  401810:	4a1e      	ldr	r2, [pc, #120]	; (40188c <send_message_module_0+0xa8>)
  401812:	ea02 4383 	and.w	r3, r2, r3, lsl #18
  401816:	430b      	orrs	r3, r1
  401818:	9300      	str	r3, [sp, #0]
  40181a:	4628      	mov	r0, r5
  40181c:	4b1c      	ldr	r3, [pc, #112]	; (401890 <send_message_module_0+0xac>)
  40181e:	4798      	blx	r3
  401820:	0403      	lsls	r3, r0, #16
  401822:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  401826:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40182a:	9301      	str	r3, [sp, #4]
  40182c:	b15d      	cbz	r5, 401846 <send_message_module_0+0x62>
  40182e:	1e62      	subs	r2, r4, #1
  401830:	f10d 0307 	add.w	r3, sp, #7
  401834:	a912      	add	r1, sp, #72	; 0x48
  401836:	1948      	adds	r0, r1, r5
  401838:	3841      	subs	r0, #65	; 0x41
  40183a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40183e:	f803 1f01 	strb.w	r1, [r3, #1]!
  401842:	4283      	cmp	r3, r0
  401844:	d1f9      	bne.n	40183a <send_message_module_0+0x56>
  401846:	4c13      	ldr	r4, [pc, #76]	; (401894 <send_message_module_0+0xb0>)
  401848:	2200      	movs	r2, #0
  40184a:	4669      	mov	r1, sp
  40184c:	4620      	mov	r0, r4
  40184e:	4b12      	ldr	r3, [pc, #72]	; (401898 <send_message_module_0+0xb4>)
  401850:	4798      	blx	r3
  401852:	6823      	ldr	r3, [r4, #0]
  401854:	699a      	ldr	r2, [r3, #24]
  401856:	f012 0f02 	tst.w	r2, #2
  40185a:	d10b      	bne.n	401874 <send_message_module_0+0x90>
  40185c:	2201      	movs	r2, #1
  40185e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401862:	e007      	b.n	401874 <send_message_module_0+0x90>
  401864:	b144      	cbz	r4, 401878 <send_message_module_0+0x94>
  401866:	b165      	cbz	r5, 401882 <send_message_module_0+0x9e>
  401868:	2d40      	cmp	r5, #64	; 0x40
  40186a:	d903      	bls.n	401874 <send_message_module_0+0x90>
  40186c:	490b      	ldr	r1, [pc, #44]	; (40189c <send_message_module_0+0xb8>)
  40186e:	480c      	ldr	r0, [pc, #48]	; (4018a0 <send_message_module_0+0xbc>)
  401870:	4b0c      	ldr	r3, [pc, #48]	; (4018a4 <send_message_module_0+0xc0>)
  401872:	4798      	blx	r3
  401874:	b013      	add	sp, #76	; 0x4c
  401876:	bd30      	pop	{r4, r5, pc}
  401878:	490b      	ldr	r1, [pc, #44]	; (4018a8 <send_message_module_0+0xc4>)
  40187a:	4809      	ldr	r0, [pc, #36]	; (4018a0 <send_message_module_0+0xbc>)
  40187c:	4b09      	ldr	r3, [pc, #36]	; (4018a4 <send_message_module_0+0xc0>)
  40187e:	4798      	blx	r3
  401880:	e7f1      	b.n	401866 <send_message_module_0+0x82>
  401882:	490a      	ldr	r1, [pc, #40]	; (4018ac <send_message_module_0+0xc8>)
  401884:	4806      	ldr	r0, [pc, #24]	; (4018a0 <send_message_module_0+0xbc>)
  401886:	4b07      	ldr	r3, [pc, #28]	; (4018a4 <send_message_module_0+0xc0>)
  401888:	4798      	blx	r3
  40188a:	e7f3      	b.n	401874 <send_message_module_0+0x90>
  40188c:	1ffc0000 	.word	0x1ffc0000
  401890:	004015fd 	.word	0x004015fd
  401894:	204013d4 	.word	0x204013d4
  401898:	004008a9 	.word	0x004008a9
  40189c:	00404afc 	.word	0x00404afc
  4018a0:	00404ac8 	.word	0x00404ac8
  4018a4:	00401ad9 	.word	0x00401ad9
  4018a8:	00404ab0 	.word	0x00404ab0
  4018ac:	00404ae0 	.word	0x00404ae0

004018b0 <MCAN0_INT0_Handler>:
  4018b0:	b530      	push	{r4, r5, lr}
  4018b2:	b095      	sub	sp, #84	; 0x54
  4018b4:	4b2e      	ldr	r3, [pc, #184]	; (401970 <MCAN0_INT0_Handler+0xc0>)
  4018b6:	681b      	ldr	r3, [r3, #0]
  4018b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4018ba:	9213      	str	r2, [sp, #76]	; 0x4c
  4018bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4018be:	f012 0f01 	tst.w	r2, #1
  4018c2:	d105      	bne.n	4018d0 <MCAN0_INT0_Handler+0x20>
  4018c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4018c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4018ca:	d143      	bne.n	401954 <MCAN0_INT0_Handler+0xa4>
  4018cc:	b015      	add	sp, #84	; 0x54
  4018ce:	bd30      	pop	{r4, r5, pc}
  4018d0:	2201      	movs	r2, #1
  4018d2:	651a      	str	r2, [r3, #80]	; 0x50
  4018d4:	4c27      	ldr	r4, [pc, #156]	; (401974 <MCAN0_INT0_Handler+0xc4>)
  4018d6:	6822      	ldr	r2, [r4, #0]
  4018d8:	4d25      	ldr	r5, [pc, #148]	; (401970 <MCAN0_INT0_Handler+0xc0>)
  4018da:	4927      	ldr	r1, [pc, #156]	; (401978 <MCAN0_INT0_Handler+0xc8>)
  4018dc:	4628      	mov	r0, r5
  4018de:	4b27      	ldr	r3, [pc, #156]	; (40197c <MCAN0_INT0_Handler+0xcc>)
  4018e0:	4798      	blx	r3
  4018e2:	6823      	ldr	r3, [r4, #0]
  4018e4:	682a      	ldr	r2, [r5, #0]
  4018e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4018ea:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
  4018ee:	6823      	ldr	r3, [r4, #0]
  4018f0:	3301      	adds	r3, #1
  4018f2:	6023      	str	r3, [r4, #0]
  4018f4:	6823      	ldr	r3, [r4, #0]
  4018f6:	2b01      	cmp	r3, #1
  4018f8:	d025      	beq.n	401946 <MCAN0_INT0_Handler+0x96>
  4018fa:	4b1f      	ldr	r3, [pc, #124]	; (401978 <MCAN0_INT0_Handler+0xc8>)
  4018fc:	681b      	ldr	r3, [r3, #0]
  4018fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  401902:	d123      	bne.n	40194c <MCAN0_INT0_Handler+0x9c>
  401904:	4b1c      	ldr	r3, [pc, #112]	; (401978 <MCAN0_INT0_Handler+0xc8>)
  401906:	6858      	ldr	r0, [r3, #4]
  401908:	f3c0 4003 	ubfx	r0, r0, #16, #4
  40190c:	4b1c      	ldr	r3, [pc, #112]	; (401980 <MCAN0_INT0_Handler+0xd0>)
  40190e:	4798      	blx	r3
  401910:	f88d 0008 	strb.w	r0, [sp, #8]
  401914:	b158      	cbz	r0, 40192e <MCAN0_INT0_Handler+0x7e>
  401916:	4918      	ldr	r1, [pc, #96]	; (401978 <MCAN0_INT0_Handler+0xc8>)
  401918:	1dcb      	adds	r3, r1, #7
  40191a:	f10d 020b 	add.w	r2, sp, #11
  40191e:	3007      	adds	r0, #7
  401920:	4408      	add	r0, r1
  401922:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401926:	f802 1f01 	strb.w	r1, [r2, #1]!
  40192a:	4283      	cmp	r3, r0
  40192c:	d1f9      	bne.n	401922 <MCAN0_INT0_Handler+0x72>
  40192e:	4b12      	ldr	r3, [pc, #72]	; (401978 <MCAN0_INT0_Handler+0xc8>)
  401930:	681b      	ldr	r3, [r3, #0]
  401932:	aa03      	add	r2, sp, #12
  401934:	9201      	str	r2, [sp, #4]
  401936:	f3c3 0349 	ubfx	r3, r3, #1, #10
  40193a:	a814      	add	r0, sp, #80	; 0x50
  40193c:	f840 3d50 	str.w	r3, [r0, #-80]!
  401940:	4b10      	ldr	r3, [pc, #64]	; (401984 <MCAN0_INT0_Handler+0xd4>)
  401942:	4798      	blx	r3
  401944:	e7be      	b.n	4018c4 <MCAN0_INT0_Handler+0x14>
  401946:	2200      	movs	r2, #0
  401948:	6022      	str	r2, [r4, #0]
  40194a:	e7d6      	b.n	4018fa <MCAN0_INT0_Handler+0x4a>
  40194c:	480e      	ldr	r0, [pc, #56]	; (401988 <MCAN0_INT0_Handler+0xd8>)
  40194e:	4b0f      	ldr	r3, [pc, #60]	; (40198c <MCAN0_INT0_Handler+0xdc>)
  401950:	4798      	blx	r3
  401952:	e7b7      	b.n	4018c4 <MCAN0_INT0_Handler+0x14>
  401954:	4806      	ldr	r0, [pc, #24]	; (401970 <MCAN0_INT0_Handler+0xc0>)
  401956:	6803      	ldr	r3, [r0, #0]
  401958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40195c:	651a      	str	r2, [r3, #80]	; 0x50
  40195e:	4b0c      	ldr	r3, [pc, #48]	; (401990 <MCAN0_INT0_Handler+0xe0>)
  401960:	4798      	blx	r3
  401962:	480c      	ldr	r0, [pc, #48]	; (401994 <MCAN0_INT0_Handler+0xe4>)
  401964:	4b09      	ldr	r3, [pc, #36]	; (40198c <MCAN0_INT0_Handler+0xdc>)
  401966:	4798      	blx	r3
  401968:	4b0b      	ldr	r3, [pc, #44]	; (401998 <MCAN0_INT0_Handler+0xe8>)
  40196a:	4798      	blx	r3
  40196c:	e7ae      	b.n	4018cc <MCAN0_INT0_Handler+0x1c>
  40196e:	bf00      	nop
  401970:	204013d4 	.word	0x204013d4
  401974:	204013d0 	.word	0x204013d0
  401978:	204013dc 	.word	0x204013dc
  40197c:	00400855 	.word	0x00400855
  401980:	0040163b 	.word	0x0040163b
  401984:	004015cd 	.word	0x004015cd
  401988:	00404a60 	.word	0x00404a60
  40198c:	00401ad9 	.word	0x00401ad9
  401990:	00400817 	.word	0x00400817
  401994:	00404a80 	.word	0x00404a80
  401998:	004016bd 	.word	0x004016bd

0040199c <MCAN1_INT0_Handler>:
  40199c:	b530      	push	{r4, r5, lr}
  40199e:	b095      	sub	sp, #84	; 0x54
  4019a0:	4b2e      	ldr	r3, [pc, #184]	; (401a5c <MCAN1_INT0_Handler+0xc0>)
  4019a2:	681b      	ldr	r3, [r3, #0]
  4019a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4019a6:	9213      	str	r2, [sp, #76]	; 0x4c
  4019a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4019aa:	f012 0f01 	tst.w	r2, #1
  4019ae:	d105      	bne.n	4019bc <MCAN1_INT0_Handler+0x20>
  4019b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4019b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4019b6:	d143      	bne.n	401a40 <MCAN1_INT0_Handler+0xa4>
  4019b8:	b015      	add	sp, #84	; 0x54
  4019ba:	bd30      	pop	{r4, r5, pc}
  4019bc:	2201      	movs	r2, #1
  4019be:	651a      	str	r2, [r3, #80]	; 0x50
  4019c0:	4c27      	ldr	r4, [pc, #156]	; (401a60 <MCAN1_INT0_Handler+0xc4>)
  4019c2:	6822      	ldr	r2, [r4, #0]
  4019c4:	4d25      	ldr	r5, [pc, #148]	; (401a5c <MCAN1_INT0_Handler+0xc0>)
  4019c6:	4927      	ldr	r1, [pc, #156]	; (401a64 <MCAN1_INT0_Handler+0xc8>)
  4019c8:	4628      	mov	r0, r5
  4019ca:	4b27      	ldr	r3, [pc, #156]	; (401a68 <MCAN1_INT0_Handler+0xcc>)
  4019cc:	4798      	blx	r3
  4019ce:	6823      	ldr	r3, [r4, #0]
  4019d0:	682a      	ldr	r2, [r5, #0]
  4019d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4019d6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
  4019da:	6823      	ldr	r3, [r4, #0]
  4019dc:	3301      	adds	r3, #1
  4019de:	6023      	str	r3, [r4, #0]
  4019e0:	6823      	ldr	r3, [r4, #0]
  4019e2:	2b01      	cmp	r3, #1
  4019e4:	d025      	beq.n	401a32 <MCAN1_INT0_Handler+0x96>
  4019e6:	4b1f      	ldr	r3, [pc, #124]	; (401a64 <MCAN1_INT0_Handler+0xc8>)
  4019e8:	681b      	ldr	r3, [r3, #0]
  4019ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4019ee:	d123      	bne.n	401a38 <MCAN1_INT0_Handler+0x9c>
  4019f0:	4b1c      	ldr	r3, [pc, #112]	; (401a64 <MCAN1_INT0_Handler+0xc8>)
  4019f2:	6858      	ldr	r0, [r3, #4]
  4019f4:	f3c0 4003 	ubfx	r0, r0, #16, #4
  4019f8:	4b1c      	ldr	r3, [pc, #112]	; (401a6c <MCAN1_INT0_Handler+0xd0>)
  4019fa:	4798      	blx	r3
  4019fc:	f88d 0008 	strb.w	r0, [sp, #8]
  401a00:	b158      	cbz	r0, 401a1a <MCAN1_INT0_Handler+0x7e>
  401a02:	4918      	ldr	r1, [pc, #96]	; (401a64 <MCAN1_INT0_Handler+0xc8>)
  401a04:	1dcb      	adds	r3, r1, #7
  401a06:	f10d 020b 	add.w	r2, sp, #11
  401a0a:	3007      	adds	r0, #7
  401a0c:	4408      	add	r0, r1
  401a0e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401a12:	f802 1f01 	strb.w	r1, [r2, #1]!
  401a16:	4283      	cmp	r3, r0
  401a18:	d1f9      	bne.n	401a0e <MCAN1_INT0_Handler+0x72>
  401a1a:	4b12      	ldr	r3, [pc, #72]	; (401a64 <MCAN1_INT0_Handler+0xc8>)
  401a1c:	681b      	ldr	r3, [r3, #0]
  401a1e:	aa03      	add	r2, sp, #12
  401a20:	9201      	str	r2, [sp, #4]
  401a22:	f3c3 0349 	ubfx	r3, r3, #1, #10
  401a26:	a814      	add	r0, sp, #80	; 0x50
  401a28:	f840 3d50 	str.w	r3, [r0, #-80]!
  401a2c:	4b10      	ldr	r3, [pc, #64]	; (401a70 <MCAN1_INT0_Handler+0xd4>)
  401a2e:	4798      	blx	r3
  401a30:	e7be      	b.n	4019b0 <MCAN1_INT0_Handler+0x14>
  401a32:	2200      	movs	r2, #0
  401a34:	6022      	str	r2, [r4, #0]
  401a36:	e7d6      	b.n	4019e6 <MCAN1_INT0_Handler+0x4a>
  401a38:	480e      	ldr	r0, [pc, #56]	; (401a74 <MCAN1_INT0_Handler+0xd8>)
  401a3a:	4b0f      	ldr	r3, [pc, #60]	; (401a78 <MCAN1_INT0_Handler+0xdc>)
  401a3c:	4798      	blx	r3
  401a3e:	e7b7      	b.n	4019b0 <MCAN1_INT0_Handler+0x14>
  401a40:	4806      	ldr	r0, [pc, #24]	; (401a5c <MCAN1_INT0_Handler+0xc0>)
  401a42:	6803      	ldr	r3, [r0, #0]
  401a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401a48:	651a      	str	r2, [r3, #80]	; 0x50
  401a4a:	4b0c      	ldr	r3, [pc, #48]	; (401a7c <MCAN1_INT0_Handler+0xe0>)
  401a4c:	4798      	blx	r3
  401a4e:	480c      	ldr	r0, [pc, #48]	; (401a80 <MCAN1_INT0_Handler+0xe4>)
  401a50:	4b09      	ldr	r3, [pc, #36]	; (401a78 <MCAN1_INT0_Handler+0xdc>)
  401a52:	4798      	blx	r3
  401a54:	4b0b      	ldr	r3, [pc, #44]	; (401a84 <MCAN1_INT0_Handler+0xe8>)
  401a56:	4798      	blx	r3
  401a58:	e7ae      	b.n	4019b8 <MCAN1_INT0_Handler+0x1c>
  401a5a:	bf00      	nop
  401a5c:	204013d8 	.word	0x204013d8
  401a60:	204013d0 	.word	0x204013d0
  401a64:	204013dc 	.word	0x204013dc
  401a68:	00400855 	.word	0x00400855
  401a6c:	0040163b 	.word	0x0040163b
  401a70:	004015cd 	.word	0x004015cd
  401a74:	00404a60 	.word	0x00404a60
  401a78:	00401ad9 	.word	0x00401ad9
  401a7c:	00400817 	.word	0x00400817
  401a80:	00404a80 	.word	0x00404a80
  401a84:	004016bd 	.word	0x004016bd

00401a88 <__libc_init_array>:
  401a88:	b570      	push	{r4, r5, r6, lr}
  401a8a:	4e0f      	ldr	r6, [pc, #60]	; (401ac8 <__libc_init_array+0x40>)
  401a8c:	4d0f      	ldr	r5, [pc, #60]	; (401acc <__libc_init_array+0x44>)
  401a8e:	1b76      	subs	r6, r6, r5
  401a90:	10b6      	asrs	r6, r6, #2
  401a92:	bf18      	it	ne
  401a94:	2400      	movne	r4, #0
  401a96:	d005      	beq.n	401aa4 <__libc_init_array+0x1c>
  401a98:	3401      	adds	r4, #1
  401a9a:	f855 3b04 	ldr.w	r3, [r5], #4
  401a9e:	4798      	blx	r3
  401aa0:	42a6      	cmp	r6, r4
  401aa2:	d1f9      	bne.n	401a98 <__libc_init_array+0x10>
  401aa4:	4e0a      	ldr	r6, [pc, #40]	; (401ad0 <__libc_init_array+0x48>)
  401aa6:	4d0b      	ldr	r5, [pc, #44]	; (401ad4 <__libc_init_array+0x4c>)
  401aa8:	1b76      	subs	r6, r6, r5
  401aaa:	f003 f8e7 	bl	404c7c <_init>
  401aae:	10b6      	asrs	r6, r6, #2
  401ab0:	bf18      	it	ne
  401ab2:	2400      	movne	r4, #0
  401ab4:	d006      	beq.n	401ac4 <__libc_init_array+0x3c>
  401ab6:	3401      	adds	r4, #1
  401ab8:	f855 3b04 	ldr.w	r3, [r5], #4
  401abc:	4798      	blx	r3
  401abe:	42a6      	cmp	r6, r4
  401ac0:	d1f9      	bne.n	401ab6 <__libc_init_array+0x2e>
  401ac2:	bd70      	pop	{r4, r5, r6, pc}
  401ac4:	bd70      	pop	{r4, r5, r6, pc}
  401ac6:	bf00      	nop
  401ac8:	00404c88 	.word	0x00404c88
  401acc:	00404c88 	.word	0x00404c88
  401ad0:	00404c90 	.word	0x00404c90
  401ad4:	00404c88 	.word	0x00404c88

00401ad8 <iprintf>:
  401ad8:	b40f      	push	{r0, r1, r2, r3}
  401ada:	b500      	push	{lr}
  401adc:	4907      	ldr	r1, [pc, #28]	; (401afc <iprintf+0x24>)
  401ade:	b083      	sub	sp, #12
  401ae0:	ab04      	add	r3, sp, #16
  401ae2:	6808      	ldr	r0, [r1, #0]
  401ae4:	f853 2b04 	ldr.w	r2, [r3], #4
  401ae8:	6881      	ldr	r1, [r0, #8]
  401aea:	9301      	str	r3, [sp, #4]
  401aec:	f000 fa00 	bl	401ef0 <_vfiprintf_r>
  401af0:	b003      	add	sp, #12
  401af2:	f85d eb04 	ldr.w	lr, [sp], #4
  401af6:	b004      	add	sp, #16
  401af8:	4770      	bx	lr
  401afa:	bf00      	nop
  401afc:	20400008 	.word	0x20400008

00401b00 <memcpy>:
  401b00:	4684      	mov	ip, r0
  401b02:	ea41 0300 	orr.w	r3, r1, r0
  401b06:	f013 0303 	ands.w	r3, r3, #3
  401b0a:	d16d      	bne.n	401be8 <memcpy+0xe8>
  401b0c:	3a40      	subs	r2, #64	; 0x40
  401b0e:	d341      	bcc.n	401b94 <memcpy+0x94>
  401b10:	f851 3b04 	ldr.w	r3, [r1], #4
  401b14:	f840 3b04 	str.w	r3, [r0], #4
  401b18:	f851 3b04 	ldr.w	r3, [r1], #4
  401b1c:	f840 3b04 	str.w	r3, [r0], #4
  401b20:	f851 3b04 	ldr.w	r3, [r1], #4
  401b24:	f840 3b04 	str.w	r3, [r0], #4
  401b28:	f851 3b04 	ldr.w	r3, [r1], #4
  401b2c:	f840 3b04 	str.w	r3, [r0], #4
  401b30:	f851 3b04 	ldr.w	r3, [r1], #4
  401b34:	f840 3b04 	str.w	r3, [r0], #4
  401b38:	f851 3b04 	ldr.w	r3, [r1], #4
  401b3c:	f840 3b04 	str.w	r3, [r0], #4
  401b40:	f851 3b04 	ldr.w	r3, [r1], #4
  401b44:	f840 3b04 	str.w	r3, [r0], #4
  401b48:	f851 3b04 	ldr.w	r3, [r1], #4
  401b4c:	f840 3b04 	str.w	r3, [r0], #4
  401b50:	f851 3b04 	ldr.w	r3, [r1], #4
  401b54:	f840 3b04 	str.w	r3, [r0], #4
  401b58:	f851 3b04 	ldr.w	r3, [r1], #4
  401b5c:	f840 3b04 	str.w	r3, [r0], #4
  401b60:	f851 3b04 	ldr.w	r3, [r1], #4
  401b64:	f840 3b04 	str.w	r3, [r0], #4
  401b68:	f851 3b04 	ldr.w	r3, [r1], #4
  401b6c:	f840 3b04 	str.w	r3, [r0], #4
  401b70:	f851 3b04 	ldr.w	r3, [r1], #4
  401b74:	f840 3b04 	str.w	r3, [r0], #4
  401b78:	f851 3b04 	ldr.w	r3, [r1], #4
  401b7c:	f840 3b04 	str.w	r3, [r0], #4
  401b80:	f851 3b04 	ldr.w	r3, [r1], #4
  401b84:	f840 3b04 	str.w	r3, [r0], #4
  401b88:	f851 3b04 	ldr.w	r3, [r1], #4
  401b8c:	f840 3b04 	str.w	r3, [r0], #4
  401b90:	3a40      	subs	r2, #64	; 0x40
  401b92:	d2bd      	bcs.n	401b10 <memcpy+0x10>
  401b94:	3230      	adds	r2, #48	; 0x30
  401b96:	d311      	bcc.n	401bbc <memcpy+0xbc>
  401b98:	f851 3b04 	ldr.w	r3, [r1], #4
  401b9c:	f840 3b04 	str.w	r3, [r0], #4
  401ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ba4:	f840 3b04 	str.w	r3, [r0], #4
  401ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  401bac:	f840 3b04 	str.w	r3, [r0], #4
  401bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  401bb4:	f840 3b04 	str.w	r3, [r0], #4
  401bb8:	3a10      	subs	r2, #16
  401bba:	d2ed      	bcs.n	401b98 <memcpy+0x98>
  401bbc:	320c      	adds	r2, #12
  401bbe:	d305      	bcc.n	401bcc <memcpy+0xcc>
  401bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  401bc4:	f840 3b04 	str.w	r3, [r0], #4
  401bc8:	3a04      	subs	r2, #4
  401bca:	d2f9      	bcs.n	401bc0 <memcpy+0xc0>
  401bcc:	3204      	adds	r2, #4
  401bce:	d008      	beq.n	401be2 <memcpy+0xe2>
  401bd0:	07d2      	lsls	r2, r2, #31
  401bd2:	bf1c      	itt	ne
  401bd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401bd8:	f800 3b01 	strbne.w	r3, [r0], #1
  401bdc:	d301      	bcc.n	401be2 <memcpy+0xe2>
  401bde:	880b      	ldrh	r3, [r1, #0]
  401be0:	8003      	strh	r3, [r0, #0]
  401be2:	4660      	mov	r0, ip
  401be4:	4770      	bx	lr
  401be6:	bf00      	nop
  401be8:	2a08      	cmp	r2, #8
  401bea:	d313      	bcc.n	401c14 <memcpy+0x114>
  401bec:	078b      	lsls	r3, r1, #30
  401bee:	d08d      	beq.n	401b0c <memcpy+0xc>
  401bf0:	f010 0303 	ands.w	r3, r0, #3
  401bf4:	d08a      	beq.n	401b0c <memcpy+0xc>
  401bf6:	f1c3 0304 	rsb	r3, r3, #4
  401bfa:	1ad2      	subs	r2, r2, r3
  401bfc:	07db      	lsls	r3, r3, #31
  401bfe:	bf1c      	itt	ne
  401c00:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401c04:	f800 3b01 	strbne.w	r3, [r0], #1
  401c08:	d380      	bcc.n	401b0c <memcpy+0xc>
  401c0a:	f831 3b02 	ldrh.w	r3, [r1], #2
  401c0e:	f820 3b02 	strh.w	r3, [r0], #2
  401c12:	e77b      	b.n	401b0c <memcpy+0xc>
  401c14:	3a04      	subs	r2, #4
  401c16:	d3d9      	bcc.n	401bcc <memcpy+0xcc>
  401c18:	3a01      	subs	r2, #1
  401c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
  401c1e:	f800 3b01 	strb.w	r3, [r0], #1
  401c22:	d2f9      	bcs.n	401c18 <memcpy+0x118>
  401c24:	780b      	ldrb	r3, [r1, #0]
  401c26:	7003      	strb	r3, [r0, #0]
  401c28:	784b      	ldrb	r3, [r1, #1]
  401c2a:	7043      	strb	r3, [r0, #1]
  401c2c:	788b      	ldrb	r3, [r1, #2]
  401c2e:	7083      	strb	r3, [r0, #2]
  401c30:	4660      	mov	r0, ip
  401c32:	4770      	bx	lr

00401c34 <memset>:
  401c34:	b470      	push	{r4, r5, r6}
  401c36:	0786      	lsls	r6, r0, #30
  401c38:	d046      	beq.n	401cc8 <memset+0x94>
  401c3a:	1e54      	subs	r4, r2, #1
  401c3c:	2a00      	cmp	r2, #0
  401c3e:	d041      	beq.n	401cc4 <memset+0x90>
  401c40:	b2ca      	uxtb	r2, r1
  401c42:	4603      	mov	r3, r0
  401c44:	e002      	b.n	401c4c <memset+0x18>
  401c46:	f114 34ff 	adds.w	r4, r4, #4294967295
  401c4a:	d33b      	bcc.n	401cc4 <memset+0x90>
  401c4c:	f803 2b01 	strb.w	r2, [r3], #1
  401c50:	079d      	lsls	r5, r3, #30
  401c52:	d1f8      	bne.n	401c46 <memset+0x12>
  401c54:	2c03      	cmp	r4, #3
  401c56:	d92e      	bls.n	401cb6 <memset+0x82>
  401c58:	b2cd      	uxtb	r5, r1
  401c5a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401c5e:	2c0f      	cmp	r4, #15
  401c60:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401c64:	d919      	bls.n	401c9a <memset+0x66>
  401c66:	f103 0210 	add.w	r2, r3, #16
  401c6a:	4626      	mov	r6, r4
  401c6c:	3e10      	subs	r6, #16
  401c6e:	2e0f      	cmp	r6, #15
  401c70:	f842 5c10 	str.w	r5, [r2, #-16]
  401c74:	f842 5c0c 	str.w	r5, [r2, #-12]
  401c78:	f842 5c08 	str.w	r5, [r2, #-8]
  401c7c:	f842 5c04 	str.w	r5, [r2, #-4]
  401c80:	f102 0210 	add.w	r2, r2, #16
  401c84:	d8f2      	bhi.n	401c6c <memset+0x38>
  401c86:	f1a4 0210 	sub.w	r2, r4, #16
  401c8a:	f022 020f 	bic.w	r2, r2, #15
  401c8e:	f004 040f 	and.w	r4, r4, #15
  401c92:	3210      	adds	r2, #16
  401c94:	2c03      	cmp	r4, #3
  401c96:	4413      	add	r3, r2
  401c98:	d90d      	bls.n	401cb6 <memset+0x82>
  401c9a:	461e      	mov	r6, r3
  401c9c:	4622      	mov	r2, r4
  401c9e:	3a04      	subs	r2, #4
  401ca0:	2a03      	cmp	r2, #3
  401ca2:	f846 5b04 	str.w	r5, [r6], #4
  401ca6:	d8fa      	bhi.n	401c9e <memset+0x6a>
  401ca8:	1f22      	subs	r2, r4, #4
  401caa:	f022 0203 	bic.w	r2, r2, #3
  401cae:	3204      	adds	r2, #4
  401cb0:	4413      	add	r3, r2
  401cb2:	f004 0403 	and.w	r4, r4, #3
  401cb6:	b12c      	cbz	r4, 401cc4 <memset+0x90>
  401cb8:	b2c9      	uxtb	r1, r1
  401cba:	441c      	add	r4, r3
  401cbc:	f803 1b01 	strb.w	r1, [r3], #1
  401cc0:	429c      	cmp	r4, r3
  401cc2:	d1fb      	bne.n	401cbc <memset+0x88>
  401cc4:	bc70      	pop	{r4, r5, r6}
  401cc6:	4770      	bx	lr
  401cc8:	4614      	mov	r4, r2
  401cca:	4603      	mov	r3, r0
  401ccc:	e7c2      	b.n	401c54 <memset+0x20>
  401cce:	bf00      	nop

00401cd0 <setbuf>:
  401cd0:	2900      	cmp	r1, #0
  401cd2:	bf0c      	ite	eq
  401cd4:	2202      	moveq	r2, #2
  401cd6:	2200      	movne	r2, #0
  401cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401cdc:	f000 b800 	b.w	401ce0 <setvbuf>

00401ce0 <setvbuf>:
  401ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ce4:	4c61      	ldr	r4, [pc, #388]	; (401e6c <setvbuf+0x18c>)
  401ce6:	6825      	ldr	r5, [r4, #0]
  401ce8:	b083      	sub	sp, #12
  401cea:	4604      	mov	r4, r0
  401cec:	460f      	mov	r7, r1
  401cee:	4690      	mov	r8, r2
  401cf0:	461e      	mov	r6, r3
  401cf2:	b115      	cbz	r5, 401cfa <setvbuf+0x1a>
  401cf4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401cf6:	2b00      	cmp	r3, #0
  401cf8:	d064      	beq.n	401dc4 <setvbuf+0xe4>
  401cfa:	f1b8 0f02 	cmp.w	r8, #2
  401cfe:	d006      	beq.n	401d0e <setvbuf+0x2e>
  401d00:	f1b8 0f01 	cmp.w	r8, #1
  401d04:	f200 809f 	bhi.w	401e46 <setvbuf+0x166>
  401d08:	2e00      	cmp	r6, #0
  401d0a:	f2c0 809c 	blt.w	401e46 <setvbuf+0x166>
  401d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401d10:	07d8      	lsls	r0, r3, #31
  401d12:	d534      	bpl.n	401d7e <setvbuf+0x9e>
  401d14:	4621      	mov	r1, r4
  401d16:	4628      	mov	r0, r5
  401d18:	f001 f888 	bl	402e2c <_fflush_r>
  401d1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d1e:	b141      	cbz	r1, 401d32 <setvbuf+0x52>
  401d20:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401d24:	4299      	cmp	r1, r3
  401d26:	d002      	beq.n	401d2e <setvbuf+0x4e>
  401d28:	4628      	mov	r0, r5
  401d2a:	f001 f9fd 	bl	403128 <_free_r>
  401d2e:	2300      	movs	r3, #0
  401d30:	6323      	str	r3, [r4, #48]	; 0x30
  401d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d36:	2200      	movs	r2, #0
  401d38:	61a2      	str	r2, [r4, #24]
  401d3a:	6062      	str	r2, [r4, #4]
  401d3c:	061a      	lsls	r2, r3, #24
  401d3e:	d43a      	bmi.n	401db6 <setvbuf+0xd6>
  401d40:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401d44:	f023 0303 	bic.w	r3, r3, #3
  401d48:	f1b8 0f02 	cmp.w	r8, #2
  401d4c:	81a3      	strh	r3, [r4, #12]
  401d4e:	d01d      	beq.n	401d8c <setvbuf+0xac>
  401d50:	ab01      	add	r3, sp, #4
  401d52:	466a      	mov	r2, sp
  401d54:	4621      	mov	r1, r4
  401d56:	4628      	mov	r0, r5
  401d58:	f001 fc84 	bl	403664 <__swhatbuf_r>
  401d5c:	89a3      	ldrh	r3, [r4, #12]
  401d5e:	4318      	orrs	r0, r3
  401d60:	81a0      	strh	r0, [r4, #12]
  401d62:	2e00      	cmp	r6, #0
  401d64:	d132      	bne.n	401dcc <setvbuf+0xec>
  401d66:	9e00      	ldr	r6, [sp, #0]
  401d68:	4630      	mov	r0, r6
  401d6a:	f001 fcf3 	bl	403754 <malloc>
  401d6e:	4607      	mov	r7, r0
  401d70:	2800      	cmp	r0, #0
  401d72:	d06b      	beq.n	401e4c <setvbuf+0x16c>
  401d74:	89a3      	ldrh	r3, [r4, #12]
  401d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d7a:	81a3      	strh	r3, [r4, #12]
  401d7c:	e028      	b.n	401dd0 <setvbuf+0xf0>
  401d7e:	89a3      	ldrh	r3, [r4, #12]
  401d80:	0599      	lsls	r1, r3, #22
  401d82:	d4c7      	bmi.n	401d14 <setvbuf+0x34>
  401d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401d86:	f001 fc69 	bl	40365c <__retarget_lock_acquire_recursive>
  401d8a:	e7c3      	b.n	401d14 <setvbuf+0x34>
  401d8c:	2500      	movs	r5, #0
  401d8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401d90:	2600      	movs	r6, #0
  401d92:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401d96:	f043 0302 	orr.w	r3, r3, #2
  401d9a:	2001      	movs	r0, #1
  401d9c:	60a6      	str	r6, [r4, #8]
  401d9e:	07ce      	lsls	r6, r1, #31
  401da0:	81a3      	strh	r3, [r4, #12]
  401da2:	6022      	str	r2, [r4, #0]
  401da4:	6122      	str	r2, [r4, #16]
  401da6:	6160      	str	r0, [r4, #20]
  401da8:	d401      	bmi.n	401dae <setvbuf+0xce>
  401daa:	0598      	lsls	r0, r3, #22
  401dac:	d53e      	bpl.n	401e2c <setvbuf+0x14c>
  401dae:	4628      	mov	r0, r5
  401db0:	b003      	add	sp, #12
  401db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401db6:	6921      	ldr	r1, [r4, #16]
  401db8:	4628      	mov	r0, r5
  401dba:	f001 f9b5 	bl	403128 <_free_r>
  401dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dc2:	e7bd      	b.n	401d40 <setvbuf+0x60>
  401dc4:	4628      	mov	r0, r5
  401dc6:	f001 f889 	bl	402edc <__sinit>
  401dca:	e796      	b.n	401cfa <setvbuf+0x1a>
  401dcc:	2f00      	cmp	r7, #0
  401dce:	d0cb      	beq.n	401d68 <setvbuf+0x88>
  401dd0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401dd2:	2b00      	cmp	r3, #0
  401dd4:	d033      	beq.n	401e3e <setvbuf+0x15e>
  401dd6:	9b00      	ldr	r3, [sp, #0]
  401dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401ddc:	6027      	str	r7, [r4, #0]
  401dde:	429e      	cmp	r6, r3
  401de0:	bf1c      	itt	ne
  401de2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401de6:	81a2      	strhne	r2, [r4, #12]
  401de8:	f1b8 0f01 	cmp.w	r8, #1
  401dec:	bf04      	itt	eq
  401dee:	f042 0201 	orreq.w	r2, r2, #1
  401df2:	81a2      	strheq	r2, [r4, #12]
  401df4:	b292      	uxth	r2, r2
  401df6:	f012 0308 	ands.w	r3, r2, #8
  401dfa:	6127      	str	r7, [r4, #16]
  401dfc:	6166      	str	r6, [r4, #20]
  401dfe:	d00e      	beq.n	401e1e <setvbuf+0x13e>
  401e00:	07d1      	lsls	r1, r2, #31
  401e02:	d51a      	bpl.n	401e3a <setvbuf+0x15a>
  401e04:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401e06:	4276      	negs	r6, r6
  401e08:	2300      	movs	r3, #0
  401e0a:	f015 0501 	ands.w	r5, r5, #1
  401e0e:	61a6      	str	r6, [r4, #24]
  401e10:	60a3      	str	r3, [r4, #8]
  401e12:	d009      	beq.n	401e28 <setvbuf+0x148>
  401e14:	2500      	movs	r5, #0
  401e16:	4628      	mov	r0, r5
  401e18:	b003      	add	sp, #12
  401e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e1e:	60a3      	str	r3, [r4, #8]
  401e20:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401e22:	f015 0501 	ands.w	r5, r5, #1
  401e26:	d1f5      	bne.n	401e14 <setvbuf+0x134>
  401e28:	0593      	lsls	r3, r2, #22
  401e2a:	d4c0      	bmi.n	401dae <setvbuf+0xce>
  401e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e2e:	f001 fc17 	bl	403660 <__retarget_lock_release_recursive>
  401e32:	4628      	mov	r0, r5
  401e34:	b003      	add	sp, #12
  401e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e3a:	60a6      	str	r6, [r4, #8]
  401e3c:	e7f0      	b.n	401e20 <setvbuf+0x140>
  401e3e:	4628      	mov	r0, r5
  401e40:	f001 f84c 	bl	402edc <__sinit>
  401e44:	e7c7      	b.n	401dd6 <setvbuf+0xf6>
  401e46:	f04f 35ff 	mov.w	r5, #4294967295
  401e4a:	e7b0      	b.n	401dae <setvbuf+0xce>
  401e4c:	f8dd 9000 	ldr.w	r9, [sp]
  401e50:	45b1      	cmp	r9, r6
  401e52:	d004      	beq.n	401e5e <setvbuf+0x17e>
  401e54:	4648      	mov	r0, r9
  401e56:	f001 fc7d 	bl	403754 <malloc>
  401e5a:	4607      	mov	r7, r0
  401e5c:	b920      	cbnz	r0, 401e68 <setvbuf+0x188>
  401e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e62:	f04f 35ff 	mov.w	r5, #4294967295
  401e66:	e792      	b.n	401d8e <setvbuf+0xae>
  401e68:	464e      	mov	r6, r9
  401e6a:	e783      	b.n	401d74 <setvbuf+0x94>
  401e6c:	20400008 	.word	0x20400008

00401e70 <__sprint_r.part.0>:
  401e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e74:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401e76:	049c      	lsls	r4, r3, #18
  401e78:	4693      	mov	fp, r2
  401e7a:	d52f      	bpl.n	401edc <__sprint_r.part.0+0x6c>
  401e7c:	6893      	ldr	r3, [r2, #8]
  401e7e:	6812      	ldr	r2, [r2, #0]
  401e80:	b353      	cbz	r3, 401ed8 <__sprint_r.part.0+0x68>
  401e82:	460e      	mov	r6, r1
  401e84:	4607      	mov	r7, r0
  401e86:	f102 0908 	add.w	r9, r2, #8
  401e8a:	e919 0420 	ldmdb	r9, {r5, sl}
  401e8e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401e92:	d017      	beq.n	401ec4 <__sprint_r.part.0+0x54>
  401e94:	3d04      	subs	r5, #4
  401e96:	2400      	movs	r4, #0
  401e98:	e001      	b.n	401e9e <__sprint_r.part.0+0x2e>
  401e9a:	45a0      	cmp	r8, r4
  401e9c:	d010      	beq.n	401ec0 <__sprint_r.part.0+0x50>
  401e9e:	4632      	mov	r2, r6
  401ea0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401ea4:	4638      	mov	r0, r7
  401ea6:	f001 f8bb 	bl	403020 <_fputwc_r>
  401eaa:	1c43      	adds	r3, r0, #1
  401eac:	f104 0401 	add.w	r4, r4, #1
  401eb0:	d1f3      	bne.n	401e9a <__sprint_r.part.0+0x2a>
  401eb2:	2300      	movs	r3, #0
  401eb4:	f8cb 3008 	str.w	r3, [fp, #8]
  401eb8:	f8cb 3004 	str.w	r3, [fp, #4]
  401ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ec0:	f8db 3008 	ldr.w	r3, [fp, #8]
  401ec4:	f02a 0a03 	bic.w	sl, sl, #3
  401ec8:	eba3 030a 	sub.w	r3, r3, sl
  401ecc:	f8cb 3008 	str.w	r3, [fp, #8]
  401ed0:	f109 0908 	add.w	r9, r9, #8
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d1d8      	bne.n	401e8a <__sprint_r.part.0+0x1a>
  401ed8:	2000      	movs	r0, #0
  401eda:	e7ea      	b.n	401eb2 <__sprint_r.part.0+0x42>
  401edc:	f001 fa0a 	bl	4032f4 <__sfvwrite_r>
  401ee0:	2300      	movs	r3, #0
  401ee2:	f8cb 3008 	str.w	r3, [fp, #8]
  401ee6:	f8cb 3004 	str.w	r3, [fp, #4]
  401eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eee:	bf00      	nop

00401ef0 <_vfiprintf_r>:
  401ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ef4:	b0ad      	sub	sp, #180	; 0xb4
  401ef6:	461d      	mov	r5, r3
  401ef8:	468b      	mov	fp, r1
  401efa:	4690      	mov	r8, r2
  401efc:	9307      	str	r3, [sp, #28]
  401efe:	9006      	str	r0, [sp, #24]
  401f00:	b118      	cbz	r0, 401f0a <_vfiprintf_r+0x1a>
  401f02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401f04:	2b00      	cmp	r3, #0
  401f06:	f000 80f3 	beq.w	4020f0 <_vfiprintf_r+0x200>
  401f0a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f0e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401f12:	07df      	lsls	r7, r3, #31
  401f14:	b281      	uxth	r1, r0
  401f16:	d402      	bmi.n	401f1e <_vfiprintf_r+0x2e>
  401f18:	058e      	lsls	r6, r1, #22
  401f1a:	f140 80fc 	bpl.w	402116 <_vfiprintf_r+0x226>
  401f1e:	048c      	lsls	r4, r1, #18
  401f20:	d40a      	bmi.n	401f38 <_vfiprintf_r+0x48>
  401f22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f26:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401f2e:	f8ab 100c 	strh.w	r1, [fp, #12]
  401f32:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401f36:	b289      	uxth	r1, r1
  401f38:	0708      	lsls	r0, r1, #28
  401f3a:	f140 80b3 	bpl.w	4020a4 <_vfiprintf_r+0x1b4>
  401f3e:	f8db 3010 	ldr.w	r3, [fp, #16]
  401f42:	2b00      	cmp	r3, #0
  401f44:	f000 80ae 	beq.w	4020a4 <_vfiprintf_r+0x1b4>
  401f48:	f001 031a 	and.w	r3, r1, #26
  401f4c:	2b0a      	cmp	r3, #10
  401f4e:	f000 80b5 	beq.w	4020bc <_vfiprintf_r+0x1cc>
  401f52:	2300      	movs	r3, #0
  401f54:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401f58:	930b      	str	r3, [sp, #44]	; 0x2c
  401f5a:	9311      	str	r3, [sp, #68]	; 0x44
  401f5c:	9310      	str	r3, [sp, #64]	; 0x40
  401f5e:	9303      	str	r3, [sp, #12]
  401f60:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401f64:	46ca      	mov	sl, r9
  401f66:	f8cd b010 	str.w	fp, [sp, #16]
  401f6a:	f898 3000 	ldrb.w	r3, [r8]
  401f6e:	4644      	mov	r4, r8
  401f70:	b1fb      	cbz	r3, 401fb2 <_vfiprintf_r+0xc2>
  401f72:	2b25      	cmp	r3, #37	; 0x25
  401f74:	d102      	bne.n	401f7c <_vfiprintf_r+0x8c>
  401f76:	e01c      	b.n	401fb2 <_vfiprintf_r+0xc2>
  401f78:	2b25      	cmp	r3, #37	; 0x25
  401f7a:	d003      	beq.n	401f84 <_vfiprintf_r+0x94>
  401f7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401f80:	2b00      	cmp	r3, #0
  401f82:	d1f9      	bne.n	401f78 <_vfiprintf_r+0x88>
  401f84:	eba4 0508 	sub.w	r5, r4, r8
  401f88:	b19d      	cbz	r5, 401fb2 <_vfiprintf_r+0xc2>
  401f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401f8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f8e:	f8ca 8000 	str.w	r8, [sl]
  401f92:	3301      	adds	r3, #1
  401f94:	442a      	add	r2, r5
  401f96:	2b07      	cmp	r3, #7
  401f98:	f8ca 5004 	str.w	r5, [sl, #4]
  401f9c:	9211      	str	r2, [sp, #68]	; 0x44
  401f9e:	9310      	str	r3, [sp, #64]	; 0x40
  401fa0:	dd7a      	ble.n	402098 <_vfiprintf_r+0x1a8>
  401fa2:	2a00      	cmp	r2, #0
  401fa4:	f040 84b0 	bne.w	402908 <_vfiprintf_r+0xa18>
  401fa8:	9b03      	ldr	r3, [sp, #12]
  401faa:	9210      	str	r2, [sp, #64]	; 0x40
  401fac:	442b      	add	r3, r5
  401fae:	46ca      	mov	sl, r9
  401fb0:	9303      	str	r3, [sp, #12]
  401fb2:	7823      	ldrb	r3, [r4, #0]
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	f000 83e0 	beq.w	40277a <_vfiprintf_r+0x88a>
  401fba:	2000      	movs	r0, #0
  401fbc:	f04f 0300 	mov.w	r3, #0
  401fc0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401fc4:	f104 0801 	add.w	r8, r4, #1
  401fc8:	7862      	ldrb	r2, [r4, #1]
  401fca:	4605      	mov	r5, r0
  401fcc:	4606      	mov	r6, r0
  401fce:	4603      	mov	r3, r0
  401fd0:	f04f 34ff 	mov.w	r4, #4294967295
  401fd4:	f108 0801 	add.w	r8, r8, #1
  401fd8:	f1a2 0120 	sub.w	r1, r2, #32
  401fdc:	2958      	cmp	r1, #88	; 0x58
  401fde:	f200 82de 	bhi.w	40259e <_vfiprintf_r+0x6ae>
  401fe2:	e8df f011 	tbh	[pc, r1, lsl #1]
  401fe6:	0221      	.short	0x0221
  401fe8:	02dc02dc 	.word	0x02dc02dc
  401fec:	02dc0229 	.word	0x02dc0229
  401ff0:	02dc02dc 	.word	0x02dc02dc
  401ff4:	02dc02dc 	.word	0x02dc02dc
  401ff8:	028902dc 	.word	0x028902dc
  401ffc:	02dc0295 	.word	0x02dc0295
  402000:	02bd00a2 	.word	0x02bd00a2
  402004:	019f02dc 	.word	0x019f02dc
  402008:	01a401a4 	.word	0x01a401a4
  40200c:	01a401a4 	.word	0x01a401a4
  402010:	01a401a4 	.word	0x01a401a4
  402014:	01a401a4 	.word	0x01a401a4
  402018:	02dc01a4 	.word	0x02dc01a4
  40201c:	02dc02dc 	.word	0x02dc02dc
  402020:	02dc02dc 	.word	0x02dc02dc
  402024:	02dc02dc 	.word	0x02dc02dc
  402028:	02dc02dc 	.word	0x02dc02dc
  40202c:	01b202dc 	.word	0x01b202dc
  402030:	02dc02dc 	.word	0x02dc02dc
  402034:	02dc02dc 	.word	0x02dc02dc
  402038:	02dc02dc 	.word	0x02dc02dc
  40203c:	02dc02dc 	.word	0x02dc02dc
  402040:	02dc02dc 	.word	0x02dc02dc
  402044:	02dc0197 	.word	0x02dc0197
  402048:	02dc02dc 	.word	0x02dc02dc
  40204c:	02dc02dc 	.word	0x02dc02dc
  402050:	02dc019b 	.word	0x02dc019b
  402054:	025302dc 	.word	0x025302dc
  402058:	02dc02dc 	.word	0x02dc02dc
  40205c:	02dc02dc 	.word	0x02dc02dc
  402060:	02dc02dc 	.word	0x02dc02dc
  402064:	02dc02dc 	.word	0x02dc02dc
  402068:	02dc02dc 	.word	0x02dc02dc
  40206c:	021b025a 	.word	0x021b025a
  402070:	02dc02dc 	.word	0x02dc02dc
  402074:	026e02dc 	.word	0x026e02dc
  402078:	02dc021b 	.word	0x02dc021b
  40207c:	027302dc 	.word	0x027302dc
  402080:	01f502dc 	.word	0x01f502dc
  402084:	02090182 	.word	0x02090182
  402088:	02dc02d7 	.word	0x02dc02d7
  40208c:	02dc029a 	.word	0x02dc029a
  402090:	02dc00a7 	.word	0x02dc00a7
  402094:	022e02dc 	.word	0x022e02dc
  402098:	f10a 0a08 	add.w	sl, sl, #8
  40209c:	9b03      	ldr	r3, [sp, #12]
  40209e:	442b      	add	r3, r5
  4020a0:	9303      	str	r3, [sp, #12]
  4020a2:	e786      	b.n	401fb2 <_vfiprintf_r+0xc2>
  4020a4:	4659      	mov	r1, fp
  4020a6:	9806      	ldr	r0, [sp, #24]
  4020a8:	f000 fdac 	bl	402c04 <__swsetup_r>
  4020ac:	bb18      	cbnz	r0, 4020f6 <_vfiprintf_r+0x206>
  4020ae:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4020b2:	f001 031a 	and.w	r3, r1, #26
  4020b6:	2b0a      	cmp	r3, #10
  4020b8:	f47f af4b 	bne.w	401f52 <_vfiprintf_r+0x62>
  4020bc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	f6ff af46 	blt.w	401f52 <_vfiprintf_r+0x62>
  4020c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020ca:	07db      	lsls	r3, r3, #31
  4020cc:	d405      	bmi.n	4020da <_vfiprintf_r+0x1ea>
  4020ce:	058f      	lsls	r7, r1, #22
  4020d0:	d403      	bmi.n	4020da <_vfiprintf_r+0x1ea>
  4020d2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4020d6:	f001 fac3 	bl	403660 <__retarget_lock_release_recursive>
  4020da:	462b      	mov	r3, r5
  4020dc:	4642      	mov	r2, r8
  4020de:	4659      	mov	r1, fp
  4020e0:	9806      	ldr	r0, [sp, #24]
  4020e2:	f000 fd4d 	bl	402b80 <__sbprintf>
  4020e6:	9003      	str	r0, [sp, #12]
  4020e8:	9803      	ldr	r0, [sp, #12]
  4020ea:	b02d      	add	sp, #180	; 0xb4
  4020ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020f0:	f000 fef4 	bl	402edc <__sinit>
  4020f4:	e709      	b.n	401f0a <_vfiprintf_r+0x1a>
  4020f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020fa:	07d9      	lsls	r1, r3, #31
  4020fc:	d404      	bmi.n	402108 <_vfiprintf_r+0x218>
  4020fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402102:	059a      	lsls	r2, r3, #22
  402104:	f140 84aa 	bpl.w	402a5c <_vfiprintf_r+0xb6c>
  402108:	f04f 33ff 	mov.w	r3, #4294967295
  40210c:	9303      	str	r3, [sp, #12]
  40210e:	9803      	ldr	r0, [sp, #12]
  402110:	b02d      	add	sp, #180	; 0xb4
  402112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402116:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40211a:	f001 fa9f 	bl	40365c <__retarget_lock_acquire_recursive>
  40211e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402122:	b281      	uxth	r1, r0
  402124:	e6fb      	b.n	401f1e <_vfiprintf_r+0x2e>
  402126:	4276      	negs	r6, r6
  402128:	9207      	str	r2, [sp, #28]
  40212a:	f043 0304 	orr.w	r3, r3, #4
  40212e:	f898 2000 	ldrb.w	r2, [r8]
  402132:	e74f      	b.n	401fd4 <_vfiprintf_r+0xe4>
  402134:	9608      	str	r6, [sp, #32]
  402136:	069e      	lsls	r6, r3, #26
  402138:	f100 8450 	bmi.w	4029dc <_vfiprintf_r+0xaec>
  40213c:	9907      	ldr	r1, [sp, #28]
  40213e:	06dd      	lsls	r5, r3, #27
  402140:	460a      	mov	r2, r1
  402142:	f100 83ef 	bmi.w	402924 <_vfiprintf_r+0xa34>
  402146:	0658      	lsls	r0, r3, #25
  402148:	f140 83ec 	bpl.w	402924 <_vfiprintf_r+0xa34>
  40214c:	880e      	ldrh	r6, [r1, #0]
  40214e:	3104      	adds	r1, #4
  402150:	2700      	movs	r7, #0
  402152:	2201      	movs	r2, #1
  402154:	9107      	str	r1, [sp, #28]
  402156:	f04f 0100 	mov.w	r1, #0
  40215a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40215e:	2500      	movs	r5, #0
  402160:	1c61      	adds	r1, r4, #1
  402162:	f000 8116 	beq.w	402392 <_vfiprintf_r+0x4a2>
  402166:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40216a:	9102      	str	r1, [sp, #8]
  40216c:	ea56 0107 	orrs.w	r1, r6, r7
  402170:	f040 8114 	bne.w	40239c <_vfiprintf_r+0x4ac>
  402174:	2c00      	cmp	r4, #0
  402176:	f040 835c 	bne.w	402832 <_vfiprintf_r+0x942>
  40217a:	2a00      	cmp	r2, #0
  40217c:	f040 83b7 	bne.w	4028ee <_vfiprintf_r+0x9fe>
  402180:	f013 0301 	ands.w	r3, r3, #1
  402184:	9305      	str	r3, [sp, #20]
  402186:	f000 8457 	beq.w	402a38 <_vfiprintf_r+0xb48>
  40218a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40218e:	2330      	movs	r3, #48	; 0x30
  402190:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402194:	9b05      	ldr	r3, [sp, #20]
  402196:	42a3      	cmp	r3, r4
  402198:	bfb8      	it	lt
  40219a:	4623      	movlt	r3, r4
  40219c:	9301      	str	r3, [sp, #4]
  40219e:	b10d      	cbz	r5, 4021a4 <_vfiprintf_r+0x2b4>
  4021a0:	3301      	adds	r3, #1
  4021a2:	9301      	str	r3, [sp, #4]
  4021a4:	9b02      	ldr	r3, [sp, #8]
  4021a6:	f013 0302 	ands.w	r3, r3, #2
  4021aa:	9309      	str	r3, [sp, #36]	; 0x24
  4021ac:	d002      	beq.n	4021b4 <_vfiprintf_r+0x2c4>
  4021ae:	9b01      	ldr	r3, [sp, #4]
  4021b0:	3302      	adds	r3, #2
  4021b2:	9301      	str	r3, [sp, #4]
  4021b4:	9b02      	ldr	r3, [sp, #8]
  4021b6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4021ba:	930a      	str	r3, [sp, #40]	; 0x28
  4021bc:	f040 8217 	bne.w	4025ee <_vfiprintf_r+0x6fe>
  4021c0:	9b08      	ldr	r3, [sp, #32]
  4021c2:	9a01      	ldr	r2, [sp, #4]
  4021c4:	1a9d      	subs	r5, r3, r2
  4021c6:	2d00      	cmp	r5, #0
  4021c8:	f340 8211 	ble.w	4025ee <_vfiprintf_r+0x6fe>
  4021cc:	2d10      	cmp	r5, #16
  4021ce:	f340 8490 	ble.w	402af2 <_vfiprintf_r+0xc02>
  4021d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4021d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021d6:	4ec4      	ldr	r6, [pc, #784]	; (4024e8 <_vfiprintf_r+0x5f8>)
  4021d8:	46d6      	mov	lr, sl
  4021da:	2710      	movs	r7, #16
  4021dc:	46a2      	mov	sl, r4
  4021de:	4619      	mov	r1, r3
  4021e0:	9c06      	ldr	r4, [sp, #24]
  4021e2:	e007      	b.n	4021f4 <_vfiprintf_r+0x304>
  4021e4:	f101 0c02 	add.w	ip, r1, #2
  4021e8:	f10e 0e08 	add.w	lr, lr, #8
  4021ec:	4601      	mov	r1, r0
  4021ee:	3d10      	subs	r5, #16
  4021f0:	2d10      	cmp	r5, #16
  4021f2:	dd11      	ble.n	402218 <_vfiprintf_r+0x328>
  4021f4:	1c48      	adds	r0, r1, #1
  4021f6:	3210      	adds	r2, #16
  4021f8:	2807      	cmp	r0, #7
  4021fa:	9211      	str	r2, [sp, #68]	; 0x44
  4021fc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402200:	9010      	str	r0, [sp, #64]	; 0x40
  402202:	ddef      	ble.n	4021e4 <_vfiprintf_r+0x2f4>
  402204:	2a00      	cmp	r2, #0
  402206:	f040 81e4 	bne.w	4025d2 <_vfiprintf_r+0x6e2>
  40220a:	3d10      	subs	r5, #16
  40220c:	2d10      	cmp	r5, #16
  40220e:	4611      	mov	r1, r2
  402210:	f04f 0c01 	mov.w	ip, #1
  402214:	46ce      	mov	lr, r9
  402216:	dced      	bgt.n	4021f4 <_vfiprintf_r+0x304>
  402218:	4654      	mov	r4, sl
  40221a:	4661      	mov	r1, ip
  40221c:	46f2      	mov	sl, lr
  40221e:	442a      	add	r2, r5
  402220:	2907      	cmp	r1, #7
  402222:	9211      	str	r2, [sp, #68]	; 0x44
  402224:	f8ca 6000 	str.w	r6, [sl]
  402228:	f8ca 5004 	str.w	r5, [sl, #4]
  40222c:	9110      	str	r1, [sp, #64]	; 0x40
  40222e:	f300 82ec 	bgt.w	40280a <_vfiprintf_r+0x91a>
  402232:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402236:	f10a 0a08 	add.w	sl, sl, #8
  40223a:	1c48      	adds	r0, r1, #1
  40223c:	2d00      	cmp	r5, #0
  40223e:	f040 81de 	bne.w	4025fe <_vfiprintf_r+0x70e>
  402242:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402244:	2b00      	cmp	r3, #0
  402246:	f000 81f8 	beq.w	40263a <_vfiprintf_r+0x74a>
  40224a:	3202      	adds	r2, #2
  40224c:	a90e      	add	r1, sp, #56	; 0x38
  40224e:	2302      	movs	r3, #2
  402250:	2807      	cmp	r0, #7
  402252:	9211      	str	r2, [sp, #68]	; 0x44
  402254:	9010      	str	r0, [sp, #64]	; 0x40
  402256:	e88a 000a 	stmia.w	sl, {r1, r3}
  40225a:	f340 81ea 	ble.w	402632 <_vfiprintf_r+0x742>
  40225e:	2a00      	cmp	r2, #0
  402260:	f040 838c 	bne.w	40297c <_vfiprintf_r+0xa8c>
  402264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402266:	2b80      	cmp	r3, #128	; 0x80
  402268:	f04f 0001 	mov.w	r0, #1
  40226c:	4611      	mov	r1, r2
  40226e:	46ca      	mov	sl, r9
  402270:	f040 81e7 	bne.w	402642 <_vfiprintf_r+0x752>
  402274:	9b08      	ldr	r3, [sp, #32]
  402276:	9d01      	ldr	r5, [sp, #4]
  402278:	1b5e      	subs	r6, r3, r5
  40227a:	2e00      	cmp	r6, #0
  40227c:	f340 81e1 	ble.w	402642 <_vfiprintf_r+0x752>
  402280:	2e10      	cmp	r6, #16
  402282:	4d9a      	ldr	r5, [pc, #616]	; (4024ec <_vfiprintf_r+0x5fc>)
  402284:	f340 8450 	ble.w	402b28 <_vfiprintf_r+0xc38>
  402288:	46d4      	mov	ip, sl
  40228a:	2710      	movs	r7, #16
  40228c:	46a2      	mov	sl, r4
  40228e:	9c06      	ldr	r4, [sp, #24]
  402290:	e007      	b.n	4022a2 <_vfiprintf_r+0x3b2>
  402292:	f101 0e02 	add.w	lr, r1, #2
  402296:	f10c 0c08 	add.w	ip, ip, #8
  40229a:	4601      	mov	r1, r0
  40229c:	3e10      	subs	r6, #16
  40229e:	2e10      	cmp	r6, #16
  4022a0:	dd11      	ble.n	4022c6 <_vfiprintf_r+0x3d6>
  4022a2:	1c48      	adds	r0, r1, #1
  4022a4:	3210      	adds	r2, #16
  4022a6:	2807      	cmp	r0, #7
  4022a8:	9211      	str	r2, [sp, #68]	; 0x44
  4022aa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4022ae:	9010      	str	r0, [sp, #64]	; 0x40
  4022b0:	ddef      	ble.n	402292 <_vfiprintf_r+0x3a2>
  4022b2:	2a00      	cmp	r2, #0
  4022b4:	f040 829d 	bne.w	4027f2 <_vfiprintf_r+0x902>
  4022b8:	3e10      	subs	r6, #16
  4022ba:	2e10      	cmp	r6, #16
  4022bc:	f04f 0e01 	mov.w	lr, #1
  4022c0:	4611      	mov	r1, r2
  4022c2:	46cc      	mov	ip, r9
  4022c4:	dced      	bgt.n	4022a2 <_vfiprintf_r+0x3b2>
  4022c6:	4654      	mov	r4, sl
  4022c8:	46e2      	mov	sl, ip
  4022ca:	4432      	add	r2, r6
  4022cc:	f1be 0f07 	cmp.w	lr, #7
  4022d0:	9211      	str	r2, [sp, #68]	; 0x44
  4022d2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4022d6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4022da:	f300 8369 	bgt.w	4029b0 <_vfiprintf_r+0xac0>
  4022de:	f10a 0a08 	add.w	sl, sl, #8
  4022e2:	f10e 0001 	add.w	r0, lr, #1
  4022e6:	4671      	mov	r1, lr
  4022e8:	e1ab      	b.n	402642 <_vfiprintf_r+0x752>
  4022ea:	9608      	str	r6, [sp, #32]
  4022ec:	f013 0220 	ands.w	r2, r3, #32
  4022f0:	f040 838c 	bne.w	402a0c <_vfiprintf_r+0xb1c>
  4022f4:	f013 0110 	ands.w	r1, r3, #16
  4022f8:	f040 831a 	bne.w	402930 <_vfiprintf_r+0xa40>
  4022fc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402300:	f000 8316 	beq.w	402930 <_vfiprintf_r+0xa40>
  402304:	9807      	ldr	r0, [sp, #28]
  402306:	460a      	mov	r2, r1
  402308:	4601      	mov	r1, r0
  40230a:	3104      	adds	r1, #4
  40230c:	8806      	ldrh	r6, [r0, #0]
  40230e:	9107      	str	r1, [sp, #28]
  402310:	2700      	movs	r7, #0
  402312:	e720      	b.n	402156 <_vfiprintf_r+0x266>
  402314:	9608      	str	r6, [sp, #32]
  402316:	f043 0310 	orr.w	r3, r3, #16
  40231a:	e7e7      	b.n	4022ec <_vfiprintf_r+0x3fc>
  40231c:	9608      	str	r6, [sp, #32]
  40231e:	f043 0310 	orr.w	r3, r3, #16
  402322:	e708      	b.n	402136 <_vfiprintf_r+0x246>
  402324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402328:	f898 2000 	ldrb.w	r2, [r8]
  40232c:	e652      	b.n	401fd4 <_vfiprintf_r+0xe4>
  40232e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402332:	2600      	movs	r6, #0
  402334:	f818 2b01 	ldrb.w	r2, [r8], #1
  402338:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40233c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402340:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402344:	2909      	cmp	r1, #9
  402346:	d9f5      	bls.n	402334 <_vfiprintf_r+0x444>
  402348:	e646      	b.n	401fd8 <_vfiprintf_r+0xe8>
  40234a:	9608      	str	r6, [sp, #32]
  40234c:	2800      	cmp	r0, #0
  40234e:	f040 8408 	bne.w	402b62 <_vfiprintf_r+0xc72>
  402352:	f043 0310 	orr.w	r3, r3, #16
  402356:	069e      	lsls	r6, r3, #26
  402358:	f100 834c 	bmi.w	4029f4 <_vfiprintf_r+0xb04>
  40235c:	06dd      	lsls	r5, r3, #27
  40235e:	f100 82f3 	bmi.w	402948 <_vfiprintf_r+0xa58>
  402362:	0658      	lsls	r0, r3, #25
  402364:	f140 82f0 	bpl.w	402948 <_vfiprintf_r+0xa58>
  402368:	9d07      	ldr	r5, [sp, #28]
  40236a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40236e:	462a      	mov	r2, r5
  402370:	17f7      	asrs	r7, r6, #31
  402372:	3204      	adds	r2, #4
  402374:	4630      	mov	r0, r6
  402376:	4639      	mov	r1, r7
  402378:	9207      	str	r2, [sp, #28]
  40237a:	2800      	cmp	r0, #0
  40237c:	f171 0200 	sbcs.w	r2, r1, #0
  402380:	f2c0 835d 	blt.w	402a3e <_vfiprintf_r+0xb4e>
  402384:	1c61      	adds	r1, r4, #1
  402386:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40238a:	f04f 0201 	mov.w	r2, #1
  40238e:	f47f aeea 	bne.w	402166 <_vfiprintf_r+0x276>
  402392:	ea56 0107 	orrs.w	r1, r6, r7
  402396:	f000 824d 	beq.w	402834 <_vfiprintf_r+0x944>
  40239a:	9302      	str	r3, [sp, #8]
  40239c:	2a01      	cmp	r2, #1
  40239e:	f000 828c 	beq.w	4028ba <_vfiprintf_r+0x9ca>
  4023a2:	2a02      	cmp	r2, #2
  4023a4:	f040 825c 	bne.w	402860 <_vfiprintf_r+0x970>
  4023a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4023aa:	46cb      	mov	fp, r9
  4023ac:	0933      	lsrs	r3, r6, #4
  4023ae:	f006 010f 	and.w	r1, r6, #15
  4023b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4023b6:	093a      	lsrs	r2, r7, #4
  4023b8:	461e      	mov	r6, r3
  4023ba:	4617      	mov	r7, r2
  4023bc:	5c43      	ldrb	r3, [r0, r1]
  4023be:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4023c2:	ea56 0307 	orrs.w	r3, r6, r7
  4023c6:	d1f1      	bne.n	4023ac <_vfiprintf_r+0x4bc>
  4023c8:	eba9 030b 	sub.w	r3, r9, fp
  4023cc:	9305      	str	r3, [sp, #20]
  4023ce:	e6e1      	b.n	402194 <_vfiprintf_r+0x2a4>
  4023d0:	2800      	cmp	r0, #0
  4023d2:	f040 83c0 	bne.w	402b56 <_vfiprintf_r+0xc66>
  4023d6:	0699      	lsls	r1, r3, #26
  4023d8:	f100 8367 	bmi.w	402aaa <_vfiprintf_r+0xbba>
  4023dc:	06da      	lsls	r2, r3, #27
  4023de:	f100 80f1 	bmi.w	4025c4 <_vfiprintf_r+0x6d4>
  4023e2:	065b      	lsls	r3, r3, #25
  4023e4:	f140 80ee 	bpl.w	4025c4 <_vfiprintf_r+0x6d4>
  4023e8:	9a07      	ldr	r2, [sp, #28]
  4023ea:	6813      	ldr	r3, [r2, #0]
  4023ec:	3204      	adds	r2, #4
  4023ee:	9207      	str	r2, [sp, #28]
  4023f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4023f4:	801a      	strh	r2, [r3, #0]
  4023f6:	e5b8      	b.n	401f6a <_vfiprintf_r+0x7a>
  4023f8:	9807      	ldr	r0, [sp, #28]
  4023fa:	4a3d      	ldr	r2, [pc, #244]	; (4024f0 <_vfiprintf_r+0x600>)
  4023fc:	9608      	str	r6, [sp, #32]
  4023fe:	920b      	str	r2, [sp, #44]	; 0x2c
  402400:	6806      	ldr	r6, [r0, #0]
  402402:	2278      	movs	r2, #120	; 0x78
  402404:	2130      	movs	r1, #48	; 0x30
  402406:	3004      	adds	r0, #4
  402408:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40240c:	f043 0302 	orr.w	r3, r3, #2
  402410:	9007      	str	r0, [sp, #28]
  402412:	2700      	movs	r7, #0
  402414:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402418:	2202      	movs	r2, #2
  40241a:	e69c      	b.n	402156 <_vfiprintf_r+0x266>
  40241c:	9608      	str	r6, [sp, #32]
  40241e:	2800      	cmp	r0, #0
  402420:	d099      	beq.n	402356 <_vfiprintf_r+0x466>
  402422:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402426:	e796      	b.n	402356 <_vfiprintf_r+0x466>
  402428:	f898 2000 	ldrb.w	r2, [r8]
  40242c:	2d00      	cmp	r5, #0
  40242e:	f47f add1 	bne.w	401fd4 <_vfiprintf_r+0xe4>
  402432:	2001      	movs	r0, #1
  402434:	2520      	movs	r5, #32
  402436:	e5cd      	b.n	401fd4 <_vfiprintf_r+0xe4>
  402438:	f043 0301 	orr.w	r3, r3, #1
  40243c:	f898 2000 	ldrb.w	r2, [r8]
  402440:	e5c8      	b.n	401fd4 <_vfiprintf_r+0xe4>
  402442:	9608      	str	r6, [sp, #32]
  402444:	2800      	cmp	r0, #0
  402446:	f040 8393 	bne.w	402b70 <_vfiprintf_r+0xc80>
  40244a:	4929      	ldr	r1, [pc, #164]	; (4024f0 <_vfiprintf_r+0x600>)
  40244c:	910b      	str	r1, [sp, #44]	; 0x2c
  40244e:	069f      	lsls	r7, r3, #26
  402450:	f100 82e8 	bmi.w	402a24 <_vfiprintf_r+0xb34>
  402454:	9807      	ldr	r0, [sp, #28]
  402456:	06de      	lsls	r6, r3, #27
  402458:	4601      	mov	r1, r0
  40245a:	f100 8270 	bmi.w	40293e <_vfiprintf_r+0xa4e>
  40245e:	065d      	lsls	r5, r3, #25
  402460:	f140 826d 	bpl.w	40293e <_vfiprintf_r+0xa4e>
  402464:	3104      	adds	r1, #4
  402466:	8806      	ldrh	r6, [r0, #0]
  402468:	9107      	str	r1, [sp, #28]
  40246a:	2700      	movs	r7, #0
  40246c:	07d8      	lsls	r0, r3, #31
  40246e:	f140 8222 	bpl.w	4028b6 <_vfiprintf_r+0x9c6>
  402472:	ea56 0107 	orrs.w	r1, r6, r7
  402476:	f000 821e 	beq.w	4028b6 <_vfiprintf_r+0x9c6>
  40247a:	2130      	movs	r1, #48	; 0x30
  40247c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402480:	f043 0302 	orr.w	r3, r3, #2
  402484:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402488:	2202      	movs	r2, #2
  40248a:	e664      	b.n	402156 <_vfiprintf_r+0x266>
  40248c:	9608      	str	r6, [sp, #32]
  40248e:	2800      	cmp	r0, #0
  402490:	f040 836b 	bne.w	402b6a <_vfiprintf_r+0xc7a>
  402494:	4917      	ldr	r1, [pc, #92]	; (4024f4 <_vfiprintf_r+0x604>)
  402496:	910b      	str	r1, [sp, #44]	; 0x2c
  402498:	e7d9      	b.n	40244e <_vfiprintf_r+0x55e>
  40249a:	9907      	ldr	r1, [sp, #28]
  40249c:	9608      	str	r6, [sp, #32]
  40249e:	680a      	ldr	r2, [r1, #0]
  4024a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4024a4:	f04f 0000 	mov.w	r0, #0
  4024a8:	460a      	mov	r2, r1
  4024aa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4024ae:	3204      	adds	r2, #4
  4024b0:	2001      	movs	r0, #1
  4024b2:	9001      	str	r0, [sp, #4]
  4024b4:	9207      	str	r2, [sp, #28]
  4024b6:	9005      	str	r0, [sp, #20]
  4024b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4024bc:	9302      	str	r3, [sp, #8]
  4024be:	2400      	movs	r4, #0
  4024c0:	e670      	b.n	4021a4 <_vfiprintf_r+0x2b4>
  4024c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024c6:	f898 2000 	ldrb.w	r2, [r8]
  4024ca:	e583      	b.n	401fd4 <_vfiprintf_r+0xe4>
  4024cc:	f898 2000 	ldrb.w	r2, [r8]
  4024d0:	2a6c      	cmp	r2, #108	; 0x6c
  4024d2:	bf03      	ittte	eq
  4024d4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4024d8:	f043 0320 	orreq.w	r3, r3, #32
  4024dc:	f108 0801 	addeq.w	r8, r8, #1
  4024e0:	f043 0310 	orrne.w	r3, r3, #16
  4024e4:	e576      	b.n	401fd4 <_vfiprintf_r+0xe4>
  4024e6:	bf00      	nop
  4024e8:	00404b48 	.word	0x00404b48
  4024ec:	00404b58 	.word	0x00404b58
  4024f0:	00404b2c 	.word	0x00404b2c
  4024f4:	00404b18 	.word	0x00404b18
  4024f8:	9907      	ldr	r1, [sp, #28]
  4024fa:	680e      	ldr	r6, [r1, #0]
  4024fc:	460a      	mov	r2, r1
  4024fe:	2e00      	cmp	r6, #0
  402500:	f102 0204 	add.w	r2, r2, #4
  402504:	f6ff ae0f 	blt.w	402126 <_vfiprintf_r+0x236>
  402508:	9207      	str	r2, [sp, #28]
  40250a:	f898 2000 	ldrb.w	r2, [r8]
  40250e:	e561      	b.n	401fd4 <_vfiprintf_r+0xe4>
  402510:	f898 2000 	ldrb.w	r2, [r8]
  402514:	2001      	movs	r0, #1
  402516:	252b      	movs	r5, #43	; 0x2b
  402518:	e55c      	b.n	401fd4 <_vfiprintf_r+0xe4>
  40251a:	9907      	ldr	r1, [sp, #28]
  40251c:	9608      	str	r6, [sp, #32]
  40251e:	f8d1 b000 	ldr.w	fp, [r1]
  402522:	f04f 0200 	mov.w	r2, #0
  402526:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40252a:	1d0e      	adds	r6, r1, #4
  40252c:	f1bb 0f00 	cmp.w	fp, #0
  402530:	f000 82e5 	beq.w	402afe <_vfiprintf_r+0xc0e>
  402534:	1c67      	adds	r7, r4, #1
  402536:	f000 82c4 	beq.w	402ac2 <_vfiprintf_r+0xbd2>
  40253a:	4622      	mov	r2, r4
  40253c:	2100      	movs	r1, #0
  40253e:	4658      	mov	r0, fp
  402540:	9301      	str	r3, [sp, #4]
  402542:	f001 fbd5 	bl	403cf0 <memchr>
  402546:	9b01      	ldr	r3, [sp, #4]
  402548:	2800      	cmp	r0, #0
  40254a:	f000 82e5 	beq.w	402b18 <_vfiprintf_r+0xc28>
  40254e:	eba0 020b 	sub.w	r2, r0, fp
  402552:	9205      	str	r2, [sp, #20]
  402554:	9607      	str	r6, [sp, #28]
  402556:	9302      	str	r3, [sp, #8]
  402558:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40255c:	2400      	movs	r4, #0
  40255e:	e619      	b.n	402194 <_vfiprintf_r+0x2a4>
  402560:	f898 2000 	ldrb.w	r2, [r8]
  402564:	2a2a      	cmp	r2, #42	; 0x2a
  402566:	f108 0701 	add.w	r7, r8, #1
  40256a:	f000 82e9 	beq.w	402b40 <_vfiprintf_r+0xc50>
  40256e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402572:	2909      	cmp	r1, #9
  402574:	46b8      	mov	r8, r7
  402576:	f04f 0400 	mov.w	r4, #0
  40257a:	f63f ad2d 	bhi.w	401fd8 <_vfiprintf_r+0xe8>
  40257e:	f818 2b01 	ldrb.w	r2, [r8], #1
  402582:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402586:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40258a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40258e:	2909      	cmp	r1, #9
  402590:	d9f5      	bls.n	40257e <_vfiprintf_r+0x68e>
  402592:	e521      	b.n	401fd8 <_vfiprintf_r+0xe8>
  402594:	f043 0320 	orr.w	r3, r3, #32
  402598:	f898 2000 	ldrb.w	r2, [r8]
  40259c:	e51a      	b.n	401fd4 <_vfiprintf_r+0xe4>
  40259e:	9608      	str	r6, [sp, #32]
  4025a0:	2800      	cmp	r0, #0
  4025a2:	f040 82db 	bne.w	402b5c <_vfiprintf_r+0xc6c>
  4025a6:	2a00      	cmp	r2, #0
  4025a8:	f000 80e7 	beq.w	40277a <_vfiprintf_r+0x88a>
  4025ac:	2101      	movs	r1, #1
  4025ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4025b2:	f04f 0200 	mov.w	r2, #0
  4025b6:	9101      	str	r1, [sp, #4]
  4025b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4025bc:	9105      	str	r1, [sp, #20]
  4025be:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4025c2:	e77b      	b.n	4024bc <_vfiprintf_r+0x5cc>
  4025c4:	9a07      	ldr	r2, [sp, #28]
  4025c6:	6813      	ldr	r3, [r2, #0]
  4025c8:	3204      	adds	r2, #4
  4025ca:	9207      	str	r2, [sp, #28]
  4025cc:	9a03      	ldr	r2, [sp, #12]
  4025ce:	601a      	str	r2, [r3, #0]
  4025d0:	e4cb      	b.n	401f6a <_vfiprintf_r+0x7a>
  4025d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4025d4:	9904      	ldr	r1, [sp, #16]
  4025d6:	4620      	mov	r0, r4
  4025d8:	f7ff fc4a 	bl	401e70 <__sprint_r.part.0>
  4025dc:	2800      	cmp	r0, #0
  4025de:	f040 8139 	bne.w	402854 <_vfiprintf_r+0x964>
  4025e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025e6:	f101 0c01 	add.w	ip, r1, #1
  4025ea:	46ce      	mov	lr, r9
  4025ec:	e5ff      	b.n	4021ee <_vfiprintf_r+0x2fe>
  4025ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025f2:	1c48      	adds	r0, r1, #1
  4025f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4025f8:	2d00      	cmp	r5, #0
  4025fa:	f43f ae22 	beq.w	402242 <_vfiprintf_r+0x352>
  4025fe:	3201      	adds	r2, #1
  402600:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402604:	2101      	movs	r1, #1
  402606:	2807      	cmp	r0, #7
  402608:	9211      	str	r2, [sp, #68]	; 0x44
  40260a:	9010      	str	r0, [sp, #64]	; 0x40
  40260c:	f8ca 5000 	str.w	r5, [sl]
  402610:	f8ca 1004 	str.w	r1, [sl, #4]
  402614:	f340 8108 	ble.w	402828 <_vfiprintf_r+0x938>
  402618:	2a00      	cmp	r2, #0
  40261a:	f040 81bc 	bne.w	402996 <_vfiprintf_r+0xaa6>
  40261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402620:	2b00      	cmp	r3, #0
  402622:	f43f ae1f 	beq.w	402264 <_vfiprintf_r+0x374>
  402626:	ab0e      	add	r3, sp, #56	; 0x38
  402628:	2202      	movs	r2, #2
  40262a:	4608      	mov	r0, r1
  40262c:	931c      	str	r3, [sp, #112]	; 0x70
  40262e:	921d      	str	r2, [sp, #116]	; 0x74
  402630:	46ca      	mov	sl, r9
  402632:	4601      	mov	r1, r0
  402634:	f10a 0a08 	add.w	sl, sl, #8
  402638:	3001      	adds	r0, #1
  40263a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40263c:	2b80      	cmp	r3, #128	; 0x80
  40263e:	f43f ae19 	beq.w	402274 <_vfiprintf_r+0x384>
  402642:	9b05      	ldr	r3, [sp, #20]
  402644:	1ae4      	subs	r4, r4, r3
  402646:	2c00      	cmp	r4, #0
  402648:	dd2e      	ble.n	4026a8 <_vfiprintf_r+0x7b8>
  40264a:	2c10      	cmp	r4, #16
  40264c:	4db3      	ldr	r5, [pc, #716]	; (40291c <_vfiprintf_r+0xa2c>)
  40264e:	dd1e      	ble.n	40268e <_vfiprintf_r+0x79e>
  402650:	46d6      	mov	lr, sl
  402652:	2610      	movs	r6, #16
  402654:	9f06      	ldr	r7, [sp, #24]
  402656:	f8dd a010 	ldr.w	sl, [sp, #16]
  40265a:	e006      	b.n	40266a <_vfiprintf_r+0x77a>
  40265c:	1c88      	adds	r0, r1, #2
  40265e:	f10e 0e08 	add.w	lr, lr, #8
  402662:	4619      	mov	r1, r3
  402664:	3c10      	subs	r4, #16
  402666:	2c10      	cmp	r4, #16
  402668:	dd10      	ble.n	40268c <_vfiprintf_r+0x79c>
  40266a:	1c4b      	adds	r3, r1, #1
  40266c:	3210      	adds	r2, #16
  40266e:	2b07      	cmp	r3, #7
  402670:	9211      	str	r2, [sp, #68]	; 0x44
  402672:	e88e 0060 	stmia.w	lr, {r5, r6}
  402676:	9310      	str	r3, [sp, #64]	; 0x40
  402678:	ddf0      	ble.n	40265c <_vfiprintf_r+0x76c>
  40267a:	2a00      	cmp	r2, #0
  40267c:	d165      	bne.n	40274a <_vfiprintf_r+0x85a>
  40267e:	3c10      	subs	r4, #16
  402680:	2c10      	cmp	r4, #16
  402682:	f04f 0001 	mov.w	r0, #1
  402686:	4611      	mov	r1, r2
  402688:	46ce      	mov	lr, r9
  40268a:	dcee      	bgt.n	40266a <_vfiprintf_r+0x77a>
  40268c:	46f2      	mov	sl, lr
  40268e:	4422      	add	r2, r4
  402690:	2807      	cmp	r0, #7
  402692:	9211      	str	r2, [sp, #68]	; 0x44
  402694:	f8ca 5000 	str.w	r5, [sl]
  402698:	f8ca 4004 	str.w	r4, [sl, #4]
  40269c:	9010      	str	r0, [sp, #64]	; 0x40
  40269e:	f300 8085 	bgt.w	4027ac <_vfiprintf_r+0x8bc>
  4026a2:	f10a 0a08 	add.w	sl, sl, #8
  4026a6:	3001      	adds	r0, #1
  4026a8:	9905      	ldr	r1, [sp, #20]
  4026aa:	f8ca b000 	str.w	fp, [sl]
  4026ae:	440a      	add	r2, r1
  4026b0:	2807      	cmp	r0, #7
  4026b2:	9211      	str	r2, [sp, #68]	; 0x44
  4026b4:	f8ca 1004 	str.w	r1, [sl, #4]
  4026b8:	9010      	str	r0, [sp, #64]	; 0x40
  4026ba:	f340 8082 	ble.w	4027c2 <_vfiprintf_r+0x8d2>
  4026be:	2a00      	cmp	r2, #0
  4026c0:	f040 8118 	bne.w	4028f4 <_vfiprintf_r+0xa04>
  4026c4:	9b02      	ldr	r3, [sp, #8]
  4026c6:	9210      	str	r2, [sp, #64]	; 0x40
  4026c8:	0758      	lsls	r0, r3, #29
  4026ca:	d535      	bpl.n	402738 <_vfiprintf_r+0x848>
  4026cc:	9b08      	ldr	r3, [sp, #32]
  4026ce:	9901      	ldr	r1, [sp, #4]
  4026d0:	1a5c      	subs	r4, r3, r1
  4026d2:	2c00      	cmp	r4, #0
  4026d4:	f340 80e7 	ble.w	4028a6 <_vfiprintf_r+0x9b6>
  4026d8:	46ca      	mov	sl, r9
  4026da:	2c10      	cmp	r4, #16
  4026dc:	f340 8218 	ble.w	402b10 <_vfiprintf_r+0xc20>
  4026e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026e2:	4e8f      	ldr	r6, [pc, #572]	; (402920 <_vfiprintf_r+0xa30>)
  4026e4:	9f06      	ldr	r7, [sp, #24]
  4026e6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4026ea:	2510      	movs	r5, #16
  4026ec:	e006      	b.n	4026fc <_vfiprintf_r+0x80c>
  4026ee:	1c88      	adds	r0, r1, #2
  4026f0:	f10a 0a08 	add.w	sl, sl, #8
  4026f4:	4619      	mov	r1, r3
  4026f6:	3c10      	subs	r4, #16
  4026f8:	2c10      	cmp	r4, #16
  4026fa:	dd11      	ble.n	402720 <_vfiprintf_r+0x830>
  4026fc:	1c4b      	adds	r3, r1, #1
  4026fe:	3210      	adds	r2, #16
  402700:	2b07      	cmp	r3, #7
  402702:	9211      	str	r2, [sp, #68]	; 0x44
  402704:	f8ca 6000 	str.w	r6, [sl]
  402708:	f8ca 5004 	str.w	r5, [sl, #4]
  40270c:	9310      	str	r3, [sp, #64]	; 0x40
  40270e:	ddee      	ble.n	4026ee <_vfiprintf_r+0x7fe>
  402710:	bb42      	cbnz	r2, 402764 <_vfiprintf_r+0x874>
  402712:	3c10      	subs	r4, #16
  402714:	2c10      	cmp	r4, #16
  402716:	f04f 0001 	mov.w	r0, #1
  40271a:	4611      	mov	r1, r2
  40271c:	46ca      	mov	sl, r9
  40271e:	dced      	bgt.n	4026fc <_vfiprintf_r+0x80c>
  402720:	4422      	add	r2, r4
  402722:	2807      	cmp	r0, #7
  402724:	9211      	str	r2, [sp, #68]	; 0x44
  402726:	f8ca 6000 	str.w	r6, [sl]
  40272a:	f8ca 4004 	str.w	r4, [sl, #4]
  40272e:	9010      	str	r0, [sp, #64]	; 0x40
  402730:	dd51      	ble.n	4027d6 <_vfiprintf_r+0x8e6>
  402732:	2a00      	cmp	r2, #0
  402734:	f040 819b 	bne.w	402a6e <_vfiprintf_r+0xb7e>
  402738:	9b03      	ldr	r3, [sp, #12]
  40273a:	9a08      	ldr	r2, [sp, #32]
  40273c:	9901      	ldr	r1, [sp, #4]
  40273e:	428a      	cmp	r2, r1
  402740:	bfac      	ite	ge
  402742:	189b      	addge	r3, r3, r2
  402744:	185b      	addlt	r3, r3, r1
  402746:	9303      	str	r3, [sp, #12]
  402748:	e04e      	b.n	4027e8 <_vfiprintf_r+0x8f8>
  40274a:	aa0f      	add	r2, sp, #60	; 0x3c
  40274c:	4651      	mov	r1, sl
  40274e:	4638      	mov	r0, r7
  402750:	f7ff fb8e 	bl	401e70 <__sprint_r.part.0>
  402754:	2800      	cmp	r0, #0
  402756:	f040 813f 	bne.w	4029d8 <_vfiprintf_r+0xae8>
  40275a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40275c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40275e:	1c48      	adds	r0, r1, #1
  402760:	46ce      	mov	lr, r9
  402762:	e77f      	b.n	402664 <_vfiprintf_r+0x774>
  402764:	aa0f      	add	r2, sp, #60	; 0x3c
  402766:	4659      	mov	r1, fp
  402768:	4638      	mov	r0, r7
  40276a:	f7ff fb81 	bl	401e70 <__sprint_r.part.0>
  40276e:	b960      	cbnz	r0, 40278a <_vfiprintf_r+0x89a>
  402770:	9910      	ldr	r1, [sp, #64]	; 0x40
  402772:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402774:	1c48      	adds	r0, r1, #1
  402776:	46ca      	mov	sl, r9
  402778:	e7bd      	b.n	4026f6 <_vfiprintf_r+0x806>
  40277a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40277c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402780:	2b00      	cmp	r3, #0
  402782:	f040 81d4 	bne.w	402b2e <_vfiprintf_r+0xc3e>
  402786:	2300      	movs	r3, #0
  402788:	9310      	str	r3, [sp, #64]	; 0x40
  40278a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40278e:	f013 0f01 	tst.w	r3, #1
  402792:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402796:	d102      	bne.n	40279e <_vfiprintf_r+0x8ae>
  402798:	059a      	lsls	r2, r3, #22
  40279a:	f140 80de 	bpl.w	40295a <_vfiprintf_r+0xa6a>
  40279e:	065b      	lsls	r3, r3, #25
  4027a0:	f53f acb2 	bmi.w	402108 <_vfiprintf_r+0x218>
  4027a4:	9803      	ldr	r0, [sp, #12]
  4027a6:	b02d      	add	sp, #180	; 0xb4
  4027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027ac:	2a00      	cmp	r2, #0
  4027ae:	f040 8106 	bne.w	4029be <_vfiprintf_r+0xace>
  4027b2:	9a05      	ldr	r2, [sp, #20]
  4027b4:	921d      	str	r2, [sp, #116]	; 0x74
  4027b6:	2301      	movs	r3, #1
  4027b8:	9211      	str	r2, [sp, #68]	; 0x44
  4027ba:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4027be:	9310      	str	r3, [sp, #64]	; 0x40
  4027c0:	46ca      	mov	sl, r9
  4027c2:	f10a 0a08 	add.w	sl, sl, #8
  4027c6:	9b02      	ldr	r3, [sp, #8]
  4027c8:	0759      	lsls	r1, r3, #29
  4027ca:	d504      	bpl.n	4027d6 <_vfiprintf_r+0x8e6>
  4027cc:	9b08      	ldr	r3, [sp, #32]
  4027ce:	9901      	ldr	r1, [sp, #4]
  4027d0:	1a5c      	subs	r4, r3, r1
  4027d2:	2c00      	cmp	r4, #0
  4027d4:	dc81      	bgt.n	4026da <_vfiprintf_r+0x7ea>
  4027d6:	9b03      	ldr	r3, [sp, #12]
  4027d8:	9908      	ldr	r1, [sp, #32]
  4027da:	9801      	ldr	r0, [sp, #4]
  4027dc:	4281      	cmp	r1, r0
  4027de:	bfac      	ite	ge
  4027e0:	185b      	addge	r3, r3, r1
  4027e2:	181b      	addlt	r3, r3, r0
  4027e4:	9303      	str	r3, [sp, #12]
  4027e6:	bb72      	cbnz	r2, 402846 <_vfiprintf_r+0x956>
  4027e8:	2300      	movs	r3, #0
  4027ea:	9310      	str	r3, [sp, #64]	; 0x40
  4027ec:	46ca      	mov	sl, r9
  4027ee:	f7ff bbbc 	b.w	401f6a <_vfiprintf_r+0x7a>
  4027f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4027f4:	9904      	ldr	r1, [sp, #16]
  4027f6:	4620      	mov	r0, r4
  4027f8:	f7ff fb3a 	bl	401e70 <__sprint_r.part.0>
  4027fc:	bb50      	cbnz	r0, 402854 <_vfiprintf_r+0x964>
  4027fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  402800:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402802:	f101 0e01 	add.w	lr, r1, #1
  402806:	46cc      	mov	ip, r9
  402808:	e548      	b.n	40229c <_vfiprintf_r+0x3ac>
  40280a:	2a00      	cmp	r2, #0
  40280c:	f040 8140 	bne.w	402a90 <_vfiprintf_r+0xba0>
  402810:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402814:	2900      	cmp	r1, #0
  402816:	f000 811b 	beq.w	402a50 <_vfiprintf_r+0xb60>
  40281a:	2201      	movs	r2, #1
  40281c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402820:	4610      	mov	r0, r2
  402822:	921d      	str	r2, [sp, #116]	; 0x74
  402824:	911c      	str	r1, [sp, #112]	; 0x70
  402826:	46ca      	mov	sl, r9
  402828:	4601      	mov	r1, r0
  40282a:	f10a 0a08 	add.w	sl, sl, #8
  40282e:	3001      	adds	r0, #1
  402830:	e507      	b.n	402242 <_vfiprintf_r+0x352>
  402832:	9b02      	ldr	r3, [sp, #8]
  402834:	2a01      	cmp	r2, #1
  402836:	f000 8098 	beq.w	40296a <_vfiprintf_r+0xa7a>
  40283a:	2a02      	cmp	r2, #2
  40283c:	d10d      	bne.n	40285a <_vfiprintf_r+0x96a>
  40283e:	9302      	str	r3, [sp, #8]
  402840:	2600      	movs	r6, #0
  402842:	2700      	movs	r7, #0
  402844:	e5b0      	b.n	4023a8 <_vfiprintf_r+0x4b8>
  402846:	aa0f      	add	r2, sp, #60	; 0x3c
  402848:	9904      	ldr	r1, [sp, #16]
  40284a:	9806      	ldr	r0, [sp, #24]
  40284c:	f7ff fb10 	bl	401e70 <__sprint_r.part.0>
  402850:	2800      	cmp	r0, #0
  402852:	d0c9      	beq.n	4027e8 <_vfiprintf_r+0x8f8>
  402854:	f8dd b010 	ldr.w	fp, [sp, #16]
  402858:	e797      	b.n	40278a <_vfiprintf_r+0x89a>
  40285a:	9302      	str	r3, [sp, #8]
  40285c:	2600      	movs	r6, #0
  40285e:	2700      	movs	r7, #0
  402860:	4649      	mov	r1, r9
  402862:	e000      	b.n	402866 <_vfiprintf_r+0x976>
  402864:	4659      	mov	r1, fp
  402866:	08f2      	lsrs	r2, r6, #3
  402868:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40286c:	08f8      	lsrs	r0, r7, #3
  40286e:	f006 0307 	and.w	r3, r6, #7
  402872:	4607      	mov	r7, r0
  402874:	4616      	mov	r6, r2
  402876:	3330      	adds	r3, #48	; 0x30
  402878:	ea56 0207 	orrs.w	r2, r6, r7
  40287c:	f801 3c01 	strb.w	r3, [r1, #-1]
  402880:	f101 3bff 	add.w	fp, r1, #4294967295
  402884:	d1ee      	bne.n	402864 <_vfiprintf_r+0x974>
  402886:	9a02      	ldr	r2, [sp, #8]
  402888:	07d6      	lsls	r6, r2, #31
  40288a:	f57f ad9d 	bpl.w	4023c8 <_vfiprintf_r+0x4d8>
  40288e:	2b30      	cmp	r3, #48	; 0x30
  402890:	f43f ad9a 	beq.w	4023c8 <_vfiprintf_r+0x4d8>
  402894:	3902      	subs	r1, #2
  402896:	2330      	movs	r3, #48	; 0x30
  402898:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40289c:	eba9 0301 	sub.w	r3, r9, r1
  4028a0:	9305      	str	r3, [sp, #20]
  4028a2:	468b      	mov	fp, r1
  4028a4:	e476      	b.n	402194 <_vfiprintf_r+0x2a4>
  4028a6:	9b03      	ldr	r3, [sp, #12]
  4028a8:	9a08      	ldr	r2, [sp, #32]
  4028aa:	428a      	cmp	r2, r1
  4028ac:	bfac      	ite	ge
  4028ae:	189b      	addge	r3, r3, r2
  4028b0:	185b      	addlt	r3, r3, r1
  4028b2:	9303      	str	r3, [sp, #12]
  4028b4:	e798      	b.n	4027e8 <_vfiprintf_r+0x8f8>
  4028b6:	2202      	movs	r2, #2
  4028b8:	e44d      	b.n	402156 <_vfiprintf_r+0x266>
  4028ba:	2f00      	cmp	r7, #0
  4028bc:	bf08      	it	eq
  4028be:	2e0a      	cmpeq	r6, #10
  4028c0:	d352      	bcc.n	402968 <_vfiprintf_r+0xa78>
  4028c2:	46cb      	mov	fp, r9
  4028c4:	4630      	mov	r0, r6
  4028c6:	4639      	mov	r1, r7
  4028c8:	220a      	movs	r2, #10
  4028ca:	2300      	movs	r3, #0
  4028cc:	f001 ff14 	bl	4046f8 <__aeabi_uldivmod>
  4028d0:	3230      	adds	r2, #48	; 0x30
  4028d2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4028d6:	4630      	mov	r0, r6
  4028d8:	4639      	mov	r1, r7
  4028da:	2300      	movs	r3, #0
  4028dc:	220a      	movs	r2, #10
  4028de:	f001 ff0b 	bl	4046f8 <__aeabi_uldivmod>
  4028e2:	4606      	mov	r6, r0
  4028e4:	460f      	mov	r7, r1
  4028e6:	ea56 0307 	orrs.w	r3, r6, r7
  4028ea:	d1eb      	bne.n	4028c4 <_vfiprintf_r+0x9d4>
  4028ec:	e56c      	b.n	4023c8 <_vfiprintf_r+0x4d8>
  4028ee:	9405      	str	r4, [sp, #20]
  4028f0:	46cb      	mov	fp, r9
  4028f2:	e44f      	b.n	402194 <_vfiprintf_r+0x2a4>
  4028f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4028f6:	9904      	ldr	r1, [sp, #16]
  4028f8:	9806      	ldr	r0, [sp, #24]
  4028fa:	f7ff fab9 	bl	401e70 <__sprint_r.part.0>
  4028fe:	2800      	cmp	r0, #0
  402900:	d1a8      	bne.n	402854 <_vfiprintf_r+0x964>
  402902:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402904:	46ca      	mov	sl, r9
  402906:	e75e      	b.n	4027c6 <_vfiprintf_r+0x8d6>
  402908:	aa0f      	add	r2, sp, #60	; 0x3c
  40290a:	9904      	ldr	r1, [sp, #16]
  40290c:	9806      	ldr	r0, [sp, #24]
  40290e:	f7ff faaf 	bl	401e70 <__sprint_r.part.0>
  402912:	2800      	cmp	r0, #0
  402914:	d19e      	bne.n	402854 <_vfiprintf_r+0x964>
  402916:	46ca      	mov	sl, r9
  402918:	f7ff bbc0 	b.w	40209c <_vfiprintf_r+0x1ac>
  40291c:	00404b58 	.word	0x00404b58
  402920:	00404b48 	.word	0x00404b48
  402924:	3104      	adds	r1, #4
  402926:	6816      	ldr	r6, [r2, #0]
  402928:	9107      	str	r1, [sp, #28]
  40292a:	2201      	movs	r2, #1
  40292c:	2700      	movs	r7, #0
  40292e:	e412      	b.n	402156 <_vfiprintf_r+0x266>
  402930:	9807      	ldr	r0, [sp, #28]
  402932:	4601      	mov	r1, r0
  402934:	3104      	adds	r1, #4
  402936:	6806      	ldr	r6, [r0, #0]
  402938:	9107      	str	r1, [sp, #28]
  40293a:	2700      	movs	r7, #0
  40293c:	e40b      	b.n	402156 <_vfiprintf_r+0x266>
  40293e:	680e      	ldr	r6, [r1, #0]
  402940:	3104      	adds	r1, #4
  402942:	9107      	str	r1, [sp, #28]
  402944:	2700      	movs	r7, #0
  402946:	e591      	b.n	40246c <_vfiprintf_r+0x57c>
  402948:	9907      	ldr	r1, [sp, #28]
  40294a:	680e      	ldr	r6, [r1, #0]
  40294c:	460a      	mov	r2, r1
  40294e:	17f7      	asrs	r7, r6, #31
  402950:	3204      	adds	r2, #4
  402952:	9207      	str	r2, [sp, #28]
  402954:	4630      	mov	r0, r6
  402956:	4639      	mov	r1, r7
  402958:	e50f      	b.n	40237a <_vfiprintf_r+0x48a>
  40295a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40295e:	f000 fe7f 	bl	403660 <__retarget_lock_release_recursive>
  402962:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402966:	e71a      	b.n	40279e <_vfiprintf_r+0x8ae>
  402968:	9b02      	ldr	r3, [sp, #8]
  40296a:	9302      	str	r3, [sp, #8]
  40296c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402970:	3630      	adds	r6, #48	; 0x30
  402972:	2301      	movs	r3, #1
  402974:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402978:	9305      	str	r3, [sp, #20]
  40297a:	e40b      	b.n	402194 <_vfiprintf_r+0x2a4>
  40297c:	aa0f      	add	r2, sp, #60	; 0x3c
  40297e:	9904      	ldr	r1, [sp, #16]
  402980:	9806      	ldr	r0, [sp, #24]
  402982:	f7ff fa75 	bl	401e70 <__sprint_r.part.0>
  402986:	2800      	cmp	r0, #0
  402988:	f47f af64 	bne.w	402854 <_vfiprintf_r+0x964>
  40298c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40298e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402990:	1c48      	adds	r0, r1, #1
  402992:	46ca      	mov	sl, r9
  402994:	e651      	b.n	40263a <_vfiprintf_r+0x74a>
  402996:	aa0f      	add	r2, sp, #60	; 0x3c
  402998:	9904      	ldr	r1, [sp, #16]
  40299a:	9806      	ldr	r0, [sp, #24]
  40299c:	f7ff fa68 	bl	401e70 <__sprint_r.part.0>
  4029a0:	2800      	cmp	r0, #0
  4029a2:	f47f af57 	bne.w	402854 <_vfiprintf_r+0x964>
  4029a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4029a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029aa:	1c48      	adds	r0, r1, #1
  4029ac:	46ca      	mov	sl, r9
  4029ae:	e448      	b.n	402242 <_vfiprintf_r+0x352>
  4029b0:	2a00      	cmp	r2, #0
  4029b2:	f040 8091 	bne.w	402ad8 <_vfiprintf_r+0xbe8>
  4029b6:	2001      	movs	r0, #1
  4029b8:	4611      	mov	r1, r2
  4029ba:	46ca      	mov	sl, r9
  4029bc:	e641      	b.n	402642 <_vfiprintf_r+0x752>
  4029be:	aa0f      	add	r2, sp, #60	; 0x3c
  4029c0:	9904      	ldr	r1, [sp, #16]
  4029c2:	9806      	ldr	r0, [sp, #24]
  4029c4:	f7ff fa54 	bl	401e70 <__sprint_r.part.0>
  4029c8:	2800      	cmp	r0, #0
  4029ca:	f47f af43 	bne.w	402854 <_vfiprintf_r+0x964>
  4029ce:	9810      	ldr	r0, [sp, #64]	; 0x40
  4029d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029d2:	3001      	adds	r0, #1
  4029d4:	46ca      	mov	sl, r9
  4029d6:	e667      	b.n	4026a8 <_vfiprintf_r+0x7b8>
  4029d8:	46d3      	mov	fp, sl
  4029da:	e6d6      	b.n	40278a <_vfiprintf_r+0x89a>
  4029dc:	9e07      	ldr	r6, [sp, #28]
  4029de:	3607      	adds	r6, #7
  4029e0:	f026 0207 	bic.w	r2, r6, #7
  4029e4:	f102 0108 	add.w	r1, r2, #8
  4029e8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4029ec:	9107      	str	r1, [sp, #28]
  4029ee:	2201      	movs	r2, #1
  4029f0:	f7ff bbb1 	b.w	402156 <_vfiprintf_r+0x266>
  4029f4:	9e07      	ldr	r6, [sp, #28]
  4029f6:	3607      	adds	r6, #7
  4029f8:	f026 0607 	bic.w	r6, r6, #7
  4029fc:	e9d6 0100 	ldrd	r0, r1, [r6]
  402a00:	f106 0208 	add.w	r2, r6, #8
  402a04:	9207      	str	r2, [sp, #28]
  402a06:	4606      	mov	r6, r0
  402a08:	460f      	mov	r7, r1
  402a0a:	e4b6      	b.n	40237a <_vfiprintf_r+0x48a>
  402a0c:	9e07      	ldr	r6, [sp, #28]
  402a0e:	3607      	adds	r6, #7
  402a10:	f026 0207 	bic.w	r2, r6, #7
  402a14:	f102 0108 	add.w	r1, r2, #8
  402a18:	e9d2 6700 	ldrd	r6, r7, [r2]
  402a1c:	9107      	str	r1, [sp, #28]
  402a1e:	2200      	movs	r2, #0
  402a20:	f7ff bb99 	b.w	402156 <_vfiprintf_r+0x266>
  402a24:	9e07      	ldr	r6, [sp, #28]
  402a26:	3607      	adds	r6, #7
  402a28:	f026 0107 	bic.w	r1, r6, #7
  402a2c:	f101 0008 	add.w	r0, r1, #8
  402a30:	9007      	str	r0, [sp, #28]
  402a32:	e9d1 6700 	ldrd	r6, r7, [r1]
  402a36:	e519      	b.n	40246c <_vfiprintf_r+0x57c>
  402a38:	46cb      	mov	fp, r9
  402a3a:	f7ff bbab 	b.w	402194 <_vfiprintf_r+0x2a4>
  402a3e:	252d      	movs	r5, #45	; 0x2d
  402a40:	4276      	negs	r6, r6
  402a42:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402a46:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a4a:	2201      	movs	r2, #1
  402a4c:	f7ff bb88 	b.w	402160 <_vfiprintf_r+0x270>
  402a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a52:	b9b3      	cbnz	r3, 402a82 <_vfiprintf_r+0xb92>
  402a54:	4611      	mov	r1, r2
  402a56:	2001      	movs	r0, #1
  402a58:	46ca      	mov	sl, r9
  402a5a:	e5f2      	b.n	402642 <_vfiprintf_r+0x752>
  402a5c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402a60:	f000 fdfe 	bl	403660 <__retarget_lock_release_recursive>
  402a64:	f04f 33ff 	mov.w	r3, #4294967295
  402a68:	9303      	str	r3, [sp, #12]
  402a6a:	f7ff bb50 	b.w	40210e <_vfiprintf_r+0x21e>
  402a6e:	aa0f      	add	r2, sp, #60	; 0x3c
  402a70:	9904      	ldr	r1, [sp, #16]
  402a72:	9806      	ldr	r0, [sp, #24]
  402a74:	f7ff f9fc 	bl	401e70 <__sprint_r.part.0>
  402a78:	2800      	cmp	r0, #0
  402a7a:	f47f aeeb 	bne.w	402854 <_vfiprintf_r+0x964>
  402a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a80:	e6a9      	b.n	4027d6 <_vfiprintf_r+0x8e6>
  402a82:	ab0e      	add	r3, sp, #56	; 0x38
  402a84:	2202      	movs	r2, #2
  402a86:	931c      	str	r3, [sp, #112]	; 0x70
  402a88:	921d      	str	r2, [sp, #116]	; 0x74
  402a8a:	2001      	movs	r0, #1
  402a8c:	46ca      	mov	sl, r9
  402a8e:	e5d0      	b.n	402632 <_vfiprintf_r+0x742>
  402a90:	aa0f      	add	r2, sp, #60	; 0x3c
  402a92:	9904      	ldr	r1, [sp, #16]
  402a94:	9806      	ldr	r0, [sp, #24]
  402a96:	f7ff f9eb 	bl	401e70 <__sprint_r.part.0>
  402a9a:	2800      	cmp	r0, #0
  402a9c:	f47f aeda 	bne.w	402854 <_vfiprintf_r+0x964>
  402aa0:	9910      	ldr	r1, [sp, #64]	; 0x40
  402aa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aa4:	1c48      	adds	r0, r1, #1
  402aa6:	46ca      	mov	sl, r9
  402aa8:	e5a4      	b.n	4025f4 <_vfiprintf_r+0x704>
  402aaa:	9a07      	ldr	r2, [sp, #28]
  402aac:	9903      	ldr	r1, [sp, #12]
  402aae:	6813      	ldr	r3, [r2, #0]
  402ab0:	17cd      	asrs	r5, r1, #31
  402ab2:	4608      	mov	r0, r1
  402ab4:	3204      	adds	r2, #4
  402ab6:	4629      	mov	r1, r5
  402ab8:	9207      	str	r2, [sp, #28]
  402aba:	e9c3 0100 	strd	r0, r1, [r3]
  402abe:	f7ff ba54 	b.w	401f6a <_vfiprintf_r+0x7a>
  402ac2:	4658      	mov	r0, fp
  402ac4:	9607      	str	r6, [sp, #28]
  402ac6:	9302      	str	r3, [sp, #8]
  402ac8:	f001 fbda 	bl	404280 <strlen>
  402acc:	2400      	movs	r4, #0
  402ace:	9005      	str	r0, [sp, #20]
  402ad0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402ad4:	f7ff bb5e 	b.w	402194 <_vfiprintf_r+0x2a4>
  402ad8:	aa0f      	add	r2, sp, #60	; 0x3c
  402ada:	9904      	ldr	r1, [sp, #16]
  402adc:	9806      	ldr	r0, [sp, #24]
  402ade:	f7ff f9c7 	bl	401e70 <__sprint_r.part.0>
  402ae2:	2800      	cmp	r0, #0
  402ae4:	f47f aeb6 	bne.w	402854 <_vfiprintf_r+0x964>
  402ae8:	9910      	ldr	r1, [sp, #64]	; 0x40
  402aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aec:	1c48      	adds	r0, r1, #1
  402aee:	46ca      	mov	sl, r9
  402af0:	e5a7      	b.n	402642 <_vfiprintf_r+0x752>
  402af2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402af4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402af6:	4e20      	ldr	r6, [pc, #128]	; (402b78 <_vfiprintf_r+0xc88>)
  402af8:	3101      	adds	r1, #1
  402afa:	f7ff bb90 	b.w	40221e <_vfiprintf_r+0x32e>
  402afe:	2c06      	cmp	r4, #6
  402b00:	bf28      	it	cs
  402b02:	2406      	movcs	r4, #6
  402b04:	9405      	str	r4, [sp, #20]
  402b06:	9607      	str	r6, [sp, #28]
  402b08:	9401      	str	r4, [sp, #4]
  402b0a:	f8df b070 	ldr.w	fp, [pc, #112]	; 402b7c <_vfiprintf_r+0xc8c>
  402b0e:	e4d5      	b.n	4024bc <_vfiprintf_r+0x5cc>
  402b10:	9810      	ldr	r0, [sp, #64]	; 0x40
  402b12:	4e19      	ldr	r6, [pc, #100]	; (402b78 <_vfiprintf_r+0xc88>)
  402b14:	3001      	adds	r0, #1
  402b16:	e603      	b.n	402720 <_vfiprintf_r+0x830>
  402b18:	9405      	str	r4, [sp, #20]
  402b1a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402b1e:	9607      	str	r6, [sp, #28]
  402b20:	9302      	str	r3, [sp, #8]
  402b22:	4604      	mov	r4, r0
  402b24:	f7ff bb36 	b.w	402194 <_vfiprintf_r+0x2a4>
  402b28:	4686      	mov	lr, r0
  402b2a:	f7ff bbce 	b.w	4022ca <_vfiprintf_r+0x3da>
  402b2e:	9806      	ldr	r0, [sp, #24]
  402b30:	aa0f      	add	r2, sp, #60	; 0x3c
  402b32:	4659      	mov	r1, fp
  402b34:	f7ff f99c 	bl	401e70 <__sprint_r.part.0>
  402b38:	2800      	cmp	r0, #0
  402b3a:	f43f ae24 	beq.w	402786 <_vfiprintf_r+0x896>
  402b3e:	e624      	b.n	40278a <_vfiprintf_r+0x89a>
  402b40:	9907      	ldr	r1, [sp, #28]
  402b42:	f898 2001 	ldrb.w	r2, [r8, #1]
  402b46:	680c      	ldr	r4, [r1, #0]
  402b48:	3104      	adds	r1, #4
  402b4a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402b4e:	46b8      	mov	r8, r7
  402b50:	9107      	str	r1, [sp, #28]
  402b52:	f7ff ba3f 	b.w	401fd4 <_vfiprintf_r+0xe4>
  402b56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b5a:	e43c      	b.n	4023d6 <_vfiprintf_r+0x4e6>
  402b5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b60:	e521      	b.n	4025a6 <_vfiprintf_r+0x6b6>
  402b62:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b66:	f7ff bbf4 	b.w	402352 <_vfiprintf_r+0x462>
  402b6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b6e:	e491      	b.n	402494 <_vfiprintf_r+0x5a4>
  402b70:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402b74:	e469      	b.n	40244a <_vfiprintf_r+0x55a>
  402b76:	bf00      	nop
  402b78:	00404b48 	.word	0x00404b48
  402b7c:	00404b40 	.word	0x00404b40

00402b80 <__sbprintf>:
  402b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b84:	460c      	mov	r4, r1
  402b86:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402b8a:	8989      	ldrh	r1, [r1, #12]
  402b8c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402b8e:	89e5      	ldrh	r5, [r4, #14]
  402b90:	9619      	str	r6, [sp, #100]	; 0x64
  402b92:	f021 0102 	bic.w	r1, r1, #2
  402b96:	4606      	mov	r6, r0
  402b98:	69e0      	ldr	r0, [r4, #28]
  402b9a:	f8ad 100c 	strh.w	r1, [sp, #12]
  402b9e:	4617      	mov	r7, r2
  402ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402ba6:	f8ad 500e 	strh.w	r5, [sp, #14]
  402baa:	4698      	mov	r8, r3
  402bac:	ad1a      	add	r5, sp, #104	; 0x68
  402bae:	2300      	movs	r3, #0
  402bb0:	9007      	str	r0, [sp, #28]
  402bb2:	a816      	add	r0, sp, #88	; 0x58
  402bb4:	9209      	str	r2, [sp, #36]	; 0x24
  402bb6:	9306      	str	r3, [sp, #24]
  402bb8:	9500      	str	r5, [sp, #0]
  402bba:	9504      	str	r5, [sp, #16]
  402bbc:	9102      	str	r1, [sp, #8]
  402bbe:	9105      	str	r1, [sp, #20]
  402bc0:	f000 fd48 	bl	403654 <__retarget_lock_init_recursive>
  402bc4:	4643      	mov	r3, r8
  402bc6:	463a      	mov	r2, r7
  402bc8:	4669      	mov	r1, sp
  402bca:	4630      	mov	r0, r6
  402bcc:	f7ff f990 	bl	401ef0 <_vfiprintf_r>
  402bd0:	1e05      	subs	r5, r0, #0
  402bd2:	db07      	blt.n	402be4 <__sbprintf+0x64>
  402bd4:	4630      	mov	r0, r6
  402bd6:	4669      	mov	r1, sp
  402bd8:	f000 f928 	bl	402e2c <_fflush_r>
  402bdc:	2800      	cmp	r0, #0
  402bde:	bf18      	it	ne
  402be0:	f04f 35ff 	movne.w	r5, #4294967295
  402be4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402be8:	065b      	lsls	r3, r3, #25
  402bea:	d503      	bpl.n	402bf4 <__sbprintf+0x74>
  402bec:	89a3      	ldrh	r3, [r4, #12]
  402bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bf2:	81a3      	strh	r3, [r4, #12]
  402bf4:	9816      	ldr	r0, [sp, #88]	; 0x58
  402bf6:	f000 fd2f 	bl	403658 <__retarget_lock_close_recursive>
  402bfa:	4628      	mov	r0, r5
  402bfc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402c04 <__swsetup_r>:
  402c04:	b538      	push	{r3, r4, r5, lr}
  402c06:	4b30      	ldr	r3, [pc, #192]	; (402cc8 <__swsetup_r+0xc4>)
  402c08:	681b      	ldr	r3, [r3, #0]
  402c0a:	4605      	mov	r5, r0
  402c0c:	460c      	mov	r4, r1
  402c0e:	b113      	cbz	r3, 402c16 <__swsetup_r+0x12>
  402c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402c12:	2a00      	cmp	r2, #0
  402c14:	d038      	beq.n	402c88 <__swsetup_r+0x84>
  402c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402c1a:	b293      	uxth	r3, r2
  402c1c:	0718      	lsls	r0, r3, #28
  402c1e:	d50c      	bpl.n	402c3a <__swsetup_r+0x36>
  402c20:	6920      	ldr	r0, [r4, #16]
  402c22:	b1a8      	cbz	r0, 402c50 <__swsetup_r+0x4c>
  402c24:	f013 0201 	ands.w	r2, r3, #1
  402c28:	d01e      	beq.n	402c68 <__swsetup_r+0x64>
  402c2a:	6963      	ldr	r3, [r4, #20]
  402c2c:	2200      	movs	r2, #0
  402c2e:	425b      	negs	r3, r3
  402c30:	61a3      	str	r3, [r4, #24]
  402c32:	60a2      	str	r2, [r4, #8]
  402c34:	b1f0      	cbz	r0, 402c74 <__swsetup_r+0x70>
  402c36:	2000      	movs	r0, #0
  402c38:	bd38      	pop	{r3, r4, r5, pc}
  402c3a:	06d9      	lsls	r1, r3, #27
  402c3c:	d53c      	bpl.n	402cb8 <__swsetup_r+0xb4>
  402c3e:	0758      	lsls	r0, r3, #29
  402c40:	d426      	bmi.n	402c90 <__swsetup_r+0x8c>
  402c42:	6920      	ldr	r0, [r4, #16]
  402c44:	f042 0308 	orr.w	r3, r2, #8
  402c48:	81a3      	strh	r3, [r4, #12]
  402c4a:	b29b      	uxth	r3, r3
  402c4c:	2800      	cmp	r0, #0
  402c4e:	d1e9      	bne.n	402c24 <__swsetup_r+0x20>
  402c50:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402c54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402c58:	d0e4      	beq.n	402c24 <__swsetup_r+0x20>
  402c5a:	4628      	mov	r0, r5
  402c5c:	4621      	mov	r1, r4
  402c5e:	f000 fd2f 	bl	4036c0 <__smakebuf_r>
  402c62:	89a3      	ldrh	r3, [r4, #12]
  402c64:	6920      	ldr	r0, [r4, #16]
  402c66:	e7dd      	b.n	402c24 <__swsetup_r+0x20>
  402c68:	0799      	lsls	r1, r3, #30
  402c6a:	bf58      	it	pl
  402c6c:	6962      	ldrpl	r2, [r4, #20]
  402c6e:	60a2      	str	r2, [r4, #8]
  402c70:	2800      	cmp	r0, #0
  402c72:	d1e0      	bne.n	402c36 <__swsetup_r+0x32>
  402c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c78:	061a      	lsls	r2, r3, #24
  402c7a:	d5dd      	bpl.n	402c38 <__swsetup_r+0x34>
  402c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c80:	81a3      	strh	r3, [r4, #12]
  402c82:	f04f 30ff 	mov.w	r0, #4294967295
  402c86:	bd38      	pop	{r3, r4, r5, pc}
  402c88:	4618      	mov	r0, r3
  402c8a:	f000 f927 	bl	402edc <__sinit>
  402c8e:	e7c2      	b.n	402c16 <__swsetup_r+0x12>
  402c90:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c92:	b151      	cbz	r1, 402caa <__swsetup_r+0xa6>
  402c94:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c98:	4299      	cmp	r1, r3
  402c9a:	d004      	beq.n	402ca6 <__swsetup_r+0xa2>
  402c9c:	4628      	mov	r0, r5
  402c9e:	f000 fa43 	bl	403128 <_free_r>
  402ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ca6:	2300      	movs	r3, #0
  402ca8:	6323      	str	r3, [r4, #48]	; 0x30
  402caa:	2300      	movs	r3, #0
  402cac:	6920      	ldr	r0, [r4, #16]
  402cae:	6063      	str	r3, [r4, #4]
  402cb0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402cb4:	6020      	str	r0, [r4, #0]
  402cb6:	e7c5      	b.n	402c44 <__swsetup_r+0x40>
  402cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402cbc:	2309      	movs	r3, #9
  402cbe:	602b      	str	r3, [r5, #0]
  402cc0:	f04f 30ff 	mov.w	r0, #4294967295
  402cc4:	81a2      	strh	r2, [r4, #12]
  402cc6:	bd38      	pop	{r3, r4, r5, pc}
  402cc8:	20400008 	.word	0x20400008

00402ccc <register_fini>:
  402ccc:	4b02      	ldr	r3, [pc, #8]	; (402cd8 <register_fini+0xc>)
  402cce:	b113      	cbz	r3, 402cd6 <register_fini+0xa>
  402cd0:	4802      	ldr	r0, [pc, #8]	; (402cdc <register_fini+0x10>)
  402cd2:	f000 b805 	b.w	402ce0 <atexit>
  402cd6:	4770      	bx	lr
  402cd8:	00000000 	.word	0x00000000
  402cdc:	00402f4d 	.word	0x00402f4d

00402ce0 <atexit>:
  402ce0:	2300      	movs	r3, #0
  402ce2:	4601      	mov	r1, r0
  402ce4:	461a      	mov	r2, r3
  402ce6:	4618      	mov	r0, r3
  402ce8:	f001 bbde 	b.w	4044a8 <__register_exitproc>

00402cec <__sflush_r>:
  402cec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402cf0:	b29a      	uxth	r2, r3
  402cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cf6:	460d      	mov	r5, r1
  402cf8:	0711      	lsls	r1, r2, #28
  402cfa:	4680      	mov	r8, r0
  402cfc:	d43a      	bmi.n	402d74 <__sflush_r+0x88>
  402cfe:	686a      	ldr	r2, [r5, #4]
  402d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402d04:	2a00      	cmp	r2, #0
  402d06:	81ab      	strh	r3, [r5, #12]
  402d08:	dd6f      	ble.n	402dea <__sflush_r+0xfe>
  402d0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402d0c:	2c00      	cmp	r4, #0
  402d0e:	d049      	beq.n	402da4 <__sflush_r+0xb8>
  402d10:	2200      	movs	r2, #0
  402d12:	b29b      	uxth	r3, r3
  402d14:	f8d8 6000 	ldr.w	r6, [r8]
  402d18:	f8c8 2000 	str.w	r2, [r8]
  402d1c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402d20:	d067      	beq.n	402df2 <__sflush_r+0x106>
  402d22:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402d24:	075f      	lsls	r7, r3, #29
  402d26:	d505      	bpl.n	402d34 <__sflush_r+0x48>
  402d28:	6869      	ldr	r1, [r5, #4]
  402d2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402d2c:	1a52      	subs	r2, r2, r1
  402d2e:	b10b      	cbz	r3, 402d34 <__sflush_r+0x48>
  402d30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402d32:	1ad2      	subs	r2, r2, r3
  402d34:	2300      	movs	r3, #0
  402d36:	69e9      	ldr	r1, [r5, #28]
  402d38:	4640      	mov	r0, r8
  402d3a:	47a0      	blx	r4
  402d3c:	1c44      	adds	r4, r0, #1
  402d3e:	d03c      	beq.n	402dba <__sflush_r+0xce>
  402d40:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402d44:	692a      	ldr	r2, [r5, #16]
  402d46:	602a      	str	r2, [r5, #0]
  402d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402d4c:	2200      	movs	r2, #0
  402d4e:	81ab      	strh	r3, [r5, #12]
  402d50:	04db      	lsls	r3, r3, #19
  402d52:	606a      	str	r2, [r5, #4]
  402d54:	d447      	bmi.n	402de6 <__sflush_r+0xfa>
  402d56:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402d58:	f8c8 6000 	str.w	r6, [r8]
  402d5c:	b311      	cbz	r1, 402da4 <__sflush_r+0xb8>
  402d5e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402d62:	4299      	cmp	r1, r3
  402d64:	d002      	beq.n	402d6c <__sflush_r+0x80>
  402d66:	4640      	mov	r0, r8
  402d68:	f000 f9de 	bl	403128 <_free_r>
  402d6c:	2000      	movs	r0, #0
  402d6e:	6328      	str	r0, [r5, #48]	; 0x30
  402d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d74:	692e      	ldr	r6, [r5, #16]
  402d76:	b1ae      	cbz	r6, 402da4 <__sflush_r+0xb8>
  402d78:	682c      	ldr	r4, [r5, #0]
  402d7a:	602e      	str	r6, [r5, #0]
  402d7c:	0791      	lsls	r1, r2, #30
  402d7e:	bf0c      	ite	eq
  402d80:	696b      	ldreq	r3, [r5, #20]
  402d82:	2300      	movne	r3, #0
  402d84:	1ba4      	subs	r4, r4, r6
  402d86:	60ab      	str	r3, [r5, #8]
  402d88:	e00a      	b.n	402da0 <__sflush_r+0xb4>
  402d8a:	4623      	mov	r3, r4
  402d8c:	4632      	mov	r2, r6
  402d8e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402d90:	69e9      	ldr	r1, [r5, #28]
  402d92:	4640      	mov	r0, r8
  402d94:	47b8      	blx	r7
  402d96:	2800      	cmp	r0, #0
  402d98:	eba4 0400 	sub.w	r4, r4, r0
  402d9c:	4406      	add	r6, r0
  402d9e:	dd04      	ble.n	402daa <__sflush_r+0xbe>
  402da0:	2c00      	cmp	r4, #0
  402da2:	dcf2      	bgt.n	402d8a <__sflush_r+0x9e>
  402da4:	2000      	movs	r0, #0
  402da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402daa:	89ab      	ldrh	r3, [r5, #12]
  402dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402db0:	81ab      	strh	r3, [r5, #12]
  402db2:	f04f 30ff 	mov.w	r0, #4294967295
  402db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402dba:	f8d8 4000 	ldr.w	r4, [r8]
  402dbe:	2c1d      	cmp	r4, #29
  402dc0:	d8f3      	bhi.n	402daa <__sflush_r+0xbe>
  402dc2:	4b19      	ldr	r3, [pc, #100]	; (402e28 <__sflush_r+0x13c>)
  402dc4:	40e3      	lsrs	r3, r4
  402dc6:	43db      	mvns	r3, r3
  402dc8:	f013 0301 	ands.w	r3, r3, #1
  402dcc:	d1ed      	bne.n	402daa <__sflush_r+0xbe>
  402dce:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402dd2:	606b      	str	r3, [r5, #4]
  402dd4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402dd8:	6929      	ldr	r1, [r5, #16]
  402dda:	81ab      	strh	r3, [r5, #12]
  402ddc:	04da      	lsls	r2, r3, #19
  402dde:	6029      	str	r1, [r5, #0]
  402de0:	d5b9      	bpl.n	402d56 <__sflush_r+0x6a>
  402de2:	2c00      	cmp	r4, #0
  402de4:	d1b7      	bne.n	402d56 <__sflush_r+0x6a>
  402de6:	6528      	str	r0, [r5, #80]	; 0x50
  402de8:	e7b5      	b.n	402d56 <__sflush_r+0x6a>
  402dea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402dec:	2a00      	cmp	r2, #0
  402dee:	dc8c      	bgt.n	402d0a <__sflush_r+0x1e>
  402df0:	e7d8      	b.n	402da4 <__sflush_r+0xb8>
  402df2:	2301      	movs	r3, #1
  402df4:	69e9      	ldr	r1, [r5, #28]
  402df6:	4640      	mov	r0, r8
  402df8:	47a0      	blx	r4
  402dfa:	1c43      	adds	r3, r0, #1
  402dfc:	4602      	mov	r2, r0
  402dfe:	d002      	beq.n	402e06 <__sflush_r+0x11a>
  402e00:	89ab      	ldrh	r3, [r5, #12]
  402e02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402e04:	e78e      	b.n	402d24 <__sflush_r+0x38>
  402e06:	f8d8 3000 	ldr.w	r3, [r8]
  402e0a:	2b00      	cmp	r3, #0
  402e0c:	d0f8      	beq.n	402e00 <__sflush_r+0x114>
  402e0e:	2b1d      	cmp	r3, #29
  402e10:	d001      	beq.n	402e16 <__sflush_r+0x12a>
  402e12:	2b16      	cmp	r3, #22
  402e14:	d102      	bne.n	402e1c <__sflush_r+0x130>
  402e16:	f8c8 6000 	str.w	r6, [r8]
  402e1a:	e7c3      	b.n	402da4 <__sflush_r+0xb8>
  402e1c:	89ab      	ldrh	r3, [r5, #12]
  402e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e22:	81ab      	strh	r3, [r5, #12]
  402e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e28:	20400001 	.word	0x20400001

00402e2c <_fflush_r>:
  402e2c:	b538      	push	{r3, r4, r5, lr}
  402e2e:	460d      	mov	r5, r1
  402e30:	4604      	mov	r4, r0
  402e32:	b108      	cbz	r0, 402e38 <_fflush_r+0xc>
  402e34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402e36:	b1bb      	cbz	r3, 402e68 <_fflush_r+0x3c>
  402e38:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402e3c:	b188      	cbz	r0, 402e62 <_fflush_r+0x36>
  402e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e40:	07db      	lsls	r3, r3, #31
  402e42:	d401      	bmi.n	402e48 <_fflush_r+0x1c>
  402e44:	0581      	lsls	r1, r0, #22
  402e46:	d517      	bpl.n	402e78 <_fflush_r+0x4c>
  402e48:	4620      	mov	r0, r4
  402e4a:	4629      	mov	r1, r5
  402e4c:	f7ff ff4e 	bl	402cec <__sflush_r>
  402e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402e52:	07da      	lsls	r2, r3, #31
  402e54:	4604      	mov	r4, r0
  402e56:	d402      	bmi.n	402e5e <_fflush_r+0x32>
  402e58:	89ab      	ldrh	r3, [r5, #12]
  402e5a:	059b      	lsls	r3, r3, #22
  402e5c:	d507      	bpl.n	402e6e <_fflush_r+0x42>
  402e5e:	4620      	mov	r0, r4
  402e60:	bd38      	pop	{r3, r4, r5, pc}
  402e62:	4604      	mov	r4, r0
  402e64:	4620      	mov	r0, r4
  402e66:	bd38      	pop	{r3, r4, r5, pc}
  402e68:	f000 f838 	bl	402edc <__sinit>
  402e6c:	e7e4      	b.n	402e38 <_fflush_r+0xc>
  402e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e70:	f000 fbf6 	bl	403660 <__retarget_lock_release_recursive>
  402e74:	4620      	mov	r0, r4
  402e76:	bd38      	pop	{r3, r4, r5, pc}
  402e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402e7a:	f000 fbef 	bl	40365c <__retarget_lock_acquire_recursive>
  402e7e:	e7e3      	b.n	402e48 <_fflush_r+0x1c>

00402e80 <_cleanup_r>:
  402e80:	4901      	ldr	r1, [pc, #4]	; (402e88 <_cleanup_r+0x8>)
  402e82:	f000 bbaf 	b.w	4035e4 <_fwalk_reent>
  402e86:	bf00      	nop
  402e88:	00404591 	.word	0x00404591

00402e8c <std.isra.0>:
  402e8c:	b510      	push	{r4, lr}
  402e8e:	2300      	movs	r3, #0
  402e90:	4604      	mov	r4, r0
  402e92:	8181      	strh	r1, [r0, #12]
  402e94:	81c2      	strh	r2, [r0, #14]
  402e96:	6003      	str	r3, [r0, #0]
  402e98:	6043      	str	r3, [r0, #4]
  402e9a:	6083      	str	r3, [r0, #8]
  402e9c:	6643      	str	r3, [r0, #100]	; 0x64
  402e9e:	6103      	str	r3, [r0, #16]
  402ea0:	6143      	str	r3, [r0, #20]
  402ea2:	6183      	str	r3, [r0, #24]
  402ea4:	4619      	mov	r1, r3
  402ea6:	2208      	movs	r2, #8
  402ea8:	305c      	adds	r0, #92	; 0x5c
  402eaa:	f7fe fec3 	bl	401c34 <memset>
  402eae:	4807      	ldr	r0, [pc, #28]	; (402ecc <std.isra.0+0x40>)
  402eb0:	4907      	ldr	r1, [pc, #28]	; (402ed0 <std.isra.0+0x44>)
  402eb2:	4a08      	ldr	r2, [pc, #32]	; (402ed4 <std.isra.0+0x48>)
  402eb4:	4b08      	ldr	r3, [pc, #32]	; (402ed8 <std.isra.0+0x4c>)
  402eb6:	6220      	str	r0, [r4, #32]
  402eb8:	61e4      	str	r4, [r4, #28]
  402eba:	6261      	str	r1, [r4, #36]	; 0x24
  402ebc:	62a2      	str	r2, [r4, #40]	; 0x28
  402ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
  402ec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402ec8:	f000 bbc4 	b.w	403654 <__retarget_lock_init_recursive>
  402ecc:	004041e1 	.word	0x004041e1
  402ed0:	00404205 	.word	0x00404205
  402ed4:	00404241 	.word	0x00404241
  402ed8:	00404261 	.word	0x00404261

00402edc <__sinit>:
  402edc:	b510      	push	{r4, lr}
  402ede:	4604      	mov	r4, r0
  402ee0:	4812      	ldr	r0, [pc, #72]	; (402f2c <__sinit+0x50>)
  402ee2:	f000 fbbb 	bl	40365c <__retarget_lock_acquire_recursive>
  402ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402ee8:	b9d2      	cbnz	r2, 402f20 <__sinit+0x44>
  402eea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402eee:	4810      	ldr	r0, [pc, #64]	; (402f30 <__sinit+0x54>)
  402ef0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402ef4:	2103      	movs	r1, #3
  402ef6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402efa:	63e0      	str	r0, [r4, #60]	; 0x3c
  402efc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402f00:	6860      	ldr	r0, [r4, #4]
  402f02:	2104      	movs	r1, #4
  402f04:	f7ff ffc2 	bl	402e8c <std.isra.0>
  402f08:	2201      	movs	r2, #1
  402f0a:	2109      	movs	r1, #9
  402f0c:	68a0      	ldr	r0, [r4, #8]
  402f0e:	f7ff ffbd 	bl	402e8c <std.isra.0>
  402f12:	2202      	movs	r2, #2
  402f14:	2112      	movs	r1, #18
  402f16:	68e0      	ldr	r0, [r4, #12]
  402f18:	f7ff ffb8 	bl	402e8c <std.isra.0>
  402f1c:	2301      	movs	r3, #1
  402f1e:	63a3      	str	r3, [r4, #56]	; 0x38
  402f20:	4802      	ldr	r0, [pc, #8]	; (402f2c <__sinit+0x50>)
  402f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402f26:	f000 bb9b 	b.w	403660 <__retarget_lock_release_recursive>
  402f2a:	bf00      	nop
  402f2c:	20401470 	.word	0x20401470
  402f30:	00402e81 	.word	0x00402e81

00402f34 <__sfp_lock_acquire>:
  402f34:	4801      	ldr	r0, [pc, #4]	; (402f3c <__sfp_lock_acquire+0x8>)
  402f36:	f000 bb91 	b.w	40365c <__retarget_lock_acquire_recursive>
  402f3a:	bf00      	nop
  402f3c:	20401484 	.word	0x20401484

00402f40 <__sfp_lock_release>:
  402f40:	4801      	ldr	r0, [pc, #4]	; (402f48 <__sfp_lock_release+0x8>)
  402f42:	f000 bb8d 	b.w	403660 <__retarget_lock_release_recursive>
  402f46:	bf00      	nop
  402f48:	20401484 	.word	0x20401484

00402f4c <__libc_fini_array>:
  402f4c:	b538      	push	{r3, r4, r5, lr}
  402f4e:	4c0a      	ldr	r4, [pc, #40]	; (402f78 <__libc_fini_array+0x2c>)
  402f50:	4d0a      	ldr	r5, [pc, #40]	; (402f7c <__libc_fini_array+0x30>)
  402f52:	1b64      	subs	r4, r4, r5
  402f54:	10a4      	asrs	r4, r4, #2
  402f56:	d00a      	beq.n	402f6e <__libc_fini_array+0x22>
  402f58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402f5c:	3b01      	subs	r3, #1
  402f5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402f62:	3c01      	subs	r4, #1
  402f64:	f855 3904 	ldr.w	r3, [r5], #-4
  402f68:	4798      	blx	r3
  402f6a:	2c00      	cmp	r4, #0
  402f6c:	d1f9      	bne.n	402f62 <__libc_fini_array+0x16>
  402f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402f72:	f001 be8d 	b.w	404c90 <_fini>
  402f76:	bf00      	nop
  402f78:	00404ca0 	.word	0x00404ca0
  402f7c:	00404c9c 	.word	0x00404c9c

00402f80 <__fputwc>:
  402f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f84:	b082      	sub	sp, #8
  402f86:	4680      	mov	r8, r0
  402f88:	4689      	mov	r9, r1
  402f8a:	4614      	mov	r4, r2
  402f8c:	f000 fb54 	bl	403638 <__locale_mb_cur_max>
  402f90:	2801      	cmp	r0, #1
  402f92:	d036      	beq.n	403002 <__fputwc+0x82>
  402f94:	464a      	mov	r2, r9
  402f96:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402f9a:	a901      	add	r1, sp, #4
  402f9c:	4640      	mov	r0, r8
  402f9e:	f001 fa35 	bl	40440c <_wcrtomb_r>
  402fa2:	1c42      	adds	r2, r0, #1
  402fa4:	4606      	mov	r6, r0
  402fa6:	d025      	beq.n	402ff4 <__fputwc+0x74>
  402fa8:	b3a8      	cbz	r0, 403016 <__fputwc+0x96>
  402faa:	f89d e004 	ldrb.w	lr, [sp, #4]
  402fae:	2500      	movs	r5, #0
  402fb0:	f10d 0a04 	add.w	sl, sp, #4
  402fb4:	e009      	b.n	402fca <__fputwc+0x4a>
  402fb6:	6823      	ldr	r3, [r4, #0]
  402fb8:	1c5a      	adds	r2, r3, #1
  402fba:	6022      	str	r2, [r4, #0]
  402fbc:	f883 e000 	strb.w	lr, [r3]
  402fc0:	3501      	adds	r5, #1
  402fc2:	42b5      	cmp	r5, r6
  402fc4:	d227      	bcs.n	403016 <__fputwc+0x96>
  402fc6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402fca:	68a3      	ldr	r3, [r4, #8]
  402fcc:	3b01      	subs	r3, #1
  402fce:	2b00      	cmp	r3, #0
  402fd0:	60a3      	str	r3, [r4, #8]
  402fd2:	daf0      	bge.n	402fb6 <__fputwc+0x36>
  402fd4:	69a7      	ldr	r7, [r4, #24]
  402fd6:	42bb      	cmp	r3, r7
  402fd8:	4671      	mov	r1, lr
  402fda:	4622      	mov	r2, r4
  402fdc:	4640      	mov	r0, r8
  402fde:	db02      	blt.n	402fe6 <__fputwc+0x66>
  402fe0:	f1be 0f0a 	cmp.w	lr, #10
  402fe4:	d1e7      	bne.n	402fb6 <__fputwc+0x36>
  402fe6:	f001 f9b9 	bl	40435c <__swbuf_r>
  402fea:	1c43      	adds	r3, r0, #1
  402fec:	d1e8      	bne.n	402fc0 <__fputwc+0x40>
  402fee:	b002      	add	sp, #8
  402ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ff4:	89a3      	ldrh	r3, [r4, #12]
  402ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ffa:	81a3      	strh	r3, [r4, #12]
  402ffc:	b002      	add	sp, #8
  402ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403002:	f109 33ff 	add.w	r3, r9, #4294967295
  403006:	2bfe      	cmp	r3, #254	; 0xfe
  403008:	d8c4      	bhi.n	402f94 <__fputwc+0x14>
  40300a:	fa5f fe89 	uxtb.w	lr, r9
  40300e:	4606      	mov	r6, r0
  403010:	f88d e004 	strb.w	lr, [sp, #4]
  403014:	e7cb      	b.n	402fae <__fputwc+0x2e>
  403016:	4648      	mov	r0, r9
  403018:	b002      	add	sp, #8
  40301a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40301e:	bf00      	nop

00403020 <_fputwc_r>:
  403020:	b530      	push	{r4, r5, lr}
  403022:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403024:	f013 0f01 	tst.w	r3, #1
  403028:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40302c:	4614      	mov	r4, r2
  40302e:	b083      	sub	sp, #12
  403030:	4605      	mov	r5, r0
  403032:	b29a      	uxth	r2, r3
  403034:	d101      	bne.n	40303a <_fputwc_r+0x1a>
  403036:	0590      	lsls	r0, r2, #22
  403038:	d51c      	bpl.n	403074 <_fputwc_r+0x54>
  40303a:	0490      	lsls	r0, r2, #18
  40303c:	d406      	bmi.n	40304c <_fputwc_r+0x2c>
  40303e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403048:	81a3      	strh	r3, [r4, #12]
  40304a:	6662      	str	r2, [r4, #100]	; 0x64
  40304c:	4628      	mov	r0, r5
  40304e:	4622      	mov	r2, r4
  403050:	f7ff ff96 	bl	402f80 <__fputwc>
  403054:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403056:	07da      	lsls	r2, r3, #31
  403058:	4605      	mov	r5, r0
  40305a:	d402      	bmi.n	403062 <_fputwc_r+0x42>
  40305c:	89a3      	ldrh	r3, [r4, #12]
  40305e:	059b      	lsls	r3, r3, #22
  403060:	d502      	bpl.n	403068 <_fputwc_r+0x48>
  403062:	4628      	mov	r0, r5
  403064:	b003      	add	sp, #12
  403066:	bd30      	pop	{r4, r5, pc}
  403068:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40306a:	f000 faf9 	bl	403660 <__retarget_lock_release_recursive>
  40306e:	4628      	mov	r0, r5
  403070:	b003      	add	sp, #12
  403072:	bd30      	pop	{r4, r5, pc}
  403074:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403076:	9101      	str	r1, [sp, #4]
  403078:	f000 faf0 	bl	40365c <__retarget_lock_acquire_recursive>
  40307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403080:	9901      	ldr	r1, [sp, #4]
  403082:	b29a      	uxth	r2, r3
  403084:	e7d9      	b.n	40303a <_fputwc_r+0x1a>
  403086:	bf00      	nop

00403088 <_malloc_trim_r>:
  403088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40308a:	4f24      	ldr	r7, [pc, #144]	; (40311c <_malloc_trim_r+0x94>)
  40308c:	460c      	mov	r4, r1
  40308e:	4606      	mov	r6, r0
  403090:	f000 fee2 	bl	403e58 <__malloc_lock>
  403094:	68bb      	ldr	r3, [r7, #8]
  403096:	685d      	ldr	r5, [r3, #4]
  403098:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40309c:	310f      	adds	r1, #15
  40309e:	f025 0503 	bic.w	r5, r5, #3
  4030a2:	4429      	add	r1, r5
  4030a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4030a8:	f021 010f 	bic.w	r1, r1, #15
  4030ac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4030b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4030b4:	db07      	blt.n	4030c6 <_malloc_trim_r+0x3e>
  4030b6:	2100      	movs	r1, #0
  4030b8:	4630      	mov	r0, r6
  4030ba:	f001 f87f 	bl	4041bc <_sbrk_r>
  4030be:	68bb      	ldr	r3, [r7, #8]
  4030c0:	442b      	add	r3, r5
  4030c2:	4298      	cmp	r0, r3
  4030c4:	d004      	beq.n	4030d0 <_malloc_trim_r+0x48>
  4030c6:	4630      	mov	r0, r6
  4030c8:	f000 fecc 	bl	403e64 <__malloc_unlock>
  4030cc:	2000      	movs	r0, #0
  4030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030d0:	4261      	negs	r1, r4
  4030d2:	4630      	mov	r0, r6
  4030d4:	f001 f872 	bl	4041bc <_sbrk_r>
  4030d8:	3001      	adds	r0, #1
  4030da:	d00d      	beq.n	4030f8 <_malloc_trim_r+0x70>
  4030dc:	4b10      	ldr	r3, [pc, #64]	; (403120 <_malloc_trim_r+0x98>)
  4030de:	68ba      	ldr	r2, [r7, #8]
  4030e0:	6819      	ldr	r1, [r3, #0]
  4030e2:	1b2d      	subs	r5, r5, r4
  4030e4:	f045 0501 	orr.w	r5, r5, #1
  4030e8:	4630      	mov	r0, r6
  4030ea:	1b09      	subs	r1, r1, r4
  4030ec:	6055      	str	r5, [r2, #4]
  4030ee:	6019      	str	r1, [r3, #0]
  4030f0:	f000 feb8 	bl	403e64 <__malloc_unlock>
  4030f4:	2001      	movs	r0, #1
  4030f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4030f8:	2100      	movs	r1, #0
  4030fa:	4630      	mov	r0, r6
  4030fc:	f001 f85e 	bl	4041bc <_sbrk_r>
  403100:	68ba      	ldr	r2, [r7, #8]
  403102:	1a83      	subs	r3, r0, r2
  403104:	2b0f      	cmp	r3, #15
  403106:	ddde      	ble.n	4030c6 <_malloc_trim_r+0x3e>
  403108:	4c06      	ldr	r4, [pc, #24]	; (403124 <_malloc_trim_r+0x9c>)
  40310a:	4905      	ldr	r1, [pc, #20]	; (403120 <_malloc_trim_r+0x98>)
  40310c:	6824      	ldr	r4, [r4, #0]
  40310e:	f043 0301 	orr.w	r3, r3, #1
  403112:	1b00      	subs	r0, r0, r4
  403114:	6053      	str	r3, [r2, #4]
  403116:	6008      	str	r0, [r1, #0]
  403118:	e7d5      	b.n	4030c6 <_malloc_trim_r+0x3e>
  40311a:	bf00      	nop
  40311c:	204005a8 	.word	0x204005a8
  403120:	20401424 	.word	0x20401424
  403124:	204009b0 	.word	0x204009b0

00403128 <_free_r>:
  403128:	2900      	cmp	r1, #0
  40312a:	d044      	beq.n	4031b6 <_free_r+0x8e>
  40312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403130:	460d      	mov	r5, r1
  403132:	4680      	mov	r8, r0
  403134:	f000 fe90 	bl	403e58 <__malloc_lock>
  403138:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40313c:	4969      	ldr	r1, [pc, #420]	; (4032e4 <_free_r+0x1bc>)
  40313e:	f027 0301 	bic.w	r3, r7, #1
  403142:	f1a5 0408 	sub.w	r4, r5, #8
  403146:	18e2      	adds	r2, r4, r3
  403148:	688e      	ldr	r6, [r1, #8]
  40314a:	6850      	ldr	r0, [r2, #4]
  40314c:	42b2      	cmp	r2, r6
  40314e:	f020 0003 	bic.w	r0, r0, #3
  403152:	d05e      	beq.n	403212 <_free_r+0xea>
  403154:	07fe      	lsls	r6, r7, #31
  403156:	6050      	str	r0, [r2, #4]
  403158:	d40b      	bmi.n	403172 <_free_r+0x4a>
  40315a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40315e:	1be4      	subs	r4, r4, r7
  403160:	f101 0e08 	add.w	lr, r1, #8
  403164:	68a5      	ldr	r5, [r4, #8]
  403166:	4575      	cmp	r5, lr
  403168:	443b      	add	r3, r7
  40316a:	d06d      	beq.n	403248 <_free_r+0x120>
  40316c:	68e7      	ldr	r7, [r4, #12]
  40316e:	60ef      	str	r7, [r5, #12]
  403170:	60bd      	str	r5, [r7, #8]
  403172:	1815      	adds	r5, r2, r0
  403174:	686d      	ldr	r5, [r5, #4]
  403176:	07ed      	lsls	r5, r5, #31
  403178:	d53e      	bpl.n	4031f8 <_free_r+0xd0>
  40317a:	f043 0201 	orr.w	r2, r3, #1
  40317e:	6062      	str	r2, [r4, #4]
  403180:	50e3      	str	r3, [r4, r3]
  403182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403186:	d217      	bcs.n	4031b8 <_free_r+0x90>
  403188:	08db      	lsrs	r3, r3, #3
  40318a:	1c58      	adds	r0, r3, #1
  40318c:	109a      	asrs	r2, r3, #2
  40318e:	684d      	ldr	r5, [r1, #4]
  403190:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403194:	60a7      	str	r7, [r4, #8]
  403196:	2301      	movs	r3, #1
  403198:	4093      	lsls	r3, r2
  40319a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40319e:	432b      	orrs	r3, r5
  4031a0:	3a08      	subs	r2, #8
  4031a2:	60e2      	str	r2, [r4, #12]
  4031a4:	604b      	str	r3, [r1, #4]
  4031a6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4031aa:	60fc      	str	r4, [r7, #12]
  4031ac:	4640      	mov	r0, r8
  4031ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4031b2:	f000 be57 	b.w	403e64 <__malloc_unlock>
  4031b6:	4770      	bx	lr
  4031b8:	0a5a      	lsrs	r2, r3, #9
  4031ba:	2a04      	cmp	r2, #4
  4031bc:	d852      	bhi.n	403264 <_free_r+0x13c>
  4031be:	099a      	lsrs	r2, r3, #6
  4031c0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4031c4:	00ff      	lsls	r7, r7, #3
  4031c6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4031ca:	19c8      	adds	r0, r1, r7
  4031cc:	59ca      	ldr	r2, [r1, r7]
  4031ce:	3808      	subs	r0, #8
  4031d0:	4290      	cmp	r0, r2
  4031d2:	d04f      	beq.n	403274 <_free_r+0x14c>
  4031d4:	6851      	ldr	r1, [r2, #4]
  4031d6:	f021 0103 	bic.w	r1, r1, #3
  4031da:	428b      	cmp	r3, r1
  4031dc:	d232      	bcs.n	403244 <_free_r+0x11c>
  4031de:	6892      	ldr	r2, [r2, #8]
  4031e0:	4290      	cmp	r0, r2
  4031e2:	d1f7      	bne.n	4031d4 <_free_r+0xac>
  4031e4:	68c3      	ldr	r3, [r0, #12]
  4031e6:	60a0      	str	r0, [r4, #8]
  4031e8:	60e3      	str	r3, [r4, #12]
  4031ea:	609c      	str	r4, [r3, #8]
  4031ec:	60c4      	str	r4, [r0, #12]
  4031ee:	4640      	mov	r0, r8
  4031f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4031f4:	f000 be36 	b.w	403e64 <__malloc_unlock>
  4031f8:	6895      	ldr	r5, [r2, #8]
  4031fa:	4f3b      	ldr	r7, [pc, #236]	; (4032e8 <_free_r+0x1c0>)
  4031fc:	42bd      	cmp	r5, r7
  4031fe:	4403      	add	r3, r0
  403200:	d040      	beq.n	403284 <_free_r+0x15c>
  403202:	68d0      	ldr	r0, [r2, #12]
  403204:	60e8      	str	r0, [r5, #12]
  403206:	f043 0201 	orr.w	r2, r3, #1
  40320a:	6085      	str	r5, [r0, #8]
  40320c:	6062      	str	r2, [r4, #4]
  40320e:	50e3      	str	r3, [r4, r3]
  403210:	e7b7      	b.n	403182 <_free_r+0x5a>
  403212:	07ff      	lsls	r7, r7, #31
  403214:	4403      	add	r3, r0
  403216:	d407      	bmi.n	403228 <_free_r+0x100>
  403218:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40321c:	1aa4      	subs	r4, r4, r2
  40321e:	4413      	add	r3, r2
  403220:	68a0      	ldr	r0, [r4, #8]
  403222:	68e2      	ldr	r2, [r4, #12]
  403224:	60c2      	str	r2, [r0, #12]
  403226:	6090      	str	r0, [r2, #8]
  403228:	4a30      	ldr	r2, [pc, #192]	; (4032ec <_free_r+0x1c4>)
  40322a:	6812      	ldr	r2, [r2, #0]
  40322c:	f043 0001 	orr.w	r0, r3, #1
  403230:	4293      	cmp	r3, r2
  403232:	6060      	str	r0, [r4, #4]
  403234:	608c      	str	r4, [r1, #8]
  403236:	d3b9      	bcc.n	4031ac <_free_r+0x84>
  403238:	4b2d      	ldr	r3, [pc, #180]	; (4032f0 <_free_r+0x1c8>)
  40323a:	4640      	mov	r0, r8
  40323c:	6819      	ldr	r1, [r3, #0]
  40323e:	f7ff ff23 	bl	403088 <_malloc_trim_r>
  403242:	e7b3      	b.n	4031ac <_free_r+0x84>
  403244:	4610      	mov	r0, r2
  403246:	e7cd      	b.n	4031e4 <_free_r+0xbc>
  403248:	1811      	adds	r1, r2, r0
  40324a:	6849      	ldr	r1, [r1, #4]
  40324c:	07c9      	lsls	r1, r1, #31
  40324e:	d444      	bmi.n	4032da <_free_r+0x1b2>
  403250:	6891      	ldr	r1, [r2, #8]
  403252:	68d2      	ldr	r2, [r2, #12]
  403254:	60ca      	str	r2, [r1, #12]
  403256:	4403      	add	r3, r0
  403258:	f043 0001 	orr.w	r0, r3, #1
  40325c:	6091      	str	r1, [r2, #8]
  40325e:	6060      	str	r0, [r4, #4]
  403260:	50e3      	str	r3, [r4, r3]
  403262:	e7a3      	b.n	4031ac <_free_r+0x84>
  403264:	2a14      	cmp	r2, #20
  403266:	d816      	bhi.n	403296 <_free_r+0x16e>
  403268:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40326c:	00ff      	lsls	r7, r7, #3
  40326e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403272:	e7aa      	b.n	4031ca <_free_r+0xa2>
  403274:	10aa      	asrs	r2, r5, #2
  403276:	2301      	movs	r3, #1
  403278:	684d      	ldr	r5, [r1, #4]
  40327a:	4093      	lsls	r3, r2
  40327c:	432b      	orrs	r3, r5
  40327e:	604b      	str	r3, [r1, #4]
  403280:	4603      	mov	r3, r0
  403282:	e7b0      	b.n	4031e6 <_free_r+0xbe>
  403284:	f043 0201 	orr.w	r2, r3, #1
  403288:	614c      	str	r4, [r1, #20]
  40328a:	610c      	str	r4, [r1, #16]
  40328c:	60e5      	str	r5, [r4, #12]
  40328e:	60a5      	str	r5, [r4, #8]
  403290:	6062      	str	r2, [r4, #4]
  403292:	50e3      	str	r3, [r4, r3]
  403294:	e78a      	b.n	4031ac <_free_r+0x84>
  403296:	2a54      	cmp	r2, #84	; 0x54
  403298:	d806      	bhi.n	4032a8 <_free_r+0x180>
  40329a:	0b1a      	lsrs	r2, r3, #12
  40329c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4032a0:	00ff      	lsls	r7, r7, #3
  4032a2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4032a6:	e790      	b.n	4031ca <_free_r+0xa2>
  4032a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4032ac:	d806      	bhi.n	4032bc <_free_r+0x194>
  4032ae:	0bda      	lsrs	r2, r3, #15
  4032b0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4032b4:	00ff      	lsls	r7, r7, #3
  4032b6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4032ba:	e786      	b.n	4031ca <_free_r+0xa2>
  4032bc:	f240 5054 	movw	r0, #1364	; 0x554
  4032c0:	4282      	cmp	r2, r0
  4032c2:	d806      	bhi.n	4032d2 <_free_r+0x1aa>
  4032c4:	0c9a      	lsrs	r2, r3, #18
  4032c6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4032ca:	00ff      	lsls	r7, r7, #3
  4032cc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4032d0:	e77b      	b.n	4031ca <_free_r+0xa2>
  4032d2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4032d6:	257e      	movs	r5, #126	; 0x7e
  4032d8:	e777      	b.n	4031ca <_free_r+0xa2>
  4032da:	f043 0101 	orr.w	r1, r3, #1
  4032de:	6061      	str	r1, [r4, #4]
  4032e0:	6013      	str	r3, [r2, #0]
  4032e2:	e763      	b.n	4031ac <_free_r+0x84>
  4032e4:	204005a8 	.word	0x204005a8
  4032e8:	204005b0 	.word	0x204005b0
  4032ec:	204009b4 	.word	0x204009b4
  4032f0:	20401454 	.word	0x20401454

004032f4 <__sfvwrite_r>:
  4032f4:	6893      	ldr	r3, [r2, #8]
  4032f6:	2b00      	cmp	r3, #0
  4032f8:	d073      	beq.n	4033e2 <__sfvwrite_r+0xee>
  4032fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032fe:	898b      	ldrh	r3, [r1, #12]
  403300:	b083      	sub	sp, #12
  403302:	460c      	mov	r4, r1
  403304:	0719      	lsls	r1, r3, #28
  403306:	9000      	str	r0, [sp, #0]
  403308:	4616      	mov	r6, r2
  40330a:	d526      	bpl.n	40335a <__sfvwrite_r+0x66>
  40330c:	6922      	ldr	r2, [r4, #16]
  40330e:	b322      	cbz	r2, 40335a <__sfvwrite_r+0x66>
  403310:	f013 0002 	ands.w	r0, r3, #2
  403314:	6835      	ldr	r5, [r6, #0]
  403316:	d02c      	beq.n	403372 <__sfvwrite_r+0x7e>
  403318:	f04f 0900 	mov.w	r9, #0
  40331c:	4fb0      	ldr	r7, [pc, #704]	; (4035e0 <__sfvwrite_r+0x2ec>)
  40331e:	46c8      	mov	r8, r9
  403320:	46b2      	mov	sl, r6
  403322:	45b8      	cmp	r8, r7
  403324:	4643      	mov	r3, r8
  403326:	464a      	mov	r2, r9
  403328:	bf28      	it	cs
  40332a:	463b      	movcs	r3, r7
  40332c:	9800      	ldr	r0, [sp, #0]
  40332e:	f1b8 0f00 	cmp.w	r8, #0
  403332:	d050      	beq.n	4033d6 <__sfvwrite_r+0xe2>
  403334:	69e1      	ldr	r1, [r4, #28]
  403336:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403338:	47b0      	blx	r6
  40333a:	2800      	cmp	r0, #0
  40333c:	dd58      	ble.n	4033f0 <__sfvwrite_r+0xfc>
  40333e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403342:	1a1b      	subs	r3, r3, r0
  403344:	4481      	add	r9, r0
  403346:	eba8 0800 	sub.w	r8, r8, r0
  40334a:	f8ca 3008 	str.w	r3, [sl, #8]
  40334e:	2b00      	cmp	r3, #0
  403350:	d1e7      	bne.n	403322 <__sfvwrite_r+0x2e>
  403352:	2000      	movs	r0, #0
  403354:	b003      	add	sp, #12
  403356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40335a:	4621      	mov	r1, r4
  40335c:	9800      	ldr	r0, [sp, #0]
  40335e:	f7ff fc51 	bl	402c04 <__swsetup_r>
  403362:	2800      	cmp	r0, #0
  403364:	f040 8133 	bne.w	4035ce <__sfvwrite_r+0x2da>
  403368:	89a3      	ldrh	r3, [r4, #12]
  40336a:	6835      	ldr	r5, [r6, #0]
  40336c:	f013 0002 	ands.w	r0, r3, #2
  403370:	d1d2      	bne.n	403318 <__sfvwrite_r+0x24>
  403372:	f013 0901 	ands.w	r9, r3, #1
  403376:	d145      	bne.n	403404 <__sfvwrite_r+0x110>
  403378:	464f      	mov	r7, r9
  40337a:	9601      	str	r6, [sp, #4]
  40337c:	b337      	cbz	r7, 4033cc <__sfvwrite_r+0xd8>
  40337e:	059a      	lsls	r2, r3, #22
  403380:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403384:	f140 8083 	bpl.w	40348e <__sfvwrite_r+0x19a>
  403388:	4547      	cmp	r7, r8
  40338a:	46c3      	mov	fp, r8
  40338c:	f0c0 80ab 	bcc.w	4034e6 <__sfvwrite_r+0x1f2>
  403390:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403394:	f040 80ac 	bne.w	4034f0 <__sfvwrite_r+0x1fc>
  403398:	6820      	ldr	r0, [r4, #0]
  40339a:	46ba      	mov	sl, r7
  40339c:	465a      	mov	r2, fp
  40339e:	4649      	mov	r1, r9
  4033a0:	f000 fcf6 	bl	403d90 <memmove>
  4033a4:	68a2      	ldr	r2, [r4, #8]
  4033a6:	6823      	ldr	r3, [r4, #0]
  4033a8:	eba2 0208 	sub.w	r2, r2, r8
  4033ac:	445b      	add	r3, fp
  4033ae:	60a2      	str	r2, [r4, #8]
  4033b0:	6023      	str	r3, [r4, #0]
  4033b2:	9a01      	ldr	r2, [sp, #4]
  4033b4:	6893      	ldr	r3, [r2, #8]
  4033b6:	eba3 030a 	sub.w	r3, r3, sl
  4033ba:	44d1      	add	r9, sl
  4033bc:	eba7 070a 	sub.w	r7, r7, sl
  4033c0:	6093      	str	r3, [r2, #8]
  4033c2:	2b00      	cmp	r3, #0
  4033c4:	d0c5      	beq.n	403352 <__sfvwrite_r+0x5e>
  4033c6:	89a3      	ldrh	r3, [r4, #12]
  4033c8:	2f00      	cmp	r7, #0
  4033ca:	d1d8      	bne.n	40337e <__sfvwrite_r+0x8a>
  4033cc:	f8d5 9000 	ldr.w	r9, [r5]
  4033d0:	686f      	ldr	r7, [r5, #4]
  4033d2:	3508      	adds	r5, #8
  4033d4:	e7d2      	b.n	40337c <__sfvwrite_r+0x88>
  4033d6:	f8d5 9000 	ldr.w	r9, [r5]
  4033da:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4033de:	3508      	adds	r5, #8
  4033e0:	e79f      	b.n	403322 <__sfvwrite_r+0x2e>
  4033e2:	2000      	movs	r0, #0
  4033e4:	4770      	bx	lr
  4033e6:	4621      	mov	r1, r4
  4033e8:	9800      	ldr	r0, [sp, #0]
  4033ea:	f7ff fd1f 	bl	402e2c <_fflush_r>
  4033ee:	b370      	cbz	r0, 40344e <__sfvwrite_r+0x15a>
  4033f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4033f8:	f04f 30ff 	mov.w	r0, #4294967295
  4033fc:	81a3      	strh	r3, [r4, #12]
  4033fe:	b003      	add	sp, #12
  403400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403404:	4681      	mov	r9, r0
  403406:	4633      	mov	r3, r6
  403408:	464e      	mov	r6, r9
  40340a:	46a8      	mov	r8, r5
  40340c:	469a      	mov	sl, r3
  40340e:	464d      	mov	r5, r9
  403410:	b34e      	cbz	r6, 403466 <__sfvwrite_r+0x172>
  403412:	b380      	cbz	r0, 403476 <__sfvwrite_r+0x182>
  403414:	6820      	ldr	r0, [r4, #0]
  403416:	6923      	ldr	r3, [r4, #16]
  403418:	6962      	ldr	r2, [r4, #20]
  40341a:	45b1      	cmp	r9, r6
  40341c:	46cb      	mov	fp, r9
  40341e:	bf28      	it	cs
  403420:	46b3      	movcs	fp, r6
  403422:	4298      	cmp	r0, r3
  403424:	465f      	mov	r7, fp
  403426:	d904      	bls.n	403432 <__sfvwrite_r+0x13e>
  403428:	68a3      	ldr	r3, [r4, #8]
  40342a:	4413      	add	r3, r2
  40342c:	459b      	cmp	fp, r3
  40342e:	f300 80a6 	bgt.w	40357e <__sfvwrite_r+0x28a>
  403432:	4593      	cmp	fp, r2
  403434:	db4b      	blt.n	4034ce <__sfvwrite_r+0x1da>
  403436:	4613      	mov	r3, r2
  403438:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40343a:	69e1      	ldr	r1, [r4, #28]
  40343c:	9800      	ldr	r0, [sp, #0]
  40343e:	462a      	mov	r2, r5
  403440:	47b8      	blx	r7
  403442:	1e07      	subs	r7, r0, #0
  403444:	ddd4      	ble.n	4033f0 <__sfvwrite_r+0xfc>
  403446:	ebb9 0907 	subs.w	r9, r9, r7
  40344a:	d0cc      	beq.n	4033e6 <__sfvwrite_r+0xf2>
  40344c:	2001      	movs	r0, #1
  40344e:	f8da 3008 	ldr.w	r3, [sl, #8]
  403452:	1bdb      	subs	r3, r3, r7
  403454:	443d      	add	r5, r7
  403456:	1bf6      	subs	r6, r6, r7
  403458:	f8ca 3008 	str.w	r3, [sl, #8]
  40345c:	2b00      	cmp	r3, #0
  40345e:	f43f af78 	beq.w	403352 <__sfvwrite_r+0x5e>
  403462:	2e00      	cmp	r6, #0
  403464:	d1d5      	bne.n	403412 <__sfvwrite_r+0x11e>
  403466:	f108 0308 	add.w	r3, r8, #8
  40346a:	e913 0060 	ldmdb	r3, {r5, r6}
  40346e:	4698      	mov	r8, r3
  403470:	3308      	adds	r3, #8
  403472:	2e00      	cmp	r6, #0
  403474:	d0f9      	beq.n	40346a <__sfvwrite_r+0x176>
  403476:	4632      	mov	r2, r6
  403478:	210a      	movs	r1, #10
  40347a:	4628      	mov	r0, r5
  40347c:	f000 fc38 	bl	403cf0 <memchr>
  403480:	2800      	cmp	r0, #0
  403482:	f000 80a1 	beq.w	4035c8 <__sfvwrite_r+0x2d4>
  403486:	3001      	adds	r0, #1
  403488:	eba0 0905 	sub.w	r9, r0, r5
  40348c:	e7c2      	b.n	403414 <__sfvwrite_r+0x120>
  40348e:	6820      	ldr	r0, [r4, #0]
  403490:	6923      	ldr	r3, [r4, #16]
  403492:	4298      	cmp	r0, r3
  403494:	d802      	bhi.n	40349c <__sfvwrite_r+0x1a8>
  403496:	6963      	ldr	r3, [r4, #20]
  403498:	429f      	cmp	r7, r3
  40349a:	d25d      	bcs.n	403558 <__sfvwrite_r+0x264>
  40349c:	45b8      	cmp	r8, r7
  40349e:	bf28      	it	cs
  4034a0:	46b8      	movcs	r8, r7
  4034a2:	4642      	mov	r2, r8
  4034a4:	4649      	mov	r1, r9
  4034a6:	f000 fc73 	bl	403d90 <memmove>
  4034aa:	68a3      	ldr	r3, [r4, #8]
  4034ac:	6822      	ldr	r2, [r4, #0]
  4034ae:	eba3 0308 	sub.w	r3, r3, r8
  4034b2:	4442      	add	r2, r8
  4034b4:	60a3      	str	r3, [r4, #8]
  4034b6:	6022      	str	r2, [r4, #0]
  4034b8:	b10b      	cbz	r3, 4034be <__sfvwrite_r+0x1ca>
  4034ba:	46c2      	mov	sl, r8
  4034bc:	e779      	b.n	4033b2 <__sfvwrite_r+0xbe>
  4034be:	4621      	mov	r1, r4
  4034c0:	9800      	ldr	r0, [sp, #0]
  4034c2:	f7ff fcb3 	bl	402e2c <_fflush_r>
  4034c6:	2800      	cmp	r0, #0
  4034c8:	d192      	bne.n	4033f0 <__sfvwrite_r+0xfc>
  4034ca:	46c2      	mov	sl, r8
  4034cc:	e771      	b.n	4033b2 <__sfvwrite_r+0xbe>
  4034ce:	465a      	mov	r2, fp
  4034d0:	4629      	mov	r1, r5
  4034d2:	f000 fc5d 	bl	403d90 <memmove>
  4034d6:	68a2      	ldr	r2, [r4, #8]
  4034d8:	6823      	ldr	r3, [r4, #0]
  4034da:	eba2 020b 	sub.w	r2, r2, fp
  4034de:	445b      	add	r3, fp
  4034e0:	60a2      	str	r2, [r4, #8]
  4034e2:	6023      	str	r3, [r4, #0]
  4034e4:	e7af      	b.n	403446 <__sfvwrite_r+0x152>
  4034e6:	6820      	ldr	r0, [r4, #0]
  4034e8:	46b8      	mov	r8, r7
  4034ea:	46ba      	mov	sl, r7
  4034ec:	46bb      	mov	fp, r7
  4034ee:	e755      	b.n	40339c <__sfvwrite_r+0xa8>
  4034f0:	6962      	ldr	r2, [r4, #20]
  4034f2:	6820      	ldr	r0, [r4, #0]
  4034f4:	6921      	ldr	r1, [r4, #16]
  4034f6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4034fa:	eba0 0a01 	sub.w	sl, r0, r1
  4034fe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403502:	f10a 0001 	add.w	r0, sl, #1
  403506:	ea4f 0868 	mov.w	r8, r8, asr #1
  40350a:	4438      	add	r0, r7
  40350c:	4540      	cmp	r0, r8
  40350e:	4642      	mov	r2, r8
  403510:	bf84      	itt	hi
  403512:	4680      	movhi	r8, r0
  403514:	4642      	movhi	r2, r8
  403516:	055b      	lsls	r3, r3, #21
  403518:	d544      	bpl.n	4035a4 <__sfvwrite_r+0x2b0>
  40351a:	4611      	mov	r1, r2
  40351c:	9800      	ldr	r0, [sp, #0]
  40351e:	f000 f921 	bl	403764 <_malloc_r>
  403522:	4683      	mov	fp, r0
  403524:	2800      	cmp	r0, #0
  403526:	d055      	beq.n	4035d4 <__sfvwrite_r+0x2e0>
  403528:	4652      	mov	r2, sl
  40352a:	6921      	ldr	r1, [r4, #16]
  40352c:	f7fe fae8 	bl	401b00 <memcpy>
  403530:	89a3      	ldrh	r3, [r4, #12]
  403532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40353a:	81a3      	strh	r3, [r4, #12]
  40353c:	eb0b 000a 	add.w	r0, fp, sl
  403540:	eba8 030a 	sub.w	r3, r8, sl
  403544:	f8c4 b010 	str.w	fp, [r4, #16]
  403548:	f8c4 8014 	str.w	r8, [r4, #20]
  40354c:	6020      	str	r0, [r4, #0]
  40354e:	60a3      	str	r3, [r4, #8]
  403550:	46b8      	mov	r8, r7
  403552:	46ba      	mov	sl, r7
  403554:	46bb      	mov	fp, r7
  403556:	e721      	b.n	40339c <__sfvwrite_r+0xa8>
  403558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40355c:	42b9      	cmp	r1, r7
  40355e:	bf28      	it	cs
  403560:	4639      	movcs	r1, r7
  403562:	464a      	mov	r2, r9
  403564:	fb91 f1f3 	sdiv	r1, r1, r3
  403568:	9800      	ldr	r0, [sp, #0]
  40356a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40356c:	fb03 f301 	mul.w	r3, r3, r1
  403570:	69e1      	ldr	r1, [r4, #28]
  403572:	47b0      	blx	r6
  403574:	f1b0 0a00 	subs.w	sl, r0, #0
  403578:	f73f af1b 	bgt.w	4033b2 <__sfvwrite_r+0xbe>
  40357c:	e738      	b.n	4033f0 <__sfvwrite_r+0xfc>
  40357e:	461a      	mov	r2, r3
  403580:	4629      	mov	r1, r5
  403582:	9301      	str	r3, [sp, #4]
  403584:	f000 fc04 	bl	403d90 <memmove>
  403588:	6822      	ldr	r2, [r4, #0]
  40358a:	9b01      	ldr	r3, [sp, #4]
  40358c:	9800      	ldr	r0, [sp, #0]
  40358e:	441a      	add	r2, r3
  403590:	6022      	str	r2, [r4, #0]
  403592:	4621      	mov	r1, r4
  403594:	f7ff fc4a 	bl	402e2c <_fflush_r>
  403598:	9b01      	ldr	r3, [sp, #4]
  40359a:	2800      	cmp	r0, #0
  40359c:	f47f af28 	bne.w	4033f0 <__sfvwrite_r+0xfc>
  4035a0:	461f      	mov	r7, r3
  4035a2:	e750      	b.n	403446 <__sfvwrite_r+0x152>
  4035a4:	9800      	ldr	r0, [sp, #0]
  4035a6:	f000 fc63 	bl	403e70 <_realloc_r>
  4035aa:	4683      	mov	fp, r0
  4035ac:	2800      	cmp	r0, #0
  4035ae:	d1c5      	bne.n	40353c <__sfvwrite_r+0x248>
  4035b0:	9d00      	ldr	r5, [sp, #0]
  4035b2:	6921      	ldr	r1, [r4, #16]
  4035b4:	4628      	mov	r0, r5
  4035b6:	f7ff fdb7 	bl	403128 <_free_r>
  4035ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035be:	220c      	movs	r2, #12
  4035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4035c4:	602a      	str	r2, [r5, #0]
  4035c6:	e715      	b.n	4033f4 <__sfvwrite_r+0x100>
  4035c8:	f106 0901 	add.w	r9, r6, #1
  4035cc:	e722      	b.n	403414 <__sfvwrite_r+0x120>
  4035ce:	f04f 30ff 	mov.w	r0, #4294967295
  4035d2:	e6bf      	b.n	403354 <__sfvwrite_r+0x60>
  4035d4:	9a00      	ldr	r2, [sp, #0]
  4035d6:	230c      	movs	r3, #12
  4035d8:	6013      	str	r3, [r2, #0]
  4035da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035de:	e709      	b.n	4033f4 <__sfvwrite_r+0x100>
  4035e0:	7ffffc00 	.word	0x7ffffc00

004035e4 <_fwalk_reent>:
  4035e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4035ec:	d01f      	beq.n	40362e <_fwalk_reent+0x4a>
  4035ee:	4688      	mov	r8, r1
  4035f0:	4606      	mov	r6, r0
  4035f2:	f04f 0900 	mov.w	r9, #0
  4035f6:	687d      	ldr	r5, [r7, #4]
  4035f8:	68bc      	ldr	r4, [r7, #8]
  4035fa:	3d01      	subs	r5, #1
  4035fc:	d411      	bmi.n	403622 <_fwalk_reent+0x3e>
  4035fe:	89a3      	ldrh	r3, [r4, #12]
  403600:	2b01      	cmp	r3, #1
  403602:	f105 35ff 	add.w	r5, r5, #4294967295
  403606:	d908      	bls.n	40361a <_fwalk_reent+0x36>
  403608:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40360c:	3301      	adds	r3, #1
  40360e:	4621      	mov	r1, r4
  403610:	4630      	mov	r0, r6
  403612:	d002      	beq.n	40361a <_fwalk_reent+0x36>
  403614:	47c0      	blx	r8
  403616:	ea49 0900 	orr.w	r9, r9, r0
  40361a:	1c6b      	adds	r3, r5, #1
  40361c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403620:	d1ed      	bne.n	4035fe <_fwalk_reent+0x1a>
  403622:	683f      	ldr	r7, [r7, #0]
  403624:	2f00      	cmp	r7, #0
  403626:	d1e6      	bne.n	4035f6 <_fwalk_reent+0x12>
  403628:	4648      	mov	r0, r9
  40362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40362e:	46b9      	mov	r9, r7
  403630:	4648      	mov	r0, r9
  403632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403636:	bf00      	nop

00403638 <__locale_mb_cur_max>:
  403638:	4b04      	ldr	r3, [pc, #16]	; (40364c <__locale_mb_cur_max+0x14>)
  40363a:	4a05      	ldr	r2, [pc, #20]	; (403650 <__locale_mb_cur_max+0x18>)
  40363c:	681b      	ldr	r3, [r3, #0]
  40363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403640:	2b00      	cmp	r3, #0
  403642:	bf08      	it	eq
  403644:	4613      	moveq	r3, r2
  403646:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40364a:	4770      	bx	lr
  40364c:	20400008 	.word	0x20400008
  403650:	2040043c 	.word	0x2040043c

00403654 <__retarget_lock_init_recursive>:
  403654:	4770      	bx	lr
  403656:	bf00      	nop

00403658 <__retarget_lock_close_recursive>:
  403658:	4770      	bx	lr
  40365a:	bf00      	nop

0040365c <__retarget_lock_acquire_recursive>:
  40365c:	4770      	bx	lr
  40365e:	bf00      	nop

00403660 <__retarget_lock_release_recursive>:
  403660:	4770      	bx	lr
  403662:	bf00      	nop

00403664 <__swhatbuf_r>:
  403664:	b570      	push	{r4, r5, r6, lr}
  403666:	460c      	mov	r4, r1
  403668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40366c:	2900      	cmp	r1, #0
  40366e:	b090      	sub	sp, #64	; 0x40
  403670:	4615      	mov	r5, r2
  403672:	461e      	mov	r6, r3
  403674:	db14      	blt.n	4036a0 <__swhatbuf_r+0x3c>
  403676:	aa01      	add	r2, sp, #4
  403678:	f000 ffec 	bl	404654 <_fstat_r>
  40367c:	2800      	cmp	r0, #0
  40367e:	db0f      	blt.n	4036a0 <__swhatbuf_r+0x3c>
  403680:	9a02      	ldr	r2, [sp, #8]
  403682:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403686:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40368a:	fab2 f282 	clz	r2, r2
  40368e:	0952      	lsrs	r2, r2, #5
  403690:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403694:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403698:	6032      	str	r2, [r6, #0]
  40369a:	602b      	str	r3, [r5, #0]
  40369c:	b010      	add	sp, #64	; 0x40
  40369e:	bd70      	pop	{r4, r5, r6, pc}
  4036a0:	89a2      	ldrh	r2, [r4, #12]
  4036a2:	2300      	movs	r3, #0
  4036a4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4036a8:	6033      	str	r3, [r6, #0]
  4036aa:	d004      	beq.n	4036b6 <__swhatbuf_r+0x52>
  4036ac:	2240      	movs	r2, #64	; 0x40
  4036ae:	4618      	mov	r0, r3
  4036b0:	602a      	str	r2, [r5, #0]
  4036b2:	b010      	add	sp, #64	; 0x40
  4036b4:	bd70      	pop	{r4, r5, r6, pc}
  4036b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036ba:	602b      	str	r3, [r5, #0]
  4036bc:	b010      	add	sp, #64	; 0x40
  4036be:	bd70      	pop	{r4, r5, r6, pc}

004036c0 <__smakebuf_r>:
  4036c0:	898a      	ldrh	r2, [r1, #12]
  4036c2:	0792      	lsls	r2, r2, #30
  4036c4:	460b      	mov	r3, r1
  4036c6:	d506      	bpl.n	4036d6 <__smakebuf_r+0x16>
  4036c8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4036cc:	2101      	movs	r1, #1
  4036ce:	601a      	str	r2, [r3, #0]
  4036d0:	611a      	str	r2, [r3, #16]
  4036d2:	6159      	str	r1, [r3, #20]
  4036d4:	4770      	bx	lr
  4036d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036d8:	b083      	sub	sp, #12
  4036da:	ab01      	add	r3, sp, #4
  4036dc:	466a      	mov	r2, sp
  4036de:	460c      	mov	r4, r1
  4036e0:	4606      	mov	r6, r0
  4036e2:	f7ff ffbf 	bl	403664 <__swhatbuf_r>
  4036e6:	9900      	ldr	r1, [sp, #0]
  4036e8:	4605      	mov	r5, r0
  4036ea:	4630      	mov	r0, r6
  4036ec:	f000 f83a 	bl	403764 <_malloc_r>
  4036f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036f4:	b1d8      	cbz	r0, 40372e <__smakebuf_r+0x6e>
  4036f6:	9a01      	ldr	r2, [sp, #4]
  4036f8:	4f15      	ldr	r7, [pc, #84]	; (403750 <__smakebuf_r+0x90>)
  4036fa:	9900      	ldr	r1, [sp, #0]
  4036fc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4036fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403702:	81a3      	strh	r3, [r4, #12]
  403704:	6020      	str	r0, [r4, #0]
  403706:	6120      	str	r0, [r4, #16]
  403708:	6161      	str	r1, [r4, #20]
  40370a:	b91a      	cbnz	r2, 403714 <__smakebuf_r+0x54>
  40370c:	432b      	orrs	r3, r5
  40370e:	81a3      	strh	r3, [r4, #12]
  403710:	b003      	add	sp, #12
  403712:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403714:	4630      	mov	r0, r6
  403716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40371a:	f000 ffaf 	bl	40467c <_isatty_r>
  40371e:	b1a0      	cbz	r0, 40374a <__smakebuf_r+0x8a>
  403720:	89a3      	ldrh	r3, [r4, #12]
  403722:	f023 0303 	bic.w	r3, r3, #3
  403726:	f043 0301 	orr.w	r3, r3, #1
  40372a:	b21b      	sxth	r3, r3
  40372c:	e7ee      	b.n	40370c <__smakebuf_r+0x4c>
  40372e:	059a      	lsls	r2, r3, #22
  403730:	d4ee      	bmi.n	403710 <__smakebuf_r+0x50>
  403732:	f023 0303 	bic.w	r3, r3, #3
  403736:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40373a:	f043 0302 	orr.w	r3, r3, #2
  40373e:	2101      	movs	r1, #1
  403740:	81a3      	strh	r3, [r4, #12]
  403742:	6022      	str	r2, [r4, #0]
  403744:	6122      	str	r2, [r4, #16]
  403746:	6161      	str	r1, [r4, #20]
  403748:	e7e2      	b.n	403710 <__smakebuf_r+0x50>
  40374a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40374e:	e7dd      	b.n	40370c <__smakebuf_r+0x4c>
  403750:	00402e81 	.word	0x00402e81

00403754 <malloc>:
  403754:	4b02      	ldr	r3, [pc, #8]	; (403760 <malloc+0xc>)
  403756:	4601      	mov	r1, r0
  403758:	6818      	ldr	r0, [r3, #0]
  40375a:	f000 b803 	b.w	403764 <_malloc_r>
  40375e:	bf00      	nop
  403760:	20400008 	.word	0x20400008

00403764 <_malloc_r>:
  403764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403768:	f101 060b 	add.w	r6, r1, #11
  40376c:	2e16      	cmp	r6, #22
  40376e:	b083      	sub	sp, #12
  403770:	4605      	mov	r5, r0
  403772:	f240 809e 	bls.w	4038b2 <_malloc_r+0x14e>
  403776:	f036 0607 	bics.w	r6, r6, #7
  40377a:	f100 80bd 	bmi.w	4038f8 <_malloc_r+0x194>
  40377e:	42b1      	cmp	r1, r6
  403780:	f200 80ba 	bhi.w	4038f8 <_malloc_r+0x194>
  403784:	f000 fb68 	bl	403e58 <__malloc_lock>
  403788:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40378c:	f0c0 8293 	bcc.w	403cb6 <_malloc_r+0x552>
  403790:	0a73      	lsrs	r3, r6, #9
  403792:	f000 80b8 	beq.w	403906 <_malloc_r+0x1a2>
  403796:	2b04      	cmp	r3, #4
  403798:	f200 8179 	bhi.w	403a8e <_malloc_r+0x32a>
  40379c:	09b3      	lsrs	r3, r6, #6
  40379e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4037a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4037a6:	00c3      	lsls	r3, r0, #3
  4037a8:	4fbf      	ldr	r7, [pc, #764]	; (403aa8 <_malloc_r+0x344>)
  4037aa:	443b      	add	r3, r7
  4037ac:	f1a3 0108 	sub.w	r1, r3, #8
  4037b0:	685c      	ldr	r4, [r3, #4]
  4037b2:	42a1      	cmp	r1, r4
  4037b4:	d106      	bne.n	4037c4 <_malloc_r+0x60>
  4037b6:	e00c      	b.n	4037d2 <_malloc_r+0x6e>
  4037b8:	2a00      	cmp	r2, #0
  4037ba:	f280 80aa 	bge.w	403912 <_malloc_r+0x1ae>
  4037be:	68e4      	ldr	r4, [r4, #12]
  4037c0:	42a1      	cmp	r1, r4
  4037c2:	d006      	beq.n	4037d2 <_malloc_r+0x6e>
  4037c4:	6863      	ldr	r3, [r4, #4]
  4037c6:	f023 0303 	bic.w	r3, r3, #3
  4037ca:	1b9a      	subs	r2, r3, r6
  4037cc:	2a0f      	cmp	r2, #15
  4037ce:	ddf3      	ble.n	4037b8 <_malloc_r+0x54>
  4037d0:	4670      	mov	r0, lr
  4037d2:	693c      	ldr	r4, [r7, #16]
  4037d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403abc <_malloc_r+0x358>
  4037d8:	4574      	cmp	r4, lr
  4037da:	f000 81ab 	beq.w	403b34 <_malloc_r+0x3d0>
  4037de:	6863      	ldr	r3, [r4, #4]
  4037e0:	f023 0303 	bic.w	r3, r3, #3
  4037e4:	1b9a      	subs	r2, r3, r6
  4037e6:	2a0f      	cmp	r2, #15
  4037e8:	f300 8190 	bgt.w	403b0c <_malloc_r+0x3a8>
  4037ec:	2a00      	cmp	r2, #0
  4037ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4037f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4037f6:	f280 809d 	bge.w	403934 <_malloc_r+0x1d0>
  4037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4037fe:	f080 8161 	bcs.w	403ac4 <_malloc_r+0x360>
  403802:	08db      	lsrs	r3, r3, #3
  403804:	f103 0c01 	add.w	ip, r3, #1
  403808:	1099      	asrs	r1, r3, #2
  40380a:	687a      	ldr	r2, [r7, #4]
  40380c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403810:	f8c4 8008 	str.w	r8, [r4, #8]
  403814:	2301      	movs	r3, #1
  403816:	408b      	lsls	r3, r1
  403818:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40381c:	4313      	orrs	r3, r2
  40381e:	3908      	subs	r1, #8
  403820:	60e1      	str	r1, [r4, #12]
  403822:	607b      	str	r3, [r7, #4]
  403824:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403828:	f8c8 400c 	str.w	r4, [r8, #12]
  40382c:	1082      	asrs	r2, r0, #2
  40382e:	2401      	movs	r4, #1
  403830:	4094      	lsls	r4, r2
  403832:	429c      	cmp	r4, r3
  403834:	f200 808b 	bhi.w	40394e <_malloc_r+0x1ea>
  403838:	421c      	tst	r4, r3
  40383a:	d106      	bne.n	40384a <_malloc_r+0xe6>
  40383c:	f020 0003 	bic.w	r0, r0, #3
  403840:	0064      	lsls	r4, r4, #1
  403842:	421c      	tst	r4, r3
  403844:	f100 0004 	add.w	r0, r0, #4
  403848:	d0fa      	beq.n	403840 <_malloc_r+0xdc>
  40384a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40384e:	46cc      	mov	ip, r9
  403850:	4680      	mov	r8, r0
  403852:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403856:	459c      	cmp	ip, r3
  403858:	d107      	bne.n	40386a <_malloc_r+0x106>
  40385a:	e16d      	b.n	403b38 <_malloc_r+0x3d4>
  40385c:	2a00      	cmp	r2, #0
  40385e:	f280 817b 	bge.w	403b58 <_malloc_r+0x3f4>
  403862:	68db      	ldr	r3, [r3, #12]
  403864:	459c      	cmp	ip, r3
  403866:	f000 8167 	beq.w	403b38 <_malloc_r+0x3d4>
  40386a:	6859      	ldr	r1, [r3, #4]
  40386c:	f021 0103 	bic.w	r1, r1, #3
  403870:	1b8a      	subs	r2, r1, r6
  403872:	2a0f      	cmp	r2, #15
  403874:	ddf2      	ble.n	40385c <_malloc_r+0xf8>
  403876:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40387a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40387e:	9300      	str	r3, [sp, #0]
  403880:	199c      	adds	r4, r3, r6
  403882:	4628      	mov	r0, r5
  403884:	f046 0601 	orr.w	r6, r6, #1
  403888:	f042 0501 	orr.w	r5, r2, #1
  40388c:	605e      	str	r6, [r3, #4]
  40388e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403892:	f8cc 8008 	str.w	r8, [ip, #8]
  403896:	617c      	str	r4, [r7, #20]
  403898:	613c      	str	r4, [r7, #16]
  40389a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40389e:	f8c4 e008 	str.w	lr, [r4, #8]
  4038a2:	6065      	str	r5, [r4, #4]
  4038a4:	505a      	str	r2, [r3, r1]
  4038a6:	f000 fadd 	bl	403e64 <__malloc_unlock>
  4038aa:	9b00      	ldr	r3, [sp, #0]
  4038ac:	f103 0408 	add.w	r4, r3, #8
  4038b0:	e01e      	b.n	4038f0 <_malloc_r+0x18c>
  4038b2:	2910      	cmp	r1, #16
  4038b4:	d820      	bhi.n	4038f8 <_malloc_r+0x194>
  4038b6:	f000 facf 	bl	403e58 <__malloc_lock>
  4038ba:	2610      	movs	r6, #16
  4038bc:	2318      	movs	r3, #24
  4038be:	2002      	movs	r0, #2
  4038c0:	4f79      	ldr	r7, [pc, #484]	; (403aa8 <_malloc_r+0x344>)
  4038c2:	443b      	add	r3, r7
  4038c4:	f1a3 0208 	sub.w	r2, r3, #8
  4038c8:	685c      	ldr	r4, [r3, #4]
  4038ca:	4294      	cmp	r4, r2
  4038cc:	f000 813d 	beq.w	403b4a <_malloc_r+0x3e6>
  4038d0:	6863      	ldr	r3, [r4, #4]
  4038d2:	68e1      	ldr	r1, [r4, #12]
  4038d4:	68a6      	ldr	r6, [r4, #8]
  4038d6:	f023 0303 	bic.w	r3, r3, #3
  4038da:	4423      	add	r3, r4
  4038dc:	4628      	mov	r0, r5
  4038de:	685a      	ldr	r2, [r3, #4]
  4038e0:	60f1      	str	r1, [r6, #12]
  4038e2:	f042 0201 	orr.w	r2, r2, #1
  4038e6:	608e      	str	r6, [r1, #8]
  4038e8:	605a      	str	r2, [r3, #4]
  4038ea:	f000 fabb 	bl	403e64 <__malloc_unlock>
  4038ee:	3408      	adds	r4, #8
  4038f0:	4620      	mov	r0, r4
  4038f2:	b003      	add	sp, #12
  4038f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038f8:	2400      	movs	r4, #0
  4038fa:	230c      	movs	r3, #12
  4038fc:	4620      	mov	r0, r4
  4038fe:	602b      	str	r3, [r5, #0]
  403900:	b003      	add	sp, #12
  403902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403906:	2040      	movs	r0, #64	; 0x40
  403908:	f44f 7300 	mov.w	r3, #512	; 0x200
  40390c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403910:	e74a      	b.n	4037a8 <_malloc_r+0x44>
  403912:	4423      	add	r3, r4
  403914:	68e1      	ldr	r1, [r4, #12]
  403916:	685a      	ldr	r2, [r3, #4]
  403918:	68a6      	ldr	r6, [r4, #8]
  40391a:	f042 0201 	orr.w	r2, r2, #1
  40391e:	60f1      	str	r1, [r6, #12]
  403920:	4628      	mov	r0, r5
  403922:	608e      	str	r6, [r1, #8]
  403924:	605a      	str	r2, [r3, #4]
  403926:	f000 fa9d 	bl	403e64 <__malloc_unlock>
  40392a:	3408      	adds	r4, #8
  40392c:	4620      	mov	r0, r4
  40392e:	b003      	add	sp, #12
  403930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403934:	4423      	add	r3, r4
  403936:	4628      	mov	r0, r5
  403938:	685a      	ldr	r2, [r3, #4]
  40393a:	f042 0201 	orr.w	r2, r2, #1
  40393e:	605a      	str	r2, [r3, #4]
  403940:	f000 fa90 	bl	403e64 <__malloc_unlock>
  403944:	3408      	adds	r4, #8
  403946:	4620      	mov	r0, r4
  403948:	b003      	add	sp, #12
  40394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40394e:	68bc      	ldr	r4, [r7, #8]
  403950:	6863      	ldr	r3, [r4, #4]
  403952:	f023 0803 	bic.w	r8, r3, #3
  403956:	45b0      	cmp	r8, r6
  403958:	d304      	bcc.n	403964 <_malloc_r+0x200>
  40395a:	eba8 0306 	sub.w	r3, r8, r6
  40395e:	2b0f      	cmp	r3, #15
  403960:	f300 8085 	bgt.w	403a6e <_malloc_r+0x30a>
  403964:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403ac0 <_malloc_r+0x35c>
  403968:	4b50      	ldr	r3, [pc, #320]	; (403aac <_malloc_r+0x348>)
  40396a:	f8d9 2000 	ldr.w	r2, [r9]
  40396e:	681b      	ldr	r3, [r3, #0]
  403970:	3201      	adds	r2, #1
  403972:	4433      	add	r3, r6
  403974:	eb04 0a08 	add.w	sl, r4, r8
  403978:	f000 8155 	beq.w	403c26 <_malloc_r+0x4c2>
  40397c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403980:	330f      	adds	r3, #15
  403982:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403986:	f02b 0b0f 	bic.w	fp, fp, #15
  40398a:	4659      	mov	r1, fp
  40398c:	4628      	mov	r0, r5
  40398e:	f000 fc15 	bl	4041bc <_sbrk_r>
  403992:	1c41      	adds	r1, r0, #1
  403994:	4602      	mov	r2, r0
  403996:	f000 80fc 	beq.w	403b92 <_malloc_r+0x42e>
  40399a:	4582      	cmp	sl, r0
  40399c:	f200 80f7 	bhi.w	403b8e <_malloc_r+0x42a>
  4039a0:	4b43      	ldr	r3, [pc, #268]	; (403ab0 <_malloc_r+0x34c>)
  4039a2:	6819      	ldr	r1, [r3, #0]
  4039a4:	4459      	add	r1, fp
  4039a6:	6019      	str	r1, [r3, #0]
  4039a8:	f000 814d 	beq.w	403c46 <_malloc_r+0x4e2>
  4039ac:	f8d9 0000 	ldr.w	r0, [r9]
  4039b0:	3001      	adds	r0, #1
  4039b2:	bf1b      	ittet	ne
  4039b4:	eba2 0a0a 	subne.w	sl, r2, sl
  4039b8:	4451      	addne	r1, sl
  4039ba:	f8c9 2000 	streq.w	r2, [r9]
  4039be:	6019      	strne	r1, [r3, #0]
  4039c0:	f012 0107 	ands.w	r1, r2, #7
  4039c4:	f000 8115 	beq.w	403bf2 <_malloc_r+0x48e>
  4039c8:	f1c1 0008 	rsb	r0, r1, #8
  4039cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4039d0:	4402      	add	r2, r0
  4039d2:	3108      	adds	r1, #8
  4039d4:	eb02 090b 	add.w	r9, r2, fp
  4039d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4039dc:	eba1 0909 	sub.w	r9, r1, r9
  4039e0:	4649      	mov	r1, r9
  4039e2:	4628      	mov	r0, r5
  4039e4:	9301      	str	r3, [sp, #4]
  4039e6:	9200      	str	r2, [sp, #0]
  4039e8:	f000 fbe8 	bl	4041bc <_sbrk_r>
  4039ec:	1c43      	adds	r3, r0, #1
  4039ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4039f2:	f000 8143 	beq.w	403c7c <_malloc_r+0x518>
  4039f6:	1a80      	subs	r0, r0, r2
  4039f8:	4448      	add	r0, r9
  4039fa:	f040 0001 	orr.w	r0, r0, #1
  4039fe:	6819      	ldr	r1, [r3, #0]
  403a00:	60ba      	str	r2, [r7, #8]
  403a02:	4449      	add	r1, r9
  403a04:	42bc      	cmp	r4, r7
  403a06:	6050      	str	r0, [r2, #4]
  403a08:	6019      	str	r1, [r3, #0]
  403a0a:	d017      	beq.n	403a3c <_malloc_r+0x2d8>
  403a0c:	f1b8 0f0f 	cmp.w	r8, #15
  403a10:	f240 80fb 	bls.w	403c0a <_malloc_r+0x4a6>
  403a14:	6860      	ldr	r0, [r4, #4]
  403a16:	f1a8 020c 	sub.w	r2, r8, #12
  403a1a:	f022 0207 	bic.w	r2, r2, #7
  403a1e:	eb04 0e02 	add.w	lr, r4, r2
  403a22:	f000 0001 	and.w	r0, r0, #1
  403a26:	f04f 0c05 	mov.w	ip, #5
  403a2a:	4310      	orrs	r0, r2
  403a2c:	2a0f      	cmp	r2, #15
  403a2e:	6060      	str	r0, [r4, #4]
  403a30:	f8ce c004 	str.w	ip, [lr, #4]
  403a34:	f8ce c008 	str.w	ip, [lr, #8]
  403a38:	f200 8117 	bhi.w	403c6a <_malloc_r+0x506>
  403a3c:	4b1d      	ldr	r3, [pc, #116]	; (403ab4 <_malloc_r+0x350>)
  403a3e:	68bc      	ldr	r4, [r7, #8]
  403a40:	681a      	ldr	r2, [r3, #0]
  403a42:	4291      	cmp	r1, r2
  403a44:	bf88      	it	hi
  403a46:	6019      	strhi	r1, [r3, #0]
  403a48:	4b1b      	ldr	r3, [pc, #108]	; (403ab8 <_malloc_r+0x354>)
  403a4a:	681a      	ldr	r2, [r3, #0]
  403a4c:	4291      	cmp	r1, r2
  403a4e:	6862      	ldr	r2, [r4, #4]
  403a50:	bf88      	it	hi
  403a52:	6019      	strhi	r1, [r3, #0]
  403a54:	f022 0203 	bic.w	r2, r2, #3
  403a58:	4296      	cmp	r6, r2
  403a5a:	eba2 0306 	sub.w	r3, r2, r6
  403a5e:	d801      	bhi.n	403a64 <_malloc_r+0x300>
  403a60:	2b0f      	cmp	r3, #15
  403a62:	dc04      	bgt.n	403a6e <_malloc_r+0x30a>
  403a64:	4628      	mov	r0, r5
  403a66:	f000 f9fd 	bl	403e64 <__malloc_unlock>
  403a6a:	2400      	movs	r4, #0
  403a6c:	e740      	b.n	4038f0 <_malloc_r+0x18c>
  403a6e:	19a2      	adds	r2, r4, r6
  403a70:	f043 0301 	orr.w	r3, r3, #1
  403a74:	f046 0601 	orr.w	r6, r6, #1
  403a78:	6066      	str	r6, [r4, #4]
  403a7a:	4628      	mov	r0, r5
  403a7c:	60ba      	str	r2, [r7, #8]
  403a7e:	6053      	str	r3, [r2, #4]
  403a80:	f000 f9f0 	bl	403e64 <__malloc_unlock>
  403a84:	3408      	adds	r4, #8
  403a86:	4620      	mov	r0, r4
  403a88:	b003      	add	sp, #12
  403a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a8e:	2b14      	cmp	r3, #20
  403a90:	d971      	bls.n	403b76 <_malloc_r+0x412>
  403a92:	2b54      	cmp	r3, #84	; 0x54
  403a94:	f200 80a3 	bhi.w	403bde <_malloc_r+0x47a>
  403a98:	0b33      	lsrs	r3, r6, #12
  403a9a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403a9e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403aa2:	00c3      	lsls	r3, r0, #3
  403aa4:	e680      	b.n	4037a8 <_malloc_r+0x44>
  403aa6:	bf00      	nop
  403aa8:	204005a8 	.word	0x204005a8
  403aac:	20401454 	.word	0x20401454
  403ab0:	20401424 	.word	0x20401424
  403ab4:	2040144c 	.word	0x2040144c
  403ab8:	20401450 	.word	0x20401450
  403abc:	204005b0 	.word	0x204005b0
  403ac0:	204009b0 	.word	0x204009b0
  403ac4:	0a5a      	lsrs	r2, r3, #9
  403ac6:	2a04      	cmp	r2, #4
  403ac8:	d95b      	bls.n	403b82 <_malloc_r+0x41e>
  403aca:	2a14      	cmp	r2, #20
  403acc:	f200 80ae 	bhi.w	403c2c <_malloc_r+0x4c8>
  403ad0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403ad4:	00c9      	lsls	r1, r1, #3
  403ad6:	325b      	adds	r2, #91	; 0x5b
  403ad8:	eb07 0c01 	add.w	ip, r7, r1
  403adc:	5879      	ldr	r1, [r7, r1]
  403ade:	f1ac 0c08 	sub.w	ip, ip, #8
  403ae2:	458c      	cmp	ip, r1
  403ae4:	f000 8088 	beq.w	403bf8 <_malloc_r+0x494>
  403ae8:	684a      	ldr	r2, [r1, #4]
  403aea:	f022 0203 	bic.w	r2, r2, #3
  403aee:	4293      	cmp	r3, r2
  403af0:	d273      	bcs.n	403bda <_malloc_r+0x476>
  403af2:	6889      	ldr	r1, [r1, #8]
  403af4:	458c      	cmp	ip, r1
  403af6:	d1f7      	bne.n	403ae8 <_malloc_r+0x384>
  403af8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403afc:	687b      	ldr	r3, [r7, #4]
  403afe:	60e2      	str	r2, [r4, #12]
  403b00:	f8c4 c008 	str.w	ip, [r4, #8]
  403b04:	6094      	str	r4, [r2, #8]
  403b06:	f8cc 400c 	str.w	r4, [ip, #12]
  403b0a:	e68f      	b.n	40382c <_malloc_r+0xc8>
  403b0c:	19a1      	adds	r1, r4, r6
  403b0e:	f046 0c01 	orr.w	ip, r6, #1
  403b12:	f042 0601 	orr.w	r6, r2, #1
  403b16:	f8c4 c004 	str.w	ip, [r4, #4]
  403b1a:	4628      	mov	r0, r5
  403b1c:	6179      	str	r1, [r7, #20]
  403b1e:	6139      	str	r1, [r7, #16]
  403b20:	f8c1 e00c 	str.w	lr, [r1, #12]
  403b24:	f8c1 e008 	str.w	lr, [r1, #8]
  403b28:	604e      	str	r6, [r1, #4]
  403b2a:	50e2      	str	r2, [r4, r3]
  403b2c:	f000 f99a 	bl	403e64 <__malloc_unlock>
  403b30:	3408      	adds	r4, #8
  403b32:	e6dd      	b.n	4038f0 <_malloc_r+0x18c>
  403b34:	687b      	ldr	r3, [r7, #4]
  403b36:	e679      	b.n	40382c <_malloc_r+0xc8>
  403b38:	f108 0801 	add.w	r8, r8, #1
  403b3c:	f018 0f03 	tst.w	r8, #3
  403b40:	f10c 0c08 	add.w	ip, ip, #8
  403b44:	f47f ae85 	bne.w	403852 <_malloc_r+0xee>
  403b48:	e02d      	b.n	403ba6 <_malloc_r+0x442>
  403b4a:	68dc      	ldr	r4, [r3, #12]
  403b4c:	42a3      	cmp	r3, r4
  403b4e:	bf08      	it	eq
  403b50:	3002      	addeq	r0, #2
  403b52:	f43f ae3e 	beq.w	4037d2 <_malloc_r+0x6e>
  403b56:	e6bb      	b.n	4038d0 <_malloc_r+0x16c>
  403b58:	4419      	add	r1, r3
  403b5a:	461c      	mov	r4, r3
  403b5c:	684a      	ldr	r2, [r1, #4]
  403b5e:	68db      	ldr	r3, [r3, #12]
  403b60:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403b64:	f042 0201 	orr.w	r2, r2, #1
  403b68:	604a      	str	r2, [r1, #4]
  403b6a:	4628      	mov	r0, r5
  403b6c:	60f3      	str	r3, [r6, #12]
  403b6e:	609e      	str	r6, [r3, #8]
  403b70:	f000 f978 	bl	403e64 <__malloc_unlock>
  403b74:	e6bc      	b.n	4038f0 <_malloc_r+0x18c>
  403b76:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403b7a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403b7e:	00c3      	lsls	r3, r0, #3
  403b80:	e612      	b.n	4037a8 <_malloc_r+0x44>
  403b82:	099a      	lsrs	r2, r3, #6
  403b84:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403b88:	00c9      	lsls	r1, r1, #3
  403b8a:	3238      	adds	r2, #56	; 0x38
  403b8c:	e7a4      	b.n	403ad8 <_malloc_r+0x374>
  403b8e:	42bc      	cmp	r4, r7
  403b90:	d054      	beq.n	403c3c <_malloc_r+0x4d8>
  403b92:	68bc      	ldr	r4, [r7, #8]
  403b94:	6862      	ldr	r2, [r4, #4]
  403b96:	f022 0203 	bic.w	r2, r2, #3
  403b9a:	e75d      	b.n	403a58 <_malloc_r+0x2f4>
  403b9c:	f859 3908 	ldr.w	r3, [r9], #-8
  403ba0:	4599      	cmp	r9, r3
  403ba2:	f040 8086 	bne.w	403cb2 <_malloc_r+0x54e>
  403ba6:	f010 0f03 	tst.w	r0, #3
  403baa:	f100 30ff 	add.w	r0, r0, #4294967295
  403bae:	d1f5      	bne.n	403b9c <_malloc_r+0x438>
  403bb0:	687b      	ldr	r3, [r7, #4]
  403bb2:	ea23 0304 	bic.w	r3, r3, r4
  403bb6:	607b      	str	r3, [r7, #4]
  403bb8:	0064      	lsls	r4, r4, #1
  403bba:	429c      	cmp	r4, r3
  403bbc:	f63f aec7 	bhi.w	40394e <_malloc_r+0x1ea>
  403bc0:	2c00      	cmp	r4, #0
  403bc2:	f43f aec4 	beq.w	40394e <_malloc_r+0x1ea>
  403bc6:	421c      	tst	r4, r3
  403bc8:	4640      	mov	r0, r8
  403bca:	f47f ae3e 	bne.w	40384a <_malloc_r+0xe6>
  403bce:	0064      	lsls	r4, r4, #1
  403bd0:	421c      	tst	r4, r3
  403bd2:	f100 0004 	add.w	r0, r0, #4
  403bd6:	d0fa      	beq.n	403bce <_malloc_r+0x46a>
  403bd8:	e637      	b.n	40384a <_malloc_r+0xe6>
  403bda:	468c      	mov	ip, r1
  403bdc:	e78c      	b.n	403af8 <_malloc_r+0x394>
  403bde:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403be2:	d815      	bhi.n	403c10 <_malloc_r+0x4ac>
  403be4:	0bf3      	lsrs	r3, r6, #15
  403be6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403bea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403bee:	00c3      	lsls	r3, r0, #3
  403bf0:	e5da      	b.n	4037a8 <_malloc_r+0x44>
  403bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403bf6:	e6ed      	b.n	4039d4 <_malloc_r+0x270>
  403bf8:	687b      	ldr	r3, [r7, #4]
  403bfa:	1092      	asrs	r2, r2, #2
  403bfc:	2101      	movs	r1, #1
  403bfe:	fa01 f202 	lsl.w	r2, r1, r2
  403c02:	4313      	orrs	r3, r2
  403c04:	607b      	str	r3, [r7, #4]
  403c06:	4662      	mov	r2, ip
  403c08:	e779      	b.n	403afe <_malloc_r+0x39a>
  403c0a:	2301      	movs	r3, #1
  403c0c:	6053      	str	r3, [r2, #4]
  403c0e:	e729      	b.n	403a64 <_malloc_r+0x300>
  403c10:	f240 5254 	movw	r2, #1364	; 0x554
  403c14:	4293      	cmp	r3, r2
  403c16:	d822      	bhi.n	403c5e <_malloc_r+0x4fa>
  403c18:	0cb3      	lsrs	r3, r6, #18
  403c1a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403c1e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403c22:	00c3      	lsls	r3, r0, #3
  403c24:	e5c0      	b.n	4037a8 <_malloc_r+0x44>
  403c26:	f103 0b10 	add.w	fp, r3, #16
  403c2a:	e6ae      	b.n	40398a <_malloc_r+0x226>
  403c2c:	2a54      	cmp	r2, #84	; 0x54
  403c2e:	d829      	bhi.n	403c84 <_malloc_r+0x520>
  403c30:	0b1a      	lsrs	r2, r3, #12
  403c32:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403c36:	00c9      	lsls	r1, r1, #3
  403c38:	326e      	adds	r2, #110	; 0x6e
  403c3a:	e74d      	b.n	403ad8 <_malloc_r+0x374>
  403c3c:	4b20      	ldr	r3, [pc, #128]	; (403cc0 <_malloc_r+0x55c>)
  403c3e:	6819      	ldr	r1, [r3, #0]
  403c40:	4459      	add	r1, fp
  403c42:	6019      	str	r1, [r3, #0]
  403c44:	e6b2      	b.n	4039ac <_malloc_r+0x248>
  403c46:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403c4a:	2800      	cmp	r0, #0
  403c4c:	f47f aeae 	bne.w	4039ac <_malloc_r+0x248>
  403c50:	eb08 030b 	add.w	r3, r8, fp
  403c54:	68ba      	ldr	r2, [r7, #8]
  403c56:	f043 0301 	orr.w	r3, r3, #1
  403c5a:	6053      	str	r3, [r2, #4]
  403c5c:	e6ee      	b.n	403a3c <_malloc_r+0x2d8>
  403c5e:	207f      	movs	r0, #127	; 0x7f
  403c60:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403c64:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403c68:	e59e      	b.n	4037a8 <_malloc_r+0x44>
  403c6a:	f104 0108 	add.w	r1, r4, #8
  403c6e:	4628      	mov	r0, r5
  403c70:	9300      	str	r3, [sp, #0]
  403c72:	f7ff fa59 	bl	403128 <_free_r>
  403c76:	9b00      	ldr	r3, [sp, #0]
  403c78:	6819      	ldr	r1, [r3, #0]
  403c7a:	e6df      	b.n	403a3c <_malloc_r+0x2d8>
  403c7c:	2001      	movs	r0, #1
  403c7e:	f04f 0900 	mov.w	r9, #0
  403c82:	e6bc      	b.n	4039fe <_malloc_r+0x29a>
  403c84:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403c88:	d805      	bhi.n	403c96 <_malloc_r+0x532>
  403c8a:	0bda      	lsrs	r2, r3, #15
  403c8c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403c90:	00c9      	lsls	r1, r1, #3
  403c92:	3277      	adds	r2, #119	; 0x77
  403c94:	e720      	b.n	403ad8 <_malloc_r+0x374>
  403c96:	f240 5154 	movw	r1, #1364	; 0x554
  403c9a:	428a      	cmp	r2, r1
  403c9c:	d805      	bhi.n	403caa <_malloc_r+0x546>
  403c9e:	0c9a      	lsrs	r2, r3, #18
  403ca0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403ca4:	00c9      	lsls	r1, r1, #3
  403ca6:	327c      	adds	r2, #124	; 0x7c
  403ca8:	e716      	b.n	403ad8 <_malloc_r+0x374>
  403caa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403cae:	227e      	movs	r2, #126	; 0x7e
  403cb0:	e712      	b.n	403ad8 <_malloc_r+0x374>
  403cb2:	687b      	ldr	r3, [r7, #4]
  403cb4:	e780      	b.n	403bb8 <_malloc_r+0x454>
  403cb6:	08f0      	lsrs	r0, r6, #3
  403cb8:	f106 0308 	add.w	r3, r6, #8
  403cbc:	e600      	b.n	4038c0 <_malloc_r+0x15c>
  403cbe:	bf00      	nop
  403cc0:	20401424 	.word	0x20401424

00403cc4 <__ascii_mbtowc>:
  403cc4:	b082      	sub	sp, #8
  403cc6:	b149      	cbz	r1, 403cdc <__ascii_mbtowc+0x18>
  403cc8:	b15a      	cbz	r2, 403ce2 <__ascii_mbtowc+0x1e>
  403cca:	b16b      	cbz	r3, 403ce8 <__ascii_mbtowc+0x24>
  403ccc:	7813      	ldrb	r3, [r2, #0]
  403cce:	600b      	str	r3, [r1, #0]
  403cd0:	7812      	ldrb	r2, [r2, #0]
  403cd2:	1c10      	adds	r0, r2, #0
  403cd4:	bf18      	it	ne
  403cd6:	2001      	movne	r0, #1
  403cd8:	b002      	add	sp, #8
  403cda:	4770      	bx	lr
  403cdc:	a901      	add	r1, sp, #4
  403cde:	2a00      	cmp	r2, #0
  403ce0:	d1f3      	bne.n	403cca <__ascii_mbtowc+0x6>
  403ce2:	4610      	mov	r0, r2
  403ce4:	b002      	add	sp, #8
  403ce6:	4770      	bx	lr
  403ce8:	f06f 0001 	mvn.w	r0, #1
  403cec:	e7f4      	b.n	403cd8 <__ascii_mbtowc+0x14>
  403cee:	bf00      	nop

00403cf0 <memchr>:
  403cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403cf4:	2a10      	cmp	r2, #16
  403cf6:	db2b      	blt.n	403d50 <memchr+0x60>
  403cf8:	f010 0f07 	tst.w	r0, #7
  403cfc:	d008      	beq.n	403d10 <memchr+0x20>
  403cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d02:	3a01      	subs	r2, #1
  403d04:	428b      	cmp	r3, r1
  403d06:	d02d      	beq.n	403d64 <memchr+0x74>
  403d08:	f010 0f07 	tst.w	r0, #7
  403d0c:	b342      	cbz	r2, 403d60 <memchr+0x70>
  403d0e:	d1f6      	bne.n	403cfe <memchr+0xe>
  403d10:	b4f0      	push	{r4, r5, r6, r7}
  403d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403d1a:	f022 0407 	bic.w	r4, r2, #7
  403d1e:	f07f 0700 	mvns.w	r7, #0
  403d22:	2300      	movs	r3, #0
  403d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403d28:	3c08      	subs	r4, #8
  403d2a:	ea85 0501 	eor.w	r5, r5, r1
  403d2e:	ea86 0601 	eor.w	r6, r6, r1
  403d32:	fa85 f547 	uadd8	r5, r5, r7
  403d36:	faa3 f587 	sel	r5, r3, r7
  403d3a:	fa86 f647 	uadd8	r6, r6, r7
  403d3e:	faa5 f687 	sel	r6, r5, r7
  403d42:	b98e      	cbnz	r6, 403d68 <memchr+0x78>
  403d44:	d1ee      	bne.n	403d24 <memchr+0x34>
  403d46:	bcf0      	pop	{r4, r5, r6, r7}
  403d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403d4c:	f002 0207 	and.w	r2, r2, #7
  403d50:	b132      	cbz	r2, 403d60 <memchr+0x70>
  403d52:	f810 3b01 	ldrb.w	r3, [r0], #1
  403d56:	3a01      	subs	r2, #1
  403d58:	ea83 0301 	eor.w	r3, r3, r1
  403d5c:	b113      	cbz	r3, 403d64 <memchr+0x74>
  403d5e:	d1f8      	bne.n	403d52 <memchr+0x62>
  403d60:	2000      	movs	r0, #0
  403d62:	4770      	bx	lr
  403d64:	3801      	subs	r0, #1
  403d66:	4770      	bx	lr
  403d68:	2d00      	cmp	r5, #0
  403d6a:	bf06      	itte	eq
  403d6c:	4635      	moveq	r5, r6
  403d6e:	3803      	subeq	r0, #3
  403d70:	3807      	subne	r0, #7
  403d72:	f015 0f01 	tst.w	r5, #1
  403d76:	d107      	bne.n	403d88 <memchr+0x98>
  403d78:	3001      	adds	r0, #1
  403d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403d7e:	bf02      	ittt	eq
  403d80:	3001      	addeq	r0, #1
  403d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403d86:	3001      	addeq	r0, #1
  403d88:	bcf0      	pop	{r4, r5, r6, r7}
  403d8a:	3801      	subs	r0, #1
  403d8c:	4770      	bx	lr
  403d8e:	bf00      	nop

00403d90 <memmove>:
  403d90:	4288      	cmp	r0, r1
  403d92:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d94:	d90d      	bls.n	403db2 <memmove+0x22>
  403d96:	188b      	adds	r3, r1, r2
  403d98:	4298      	cmp	r0, r3
  403d9a:	d20a      	bcs.n	403db2 <memmove+0x22>
  403d9c:	1884      	adds	r4, r0, r2
  403d9e:	2a00      	cmp	r2, #0
  403da0:	d051      	beq.n	403e46 <memmove+0xb6>
  403da2:	4622      	mov	r2, r4
  403da4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403da8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403dac:	4299      	cmp	r1, r3
  403dae:	d1f9      	bne.n	403da4 <memmove+0x14>
  403db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403db2:	2a0f      	cmp	r2, #15
  403db4:	d948      	bls.n	403e48 <memmove+0xb8>
  403db6:	ea41 0300 	orr.w	r3, r1, r0
  403dba:	079b      	lsls	r3, r3, #30
  403dbc:	d146      	bne.n	403e4c <memmove+0xbc>
  403dbe:	f100 0410 	add.w	r4, r0, #16
  403dc2:	f101 0310 	add.w	r3, r1, #16
  403dc6:	4615      	mov	r5, r2
  403dc8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403dcc:	f844 6c10 	str.w	r6, [r4, #-16]
  403dd0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403dd4:	f844 6c0c 	str.w	r6, [r4, #-12]
  403dd8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403ddc:	f844 6c08 	str.w	r6, [r4, #-8]
  403de0:	3d10      	subs	r5, #16
  403de2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403de6:	f844 6c04 	str.w	r6, [r4, #-4]
  403dea:	2d0f      	cmp	r5, #15
  403dec:	f103 0310 	add.w	r3, r3, #16
  403df0:	f104 0410 	add.w	r4, r4, #16
  403df4:	d8e8      	bhi.n	403dc8 <memmove+0x38>
  403df6:	f1a2 0310 	sub.w	r3, r2, #16
  403dfa:	f023 030f 	bic.w	r3, r3, #15
  403dfe:	f002 0e0f 	and.w	lr, r2, #15
  403e02:	3310      	adds	r3, #16
  403e04:	f1be 0f03 	cmp.w	lr, #3
  403e08:	4419      	add	r1, r3
  403e0a:	4403      	add	r3, r0
  403e0c:	d921      	bls.n	403e52 <memmove+0xc2>
  403e0e:	1f1e      	subs	r6, r3, #4
  403e10:	460d      	mov	r5, r1
  403e12:	4674      	mov	r4, lr
  403e14:	3c04      	subs	r4, #4
  403e16:	f855 7b04 	ldr.w	r7, [r5], #4
  403e1a:	f846 7f04 	str.w	r7, [r6, #4]!
  403e1e:	2c03      	cmp	r4, #3
  403e20:	d8f8      	bhi.n	403e14 <memmove+0x84>
  403e22:	f1ae 0404 	sub.w	r4, lr, #4
  403e26:	f024 0403 	bic.w	r4, r4, #3
  403e2a:	3404      	adds	r4, #4
  403e2c:	4421      	add	r1, r4
  403e2e:	4423      	add	r3, r4
  403e30:	f002 0203 	and.w	r2, r2, #3
  403e34:	b162      	cbz	r2, 403e50 <memmove+0xc0>
  403e36:	3b01      	subs	r3, #1
  403e38:	440a      	add	r2, r1
  403e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  403e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403e42:	428a      	cmp	r2, r1
  403e44:	d1f9      	bne.n	403e3a <memmove+0xaa>
  403e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e48:	4603      	mov	r3, r0
  403e4a:	e7f3      	b.n	403e34 <memmove+0xa4>
  403e4c:	4603      	mov	r3, r0
  403e4e:	e7f2      	b.n	403e36 <memmove+0xa6>
  403e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e52:	4672      	mov	r2, lr
  403e54:	e7ee      	b.n	403e34 <memmove+0xa4>
  403e56:	bf00      	nop

00403e58 <__malloc_lock>:
  403e58:	4801      	ldr	r0, [pc, #4]	; (403e60 <__malloc_lock+0x8>)
  403e5a:	f7ff bbff 	b.w	40365c <__retarget_lock_acquire_recursive>
  403e5e:	bf00      	nop
  403e60:	20401474 	.word	0x20401474

00403e64 <__malloc_unlock>:
  403e64:	4801      	ldr	r0, [pc, #4]	; (403e6c <__malloc_unlock+0x8>)
  403e66:	f7ff bbfb 	b.w	403660 <__retarget_lock_release_recursive>
  403e6a:	bf00      	nop
  403e6c:	20401474 	.word	0x20401474

00403e70 <_realloc_r>:
  403e70:	2900      	cmp	r1, #0
  403e72:	f000 8095 	beq.w	403fa0 <_realloc_r+0x130>
  403e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e7a:	460d      	mov	r5, r1
  403e7c:	4616      	mov	r6, r2
  403e7e:	b083      	sub	sp, #12
  403e80:	4680      	mov	r8, r0
  403e82:	f106 070b 	add.w	r7, r6, #11
  403e86:	f7ff ffe7 	bl	403e58 <__malloc_lock>
  403e8a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403e8e:	2f16      	cmp	r7, #22
  403e90:	f02e 0403 	bic.w	r4, lr, #3
  403e94:	f1a5 0908 	sub.w	r9, r5, #8
  403e98:	d83c      	bhi.n	403f14 <_realloc_r+0xa4>
  403e9a:	2210      	movs	r2, #16
  403e9c:	4617      	mov	r7, r2
  403e9e:	42be      	cmp	r6, r7
  403ea0:	d83d      	bhi.n	403f1e <_realloc_r+0xae>
  403ea2:	4294      	cmp	r4, r2
  403ea4:	da43      	bge.n	403f2e <_realloc_r+0xbe>
  403ea6:	4bc4      	ldr	r3, [pc, #784]	; (4041b8 <_realloc_r+0x348>)
  403ea8:	6899      	ldr	r1, [r3, #8]
  403eaa:	eb09 0004 	add.w	r0, r9, r4
  403eae:	4288      	cmp	r0, r1
  403eb0:	f000 80b4 	beq.w	40401c <_realloc_r+0x1ac>
  403eb4:	6843      	ldr	r3, [r0, #4]
  403eb6:	f023 0101 	bic.w	r1, r3, #1
  403eba:	4401      	add	r1, r0
  403ebc:	6849      	ldr	r1, [r1, #4]
  403ebe:	07c9      	lsls	r1, r1, #31
  403ec0:	d54c      	bpl.n	403f5c <_realloc_r+0xec>
  403ec2:	f01e 0f01 	tst.w	lr, #1
  403ec6:	f000 809b 	beq.w	404000 <_realloc_r+0x190>
  403eca:	4631      	mov	r1, r6
  403ecc:	4640      	mov	r0, r8
  403ece:	f7ff fc49 	bl	403764 <_malloc_r>
  403ed2:	4606      	mov	r6, r0
  403ed4:	2800      	cmp	r0, #0
  403ed6:	d03a      	beq.n	403f4e <_realloc_r+0xde>
  403ed8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403edc:	f023 0301 	bic.w	r3, r3, #1
  403ee0:	444b      	add	r3, r9
  403ee2:	f1a0 0208 	sub.w	r2, r0, #8
  403ee6:	429a      	cmp	r2, r3
  403ee8:	f000 8121 	beq.w	40412e <_realloc_r+0x2be>
  403eec:	1f22      	subs	r2, r4, #4
  403eee:	2a24      	cmp	r2, #36	; 0x24
  403ef0:	f200 8107 	bhi.w	404102 <_realloc_r+0x292>
  403ef4:	2a13      	cmp	r2, #19
  403ef6:	f200 80db 	bhi.w	4040b0 <_realloc_r+0x240>
  403efa:	4603      	mov	r3, r0
  403efc:	462a      	mov	r2, r5
  403efe:	6811      	ldr	r1, [r2, #0]
  403f00:	6019      	str	r1, [r3, #0]
  403f02:	6851      	ldr	r1, [r2, #4]
  403f04:	6059      	str	r1, [r3, #4]
  403f06:	6892      	ldr	r2, [r2, #8]
  403f08:	609a      	str	r2, [r3, #8]
  403f0a:	4629      	mov	r1, r5
  403f0c:	4640      	mov	r0, r8
  403f0e:	f7ff f90b 	bl	403128 <_free_r>
  403f12:	e01c      	b.n	403f4e <_realloc_r+0xde>
  403f14:	f027 0707 	bic.w	r7, r7, #7
  403f18:	2f00      	cmp	r7, #0
  403f1a:	463a      	mov	r2, r7
  403f1c:	dabf      	bge.n	403e9e <_realloc_r+0x2e>
  403f1e:	2600      	movs	r6, #0
  403f20:	230c      	movs	r3, #12
  403f22:	4630      	mov	r0, r6
  403f24:	f8c8 3000 	str.w	r3, [r8]
  403f28:	b003      	add	sp, #12
  403f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f2e:	462e      	mov	r6, r5
  403f30:	1be3      	subs	r3, r4, r7
  403f32:	2b0f      	cmp	r3, #15
  403f34:	d81e      	bhi.n	403f74 <_realloc_r+0x104>
  403f36:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403f3a:	f003 0301 	and.w	r3, r3, #1
  403f3e:	4323      	orrs	r3, r4
  403f40:	444c      	add	r4, r9
  403f42:	f8c9 3004 	str.w	r3, [r9, #4]
  403f46:	6863      	ldr	r3, [r4, #4]
  403f48:	f043 0301 	orr.w	r3, r3, #1
  403f4c:	6063      	str	r3, [r4, #4]
  403f4e:	4640      	mov	r0, r8
  403f50:	f7ff ff88 	bl	403e64 <__malloc_unlock>
  403f54:	4630      	mov	r0, r6
  403f56:	b003      	add	sp, #12
  403f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f5c:	f023 0303 	bic.w	r3, r3, #3
  403f60:	18e1      	adds	r1, r4, r3
  403f62:	4291      	cmp	r1, r2
  403f64:	db1f      	blt.n	403fa6 <_realloc_r+0x136>
  403f66:	68c3      	ldr	r3, [r0, #12]
  403f68:	6882      	ldr	r2, [r0, #8]
  403f6a:	462e      	mov	r6, r5
  403f6c:	60d3      	str	r3, [r2, #12]
  403f6e:	460c      	mov	r4, r1
  403f70:	609a      	str	r2, [r3, #8]
  403f72:	e7dd      	b.n	403f30 <_realloc_r+0xc0>
  403f74:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403f78:	eb09 0107 	add.w	r1, r9, r7
  403f7c:	f002 0201 	and.w	r2, r2, #1
  403f80:	444c      	add	r4, r9
  403f82:	f043 0301 	orr.w	r3, r3, #1
  403f86:	4317      	orrs	r7, r2
  403f88:	f8c9 7004 	str.w	r7, [r9, #4]
  403f8c:	604b      	str	r3, [r1, #4]
  403f8e:	6863      	ldr	r3, [r4, #4]
  403f90:	f043 0301 	orr.w	r3, r3, #1
  403f94:	3108      	adds	r1, #8
  403f96:	6063      	str	r3, [r4, #4]
  403f98:	4640      	mov	r0, r8
  403f9a:	f7ff f8c5 	bl	403128 <_free_r>
  403f9e:	e7d6      	b.n	403f4e <_realloc_r+0xde>
  403fa0:	4611      	mov	r1, r2
  403fa2:	f7ff bbdf 	b.w	403764 <_malloc_r>
  403fa6:	f01e 0f01 	tst.w	lr, #1
  403faa:	d18e      	bne.n	403eca <_realloc_r+0x5a>
  403fac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403fb0:	eba9 0a01 	sub.w	sl, r9, r1
  403fb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  403fb8:	f021 0103 	bic.w	r1, r1, #3
  403fbc:	440b      	add	r3, r1
  403fbe:	4423      	add	r3, r4
  403fc0:	4293      	cmp	r3, r2
  403fc2:	db25      	blt.n	404010 <_realloc_r+0x1a0>
  403fc4:	68c2      	ldr	r2, [r0, #12]
  403fc6:	6881      	ldr	r1, [r0, #8]
  403fc8:	4656      	mov	r6, sl
  403fca:	60ca      	str	r2, [r1, #12]
  403fcc:	6091      	str	r1, [r2, #8]
  403fce:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fd2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403fd6:	1f22      	subs	r2, r4, #4
  403fd8:	2a24      	cmp	r2, #36	; 0x24
  403fda:	60c1      	str	r1, [r0, #12]
  403fdc:	6088      	str	r0, [r1, #8]
  403fde:	f200 8094 	bhi.w	40410a <_realloc_r+0x29a>
  403fe2:	2a13      	cmp	r2, #19
  403fe4:	d96f      	bls.n	4040c6 <_realloc_r+0x256>
  403fe6:	6829      	ldr	r1, [r5, #0]
  403fe8:	f8ca 1008 	str.w	r1, [sl, #8]
  403fec:	6869      	ldr	r1, [r5, #4]
  403fee:	f8ca 100c 	str.w	r1, [sl, #12]
  403ff2:	2a1b      	cmp	r2, #27
  403ff4:	f200 80a2 	bhi.w	40413c <_realloc_r+0x2cc>
  403ff8:	3508      	adds	r5, #8
  403ffa:	f10a 0210 	add.w	r2, sl, #16
  403ffe:	e063      	b.n	4040c8 <_realloc_r+0x258>
  404000:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404004:	eba9 0a03 	sub.w	sl, r9, r3
  404008:	f8da 1004 	ldr.w	r1, [sl, #4]
  40400c:	f021 0103 	bic.w	r1, r1, #3
  404010:	1863      	adds	r3, r4, r1
  404012:	4293      	cmp	r3, r2
  404014:	f6ff af59 	blt.w	403eca <_realloc_r+0x5a>
  404018:	4656      	mov	r6, sl
  40401a:	e7d8      	b.n	403fce <_realloc_r+0x15e>
  40401c:	6841      	ldr	r1, [r0, #4]
  40401e:	f021 0b03 	bic.w	fp, r1, #3
  404022:	44a3      	add	fp, r4
  404024:	f107 0010 	add.w	r0, r7, #16
  404028:	4583      	cmp	fp, r0
  40402a:	da56      	bge.n	4040da <_realloc_r+0x26a>
  40402c:	f01e 0f01 	tst.w	lr, #1
  404030:	f47f af4b 	bne.w	403eca <_realloc_r+0x5a>
  404034:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404038:	eba9 0a01 	sub.w	sl, r9, r1
  40403c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404040:	f021 0103 	bic.w	r1, r1, #3
  404044:	448b      	add	fp, r1
  404046:	4558      	cmp	r0, fp
  404048:	dce2      	bgt.n	404010 <_realloc_r+0x1a0>
  40404a:	4656      	mov	r6, sl
  40404c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404050:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404054:	1f22      	subs	r2, r4, #4
  404056:	2a24      	cmp	r2, #36	; 0x24
  404058:	60c1      	str	r1, [r0, #12]
  40405a:	6088      	str	r0, [r1, #8]
  40405c:	f200 808f 	bhi.w	40417e <_realloc_r+0x30e>
  404060:	2a13      	cmp	r2, #19
  404062:	f240 808a 	bls.w	40417a <_realloc_r+0x30a>
  404066:	6829      	ldr	r1, [r5, #0]
  404068:	f8ca 1008 	str.w	r1, [sl, #8]
  40406c:	6869      	ldr	r1, [r5, #4]
  40406e:	f8ca 100c 	str.w	r1, [sl, #12]
  404072:	2a1b      	cmp	r2, #27
  404074:	f200 808a 	bhi.w	40418c <_realloc_r+0x31c>
  404078:	3508      	adds	r5, #8
  40407a:	f10a 0210 	add.w	r2, sl, #16
  40407e:	6829      	ldr	r1, [r5, #0]
  404080:	6011      	str	r1, [r2, #0]
  404082:	6869      	ldr	r1, [r5, #4]
  404084:	6051      	str	r1, [r2, #4]
  404086:	68a9      	ldr	r1, [r5, #8]
  404088:	6091      	str	r1, [r2, #8]
  40408a:	eb0a 0107 	add.w	r1, sl, r7
  40408e:	ebab 0207 	sub.w	r2, fp, r7
  404092:	f042 0201 	orr.w	r2, r2, #1
  404096:	6099      	str	r1, [r3, #8]
  404098:	604a      	str	r2, [r1, #4]
  40409a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40409e:	f003 0301 	and.w	r3, r3, #1
  4040a2:	431f      	orrs	r7, r3
  4040a4:	4640      	mov	r0, r8
  4040a6:	f8ca 7004 	str.w	r7, [sl, #4]
  4040aa:	f7ff fedb 	bl	403e64 <__malloc_unlock>
  4040ae:	e751      	b.n	403f54 <_realloc_r+0xe4>
  4040b0:	682b      	ldr	r3, [r5, #0]
  4040b2:	6003      	str	r3, [r0, #0]
  4040b4:	686b      	ldr	r3, [r5, #4]
  4040b6:	6043      	str	r3, [r0, #4]
  4040b8:	2a1b      	cmp	r2, #27
  4040ba:	d82d      	bhi.n	404118 <_realloc_r+0x2a8>
  4040bc:	f100 0308 	add.w	r3, r0, #8
  4040c0:	f105 0208 	add.w	r2, r5, #8
  4040c4:	e71b      	b.n	403efe <_realloc_r+0x8e>
  4040c6:	4632      	mov	r2, r6
  4040c8:	6829      	ldr	r1, [r5, #0]
  4040ca:	6011      	str	r1, [r2, #0]
  4040cc:	6869      	ldr	r1, [r5, #4]
  4040ce:	6051      	str	r1, [r2, #4]
  4040d0:	68a9      	ldr	r1, [r5, #8]
  4040d2:	6091      	str	r1, [r2, #8]
  4040d4:	461c      	mov	r4, r3
  4040d6:	46d1      	mov	r9, sl
  4040d8:	e72a      	b.n	403f30 <_realloc_r+0xc0>
  4040da:	eb09 0107 	add.w	r1, r9, r7
  4040de:	ebab 0b07 	sub.w	fp, fp, r7
  4040e2:	f04b 0201 	orr.w	r2, fp, #1
  4040e6:	6099      	str	r1, [r3, #8]
  4040e8:	604a      	str	r2, [r1, #4]
  4040ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4040ee:	f003 0301 	and.w	r3, r3, #1
  4040f2:	431f      	orrs	r7, r3
  4040f4:	4640      	mov	r0, r8
  4040f6:	f845 7c04 	str.w	r7, [r5, #-4]
  4040fa:	f7ff feb3 	bl	403e64 <__malloc_unlock>
  4040fe:	462e      	mov	r6, r5
  404100:	e728      	b.n	403f54 <_realloc_r+0xe4>
  404102:	4629      	mov	r1, r5
  404104:	f7ff fe44 	bl	403d90 <memmove>
  404108:	e6ff      	b.n	403f0a <_realloc_r+0x9a>
  40410a:	4629      	mov	r1, r5
  40410c:	4630      	mov	r0, r6
  40410e:	461c      	mov	r4, r3
  404110:	46d1      	mov	r9, sl
  404112:	f7ff fe3d 	bl	403d90 <memmove>
  404116:	e70b      	b.n	403f30 <_realloc_r+0xc0>
  404118:	68ab      	ldr	r3, [r5, #8]
  40411a:	6083      	str	r3, [r0, #8]
  40411c:	68eb      	ldr	r3, [r5, #12]
  40411e:	60c3      	str	r3, [r0, #12]
  404120:	2a24      	cmp	r2, #36	; 0x24
  404122:	d017      	beq.n	404154 <_realloc_r+0x2e4>
  404124:	f100 0310 	add.w	r3, r0, #16
  404128:	f105 0210 	add.w	r2, r5, #16
  40412c:	e6e7      	b.n	403efe <_realloc_r+0x8e>
  40412e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404132:	f023 0303 	bic.w	r3, r3, #3
  404136:	441c      	add	r4, r3
  404138:	462e      	mov	r6, r5
  40413a:	e6f9      	b.n	403f30 <_realloc_r+0xc0>
  40413c:	68a9      	ldr	r1, [r5, #8]
  40413e:	f8ca 1010 	str.w	r1, [sl, #16]
  404142:	68e9      	ldr	r1, [r5, #12]
  404144:	f8ca 1014 	str.w	r1, [sl, #20]
  404148:	2a24      	cmp	r2, #36	; 0x24
  40414a:	d00c      	beq.n	404166 <_realloc_r+0x2f6>
  40414c:	3510      	adds	r5, #16
  40414e:	f10a 0218 	add.w	r2, sl, #24
  404152:	e7b9      	b.n	4040c8 <_realloc_r+0x258>
  404154:	692b      	ldr	r3, [r5, #16]
  404156:	6103      	str	r3, [r0, #16]
  404158:	696b      	ldr	r3, [r5, #20]
  40415a:	6143      	str	r3, [r0, #20]
  40415c:	f105 0218 	add.w	r2, r5, #24
  404160:	f100 0318 	add.w	r3, r0, #24
  404164:	e6cb      	b.n	403efe <_realloc_r+0x8e>
  404166:	692a      	ldr	r2, [r5, #16]
  404168:	f8ca 2018 	str.w	r2, [sl, #24]
  40416c:	696a      	ldr	r2, [r5, #20]
  40416e:	f8ca 201c 	str.w	r2, [sl, #28]
  404172:	3518      	adds	r5, #24
  404174:	f10a 0220 	add.w	r2, sl, #32
  404178:	e7a6      	b.n	4040c8 <_realloc_r+0x258>
  40417a:	4632      	mov	r2, r6
  40417c:	e77f      	b.n	40407e <_realloc_r+0x20e>
  40417e:	4629      	mov	r1, r5
  404180:	4630      	mov	r0, r6
  404182:	9301      	str	r3, [sp, #4]
  404184:	f7ff fe04 	bl	403d90 <memmove>
  404188:	9b01      	ldr	r3, [sp, #4]
  40418a:	e77e      	b.n	40408a <_realloc_r+0x21a>
  40418c:	68a9      	ldr	r1, [r5, #8]
  40418e:	f8ca 1010 	str.w	r1, [sl, #16]
  404192:	68e9      	ldr	r1, [r5, #12]
  404194:	f8ca 1014 	str.w	r1, [sl, #20]
  404198:	2a24      	cmp	r2, #36	; 0x24
  40419a:	d003      	beq.n	4041a4 <_realloc_r+0x334>
  40419c:	3510      	adds	r5, #16
  40419e:	f10a 0218 	add.w	r2, sl, #24
  4041a2:	e76c      	b.n	40407e <_realloc_r+0x20e>
  4041a4:	692a      	ldr	r2, [r5, #16]
  4041a6:	f8ca 2018 	str.w	r2, [sl, #24]
  4041aa:	696a      	ldr	r2, [r5, #20]
  4041ac:	f8ca 201c 	str.w	r2, [sl, #28]
  4041b0:	3518      	adds	r5, #24
  4041b2:	f10a 0220 	add.w	r2, sl, #32
  4041b6:	e762      	b.n	40407e <_realloc_r+0x20e>
  4041b8:	204005a8 	.word	0x204005a8

004041bc <_sbrk_r>:
  4041bc:	b538      	push	{r3, r4, r5, lr}
  4041be:	4c07      	ldr	r4, [pc, #28]	; (4041dc <_sbrk_r+0x20>)
  4041c0:	2300      	movs	r3, #0
  4041c2:	4605      	mov	r5, r0
  4041c4:	4608      	mov	r0, r1
  4041c6:	6023      	str	r3, [r4, #0]
  4041c8:	f7fd f80a 	bl	4011e0 <_sbrk>
  4041cc:	1c43      	adds	r3, r0, #1
  4041ce:	d000      	beq.n	4041d2 <_sbrk_r+0x16>
  4041d0:	bd38      	pop	{r3, r4, r5, pc}
  4041d2:	6823      	ldr	r3, [r4, #0]
  4041d4:	2b00      	cmp	r3, #0
  4041d6:	d0fb      	beq.n	4041d0 <_sbrk_r+0x14>
  4041d8:	602b      	str	r3, [r5, #0]
  4041da:	bd38      	pop	{r3, r4, r5, pc}
  4041dc:	20401488 	.word	0x20401488

004041e0 <__sread>:
  4041e0:	b510      	push	{r4, lr}
  4041e2:	460c      	mov	r4, r1
  4041e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041e8:	f000 fa70 	bl	4046cc <_read_r>
  4041ec:	2800      	cmp	r0, #0
  4041ee:	db03      	blt.n	4041f8 <__sread+0x18>
  4041f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4041f2:	4403      	add	r3, r0
  4041f4:	6523      	str	r3, [r4, #80]	; 0x50
  4041f6:	bd10      	pop	{r4, pc}
  4041f8:	89a3      	ldrh	r3, [r4, #12]
  4041fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4041fe:	81a3      	strh	r3, [r4, #12]
  404200:	bd10      	pop	{r4, pc}
  404202:	bf00      	nop

00404204 <__swrite>:
  404204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404208:	4616      	mov	r6, r2
  40420a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40420e:	461f      	mov	r7, r3
  404210:	05d3      	lsls	r3, r2, #23
  404212:	460c      	mov	r4, r1
  404214:	4605      	mov	r5, r0
  404216:	d507      	bpl.n	404228 <__swrite+0x24>
  404218:	2200      	movs	r2, #0
  40421a:	2302      	movs	r3, #2
  40421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404220:	f000 fa3e 	bl	4046a0 <_lseek_r>
  404224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40422c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404230:	81a2      	strh	r2, [r4, #12]
  404232:	463b      	mov	r3, r7
  404234:	4632      	mov	r2, r6
  404236:	4628      	mov	r0, r5
  404238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40423c:	f000 b91e 	b.w	40447c <_write_r>

00404240 <__sseek>:
  404240:	b510      	push	{r4, lr}
  404242:	460c      	mov	r4, r1
  404244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404248:	f000 fa2a 	bl	4046a0 <_lseek_r>
  40424c:	89a3      	ldrh	r3, [r4, #12]
  40424e:	1c42      	adds	r2, r0, #1
  404250:	bf0e      	itee	eq
  404252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40425a:	6520      	strne	r0, [r4, #80]	; 0x50
  40425c:	81a3      	strh	r3, [r4, #12]
  40425e:	bd10      	pop	{r4, pc}

00404260 <__sclose>:
  404260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404264:	f000 b982 	b.w	40456c <_close_r>
	...

00404280 <strlen>:
  404280:	f890 f000 	pld	[r0]
  404284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404288:	f020 0107 	bic.w	r1, r0, #7
  40428c:	f06f 0c00 	mvn.w	ip, #0
  404290:	f010 0407 	ands.w	r4, r0, #7
  404294:	f891 f020 	pld	[r1, #32]
  404298:	f040 8049 	bne.w	40432e <strlen+0xae>
  40429c:	f04f 0400 	mov.w	r4, #0
  4042a0:	f06f 0007 	mvn.w	r0, #7
  4042a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4042ac:	f100 0008 	add.w	r0, r0, #8
  4042b0:	fa82 f24c 	uadd8	r2, r2, ip
  4042b4:	faa4 f28c 	sel	r2, r4, ip
  4042b8:	fa83 f34c 	uadd8	r3, r3, ip
  4042bc:	faa2 f38c 	sel	r3, r2, ip
  4042c0:	bb4b      	cbnz	r3, 404316 <strlen+0x96>
  4042c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4042c6:	fa82 f24c 	uadd8	r2, r2, ip
  4042ca:	f100 0008 	add.w	r0, r0, #8
  4042ce:	faa4 f28c 	sel	r2, r4, ip
  4042d2:	fa83 f34c 	uadd8	r3, r3, ip
  4042d6:	faa2 f38c 	sel	r3, r2, ip
  4042da:	b9e3      	cbnz	r3, 404316 <strlen+0x96>
  4042dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4042e0:	fa82 f24c 	uadd8	r2, r2, ip
  4042e4:	f100 0008 	add.w	r0, r0, #8
  4042e8:	faa4 f28c 	sel	r2, r4, ip
  4042ec:	fa83 f34c 	uadd8	r3, r3, ip
  4042f0:	faa2 f38c 	sel	r3, r2, ip
  4042f4:	b97b      	cbnz	r3, 404316 <strlen+0x96>
  4042f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4042fa:	f101 0120 	add.w	r1, r1, #32
  4042fe:	fa82 f24c 	uadd8	r2, r2, ip
  404302:	f100 0008 	add.w	r0, r0, #8
  404306:	faa4 f28c 	sel	r2, r4, ip
  40430a:	fa83 f34c 	uadd8	r3, r3, ip
  40430e:	faa2 f38c 	sel	r3, r2, ip
  404312:	2b00      	cmp	r3, #0
  404314:	d0c6      	beq.n	4042a4 <strlen+0x24>
  404316:	2a00      	cmp	r2, #0
  404318:	bf04      	itt	eq
  40431a:	3004      	addeq	r0, #4
  40431c:	461a      	moveq	r2, r3
  40431e:	ba12      	rev	r2, r2
  404320:	fab2 f282 	clz	r2, r2
  404324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40432c:	4770      	bx	lr
  40432e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404332:	f004 0503 	and.w	r5, r4, #3
  404336:	f1c4 0000 	rsb	r0, r4, #0
  40433a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40433e:	f014 0f04 	tst.w	r4, #4
  404342:	f891 f040 	pld	[r1, #64]	; 0x40
  404346:	fa0c f505 	lsl.w	r5, ip, r5
  40434a:	ea62 0205 	orn	r2, r2, r5
  40434e:	bf1c      	itt	ne
  404350:	ea63 0305 	ornne	r3, r3, r5
  404354:	4662      	movne	r2, ip
  404356:	f04f 0400 	mov.w	r4, #0
  40435a:	e7a9      	b.n	4042b0 <strlen+0x30>

0040435c <__swbuf_r>:
  40435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40435e:	460d      	mov	r5, r1
  404360:	4614      	mov	r4, r2
  404362:	4606      	mov	r6, r0
  404364:	b110      	cbz	r0, 40436c <__swbuf_r+0x10>
  404366:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404368:	2b00      	cmp	r3, #0
  40436a:	d04b      	beq.n	404404 <__swbuf_r+0xa8>
  40436c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404370:	69a3      	ldr	r3, [r4, #24]
  404372:	60a3      	str	r3, [r4, #8]
  404374:	b291      	uxth	r1, r2
  404376:	0708      	lsls	r0, r1, #28
  404378:	d539      	bpl.n	4043ee <__swbuf_r+0x92>
  40437a:	6923      	ldr	r3, [r4, #16]
  40437c:	2b00      	cmp	r3, #0
  40437e:	d036      	beq.n	4043ee <__swbuf_r+0x92>
  404380:	b2ed      	uxtb	r5, r5
  404382:	0489      	lsls	r1, r1, #18
  404384:	462f      	mov	r7, r5
  404386:	d515      	bpl.n	4043b4 <__swbuf_r+0x58>
  404388:	6822      	ldr	r2, [r4, #0]
  40438a:	6961      	ldr	r1, [r4, #20]
  40438c:	1ad3      	subs	r3, r2, r3
  40438e:	428b      	cmp	r3, r1
  404390:	da1c      	bge.n	4043cc <__swbuf_r+0x70>
  404392:	3301      	adds	r3, #1
  404394:	68a1      	ldr	r1, [r4, #8]
  404396:	1c50      	adds	r0, r2, #1
  404398:	3901      	subs	r1, #1
  40439a:	60a1      	str	r1, [r4, #8]
  40439c:	6020      	str	r0, [r4, #0]
  40439e:	7015      	strb	r5, [r2, #0]
  4043a0:	6962      	ldr	r2, [r4, #20]
  4043a2:	429a      	cmp	r2, r3
  4043a4:	d01a      	beq.n	4043dc <__swbuf_r+0x80>
  4043a6:	89a3      	ldrh	r3, [r4, #12]
  4043a8:	07db      	lsls	r3, r3, #31
  4043aa:	d501      	bpl.n	4043b0 <__swbuf_r+0x54>
  4043ac:	2d0a      	cmp	r5, #10
  4043ae:	d015      	beq.n	4043dc <__swbuf_r+0x80>
  4043b0:	4638      	mov	r0, r7
  4043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4043b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4043ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4043be:	81a2      	strh	r2, [r4, #12]
  4043c0:	6822      	ldr	r2, [r4, #0]
  4043c2:	6661      	str	r1, [r4, #100]	; 0x64
  4043c4:	6961      	ldr	r1, [r4, #20]
  4043c6:	1ad3      	subs	r3, r2, r3
  4043c8:	428b      	cmp	r3, r1
  4043ca:	dbe2      	blt.n	404392 <__swbuf_r+0x36>
  4043cc:	4621      	mov	r1, r4
  4043ce:	4630      	mov	r0, r6
  4043d0:	f7fe fd2c 	bl	402e2c <_fflush_r>
  4043d4:	b940      	cbnz	r0, 4043e8 <__swbuf_r+0x8c>
  4043d6:	6822      	ldr	r2, [r4, #0]
  4043d8:	2301      	movs	r3, #1
  4043da:	e7db      	b.n	404394 <__swbuf_r+0x38>
  4043dc:	4621      	mov	r1, r4
  4043de:	4630      	mov	r0, r6
  4043e0:	f7fe fd24 	bl	402e2c <_fflush_r>
  4043e4:	2800      	cmp	r0, #0
  4043e6:	d0e3      	beq.n	4043b0 <__swbuf_r+0x54>
  4043e8:	f04f 37ff 	mov.w	r7, #4294967295
  4043ec:	e7e0      	b.n	4043b0 <__swbuf_r+0x54>
  4043ee:	4621      	mov	r1, r4
  4043f0:	4630      	mov	r0, r6
  4043f2:	f7fe fc07 	bl	402c04 <__swsetup_r>
  4043f6:	2800      	cmp	r0, #0
  4043f8:	d1f6      	bne.n	4043e8 <__swbuf_r+0x8c>
  4043fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043fe:	6923      	ldr	r3, [r4, #16]
  404400:	b291      	uxth	r1, r2
  404402:	e7bd      	b.n	404380 <__swbuf_r+0x24>
  404404:	f7fe fd6a 	bl	402edc <__sinit>
  404408:	e7b0      	b.n	40436c <__swbuf_r+0x10>
  40440a:	bf00      	nop

0040440c <_wcrtomb_r>:
  40440c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40440e:	4606      	mov	r6, r0
  404410:	b085      	sub	sp, #20
  404412:	461f      	mov	r7, r3
  404414:	b189      	cbz	r1, 40443a <_wcrtomb_r+0x2e>
  404416:	4c10      	ldr	r4, [pc, #64]	; (404458 <_wcrtomb_r+0x4c>)
  404418:	4d10      	ldr	r5, [pc, #64]	; (40445c <_wcrtomb_r+0x50>)
  40441a:	6824      	ldr	r4, [r4, #0]
  40441c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40441e:	2c00      	cmp	r4, #0
  404420:	bf08      	it	eq
  404422:	462c      	moveq	r4, r5
  404424:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404428:	47a0      	blx	r4
  40442a:	1c43      	adds	r3, r0, #1
  40442c:	d103      	bne.n	404436 <_wcrtomb_r+0x2a>
  40442e:	2200      	movs	r2, #0
  404430:	238a      	movs	r3, #138	; 0x8a
  404432:	603a      	str	r2, [r7, #0]
  404434:	6033      	str	r3, [r6, #0]
  404436:	b005      	add	sp, #20
  404438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40443a:	460c      	mov	r4, r1
  40443c:	4906      	ldr	r1, [pc, #24]	; (404458 <_wcrtomb_r+0x4c>)
  40443e:	4a07      	ldr	r2, [pc, #28]	; (40445c <_wcrtomb_r+0x50>)
  404440:	6809      	ldr	r1, [r1, #0]
  404442:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404444:	2900      	cmp	r1, #0
  404446:	bf08      	it	eq
  404448:	4611      	moveq	r1, r2
  40444a:	4622      	mov	r2, r4
  40444c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404450:	a901      	add	r1, sp, #4
  404452:	47a0      	blx	r4
  404454:	e7e9      	b.n	40442a <_wcrtomb_r+0x1e>
  404456:	bf00      	nop
  404458:	20400008 	.word	0x20400008
  40445c:	2040043c 	.word	0x2040043c

00404460 <__ascii_wctomb>:
  404460:	b121      	cbz	r1, 40446c <__ascii_wctomb+0xc>
  404462:	2aff      	cmp	r2, #255	; 0xff
  404464:	d804      	bhi.n	404470 <__ascii_wctomb+0x10>
  404466:	700a      	strb	r2, [r1, #0]
  404468:	2001      	movs	r0, #1
  40446a:	4770      	bx	lr
  40446c:	4608      	mov	r0, r1
  40446e:	4770      	bx	lr
  404470:	238a      	movs	r3, #138	; 0x8a
  404472:	6003      	str	r3, [r0, #0]
  404474:	f04f 30ff 	mov.w	r0, #4294967295
  404478:	4770      	bx	lr
  40447a:	bf00      	nop

0040447c <_write_r>:
  40447c:	b570      	push	{r4, r5, r6, lr}
  40447e:	460d      	mov	r5, r1
  404480:	4c08      	ldr	r4, [pc, #32]	; (4044a4 <_write_r+0x28>)
  404482:	4611      	mov	r1, r2
  404484:	4606      	mov	r6, r0
  404486:	461a      	mov	r2, r3
  404488:	4628      	mov	r0, r5
  40448a:	2300      	movs	r3, #0
  40448c:	6023      	str	r3, [r4, #0]
  40448e:	f7fb ff4d 	bl	40032c <_write>
  404492:	1c43      	adds	r3, r0, #1
  404494:	d000      	beq.n	404498 <_write_r+0x1c>
  404496:	bd70      	pop	{r4, r5, r6, pc}
  404498:	6823      	ldr	r3, [r4, #0]
  40449a:	2b00      	cmp	r3, #0
  40449c:	d0fb      	beq.n	404496 <_write_r+0x1a>
  40449e:	6033      	str	r3, [r6, #0]
  4044a0:	bd70      	pop	{r4, r5, r6, pc}
  4044a2:	bf00      	nop
  4044a4:	20401488 	.word	0x20401488

004044a8 <__register_exitproc>:
  4044a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4044ac:	4d2c      	ldr	r5, [pc, #176]	; (404560 <__register_exitproc+0xb8>)
  4044ae:	4606      	mov	r6, r0
  4044b0:	6828      	ldr	r0, [r5, #0]
  4044b2:	4698      	mov	r8, r3
  4044b4:	460f      	mov	r7, r1
  4044b6:	4691      	mov	r9, r2
  4044b8:	f7ff f8d0 	bl	40365c <__retarget_lock_acquire_recursive>
  4044bc:	4b29      	ldr	r3, [pc, #164]	; (404564 <__register_exitproc+0xbc>)
  4044be:	681c      	ldr	r4, [r3, #0]
  4044c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4044c4:	2b00      	cmp	r3, #0
  4044c6:	d03e      	beq.n	404546 <__register_exitproc+0x9e>
  4044c8:	685a      	ldr	r2, [r3, #4]
  4044ca:	2a1f      	cmp	r2, #31
  4044cc:	dc1c      	bgt.n	404508 <__register_exitproc+0x60>
  4044ce:	f102 0e01 	add.w	lr, r2, #1
  4044d2:	b176      	cbz	r6, 4044f2 <__register_exitproc+0x4a>
  4044d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4044d8:	2401      	movs	r4, #1
  4044da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4044de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4044e2:	4094      	lsls	r4, r2
  4044e4:	4320      	orrs	r0, r4
  4044e6:	2e02      	cmp	r6, #2
  4044e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4044ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4044f0:	d023      	beq.n	40453a <__register_exitproc+0x92>
  4044f2:	3202      	adds	r2, #2
  4044f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4044f8:	6828      	ldr	r0, [r5, #0]
  4044fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4044fe:	f7ff f8af 	bl	403660 <__retarget_lock_release_recursive>
  404502:	2000      	movs	r0, #0
  404504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404508:	4b17      	ldr	r3, [pc, #92]	; (404568 <__register_exitproc+0xc0>)
  40450a:	b30b      	cbz	r3, 404550 <__register_exitproc+0xa8>
  40450c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404510:	f7ff f920 	bl	403754 <malloc>
  404514:	4603      	mov	r3, r0
  404516:	b1d8      	cbz	r0, 404550 <__register_exitproc+0xa8>
  404518:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40451c:	6002      	str	r2, [r0, #0]
  40451e:	2100      	movs	r1, #0
  404520:	6041      	str	r1, [r0, #4]
  404522:	460a      	mov	r2, r1
  404524:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404528:	f04f 0e01 	mov.w	lr, #1
  40452c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404530:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404534:	2e00      	cmp	r6, #0
  404536:	d0dc      	beq.n	4044f2 <__register_exitproc+0x4a>
  404538:	e7cc      	b.n	4044d4 <__register_exitproc+0x2c>
  40453a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40453e:	430c      	orrs	r4, r1
  404540:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404544:	e7d5      	b.n	4044f2 <__register_exitproc+0x4a>
  404546:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40454a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40454e:	e7bb      	b.n	4044c8 <__register_exitproc+0x20>
  404550:	6828      	ldr	r0, [r5, #0]
  404552:	f7ff f885 	bl	403660 <__retarget_lock_release_recursive>
  404556:	f04f 30ff 	mov.w	r0, #4294967295
  40455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40455e:	bf00      	nop
  404560:	20400438 	.word	0x20400438
  404564:	00404b14 	.word	0x00404b14
  404568:	00403755 	.word	0x00403755

0040456c <_close_r>:
  40456c:	b538      	push	{r3, r4, r5, lr}
  40456e:	4c07      	ldr	r4, [pc, #28]	; (40458c <_close_r+0x20>)
  404570:	2300      	movs	r3, #0
  404572:	4605      	mov	r5, r0
  404574:	4608      	mov	r0, r1
  404576:	6023      	str	r3, [r4, #0]
  404578:	f7fc fe4e 	bl	401218 <_close>
  40457c:	1c43      	adds	r3, r0, #1
  40457e:	d000      	beq.n	404582 <_close_r+0x16>
  404580:	bd38      	pop	{r3, r4, r5, pc}
  404582:	6823      	ldr	r3, [r4, #0]
  404584:	2b00      	cmp	r3, #0
  404586:	d0fb      	beq.n	404580 <_close_r+0x14>
  404588:	602b      	str	r3, [r5, #0]
  40458a:	bd38      	pop	{r3, r4, r5, pc}
  40458c:	20401488 	.word	0x20401488

00404590 <_fclose_r>:
  404590:	b570      	push	{r4, r5, r6, lr}
  404592:	b159      	cbz	r1, 4045ac <_fclose_r+0x1c>
  404594:	4605      	mov	r5, r0
  404596:	460c      	mov	r4, r1
  404598:	b110      	cbz	r0, 4045a0 <_fclose_r+0x10>
  40459a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40459c:	2b00      	cmp	r3, #0
  40459e:	d03c      	beq.n	40461a <_fclose_r+0x8a>
  4045a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4045a2:	07d8      	lsls	r0, r3, #31
  4045a4:	d505      	bpl.n	4045b2 <_fclose_r+0x22>
  4045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045aa:	b92b      	cbnz	r3, 4045b8 <_fclose_r+0x28>
  4045ac:	2600      	movs	r6, #0
  4045ae:	4630      	mov	r0, r6
  4045b0:	bd70      	pop	{r4, r5, r6, pc}
  4045b2:	89a3      	ldrh	r3, [r4, #12]
  4045b4:	0599      	lsls	r1, r3, #22
  4045b6:	d53c      	bpl.n	404632 <_fclose_r+0xa2>
  4045b8:	4621      	mov	r1, r4
  4045ba:	4628      	mov	r0, r5
  4045bc:	f7fe fb96 	bl	402cec <__sflush_r>
  4045c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4045c2:	4606      	mov	r6, r0
  4045c4:	b133      	cbz	r3, 4045d4 <_fclose_r+0x44>
  4045c6:	69e1      	ldr	r1, [r4, #28]
  4045c8:	4628      	mov	r0, r5
  4045ca:	4798      	blx	r3
  4045cc:	2800      	cmp	r0, #0
  4045ce:	bfb8      	it	lt
  4045d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4045d4:	89a3      	ldrh	r3, [r4, #12]
  4045d6:	061a      	lsls	r2, r3, #24
  4045d8:	d422      	bmi.n	404620 <_fclose_r+0x90>
  4045da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4045dc:	b141      	cbz	r1, 4045f0 <_fclose_r+0x60>
  4045de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4045e2:	4299      	cmp	r1, r3
  4045e4:	d002      	beq.n	4045ec <_fclose_r+0x5c>
  4045e6:	4628      	mov	r0, r5
  4045e8:	f7fe fd9e 	bl	403128 <_free_r>
  4045ec:	2300      	movs	r3, #0
  4045ee:	6323      	str	r3, [r4, #48]	; 0x30
  4045f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4045f2:	b121      	cbz	r1, 4045fe <_fclose_r+0x6e>
  4045f4:	4628      	mov	r0, r5
  4045f6:	f7fe fd97 	bl	403128 <_free_r>
  4045fa:	2300      	movs	r3, #0
  4045fc:	6463      	str	r3, [r4, #68]	; 0x44
  4045fe:	f7fe fc99 	bl	402f34 <__sfp_lock_acquire>
  404602:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404604:	2200      	movs	r2, #0
  404606:	07db      	lsls	r3, r3, #31
  404608:	81a2      	strh	r2, [r4, #12]
  40460a:	d50e      	bpl.n	40462a <_fclose_r+0x9a>
  40460c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40460e:	f7ff f823 	bl	403658 <__retarget_lock_close_recursive>
  404612:	f7fe fc95 	bl	402f40 <__sfp_lock_release>
  404616:	4630      	mov	r0, r6
  404618:	bd70      	pop	{r4, r5, r6, pc}
  40461a:	f7fe fc5f 	bl	402edc <__sinit>
  40461e:	e7bf      	b.n	4045a0 <_fclose_r+0x10>
  404620:	6921      	ldr	r1, [r4, #16]
  404622:	4628      	mov	r0, r5
  404624:	f7fe fd80 	bl	403128 <_free_r>
  404628:	e7d7      	b.n	4045da <_fclose_r+0x4a>
  40462a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40462c:	f7ff f818 	bl	403660 <__retarget_lock_release_recursive>
  404630:	e7ec      	b.n	40460c <_fclose_r+0x7c>
  404632:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404634:	f7ff f812 	bl	40365c <__retarget_lock_acquire_recursive>
  404638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40463c:	2b00      	cmp	r3, #0
  40463e:	d1bb      	bne.n	4045b8 <_fclose_r+0x28>
  404640:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404642:	f016 0601 	ands.w	r6, r6, #1
  404646:	d1b1      	bne.n	4045ac <_fclose_r+0x1c>
  404648:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40464a:	f7ff f809 	bl	403660 <__retarget_lock_release_recursive>
  40464e:	4630      	mov	r0, r6
  404650:	bd70      	pop	{r4, r5, r6, pc}
  404652:	bf00      	nop

00404654 <_fstat_r>:
  404654:	b538      	push	{r3, r4, r5, lr}
  404656:	460b      	mov	r3, r1
  404658:	4c07      	ldr	r4, [pc, #28]	; (404678 <_fstat_r+0x24>)
  40465a:	4605      	mov	r5, r0
  40465c:	4611      	mov	r1, r2
  40465e:	4618      	mov	r0, r3
  404660:	2300      	movs	r3, #0
  404662:	6023      	str	r3, [r4, #0]
  404664:	f7fc fddb 	bl	40121e <_fstat>
  404668:	1c43      	adds	r3, r0, #1
  40466a:	d000      	beq.n	40466e <_fstat_r+0x1a>
  40466c:	bd38      	pop	{r3, r4, r5, pc}
  40466e:	6823      	ldr	r3, [r4, #0]
  404670:	2b00      	cmp	r3, #0
  404672:	d0fb      	beq.n	40466c <_fstat_r+0x18>
  404674:	602b      	str	r3, [r5, #0]
  404676:	bd38      	pop	{r3, r4, r5, pc}
  404678:	20401488 	.word	0x20401488

0040467c <_isatty_r>:
  40467c:	b538      	push	{r3, r4, r5, lr}
  40467e:	4c07      	ldr	r4, [pc, #28]	; (40469c <_isatty_r+0x20>)
  404680:	2300      	movs	r3, #0
  404682:	4605      	mov	r5, r0
  404684:	4608      	mov	r0, r1
  404686:	6023      	str	r3, [r4, #0]
  404688:	f7fc fdce 	bl	401228 <_isatty>
  40468c:	1c43      	adds	r3, r0, #1
  40468e:	d000      	beq.n	404692 <_isatty_r+0x16>
  404690:	bd38      	pop	{r3, r4, r5, pc}
  404692:	6823      	ldr	r3, [r4, #0]
  404694:	2b00      	cmp	r3, #0
  404696:	d0fb      	beq.n	404690 <_isatty_r+0x14>
  404698:	602b      	str	r3, [r5, #0]
  40469a:	bd38      	pop	{r3, r4, r5, pc}
  40469c:	20401488 	.word	0x20401488

004046a0 <_lseek_r>:
  4046a0:	b570      	push	{r4, r5, r6, lr}
  4046a2:	460d      	mov	r5, r1
  4046a4:	4c08      	ldr	r4, [pc, #32]	; (4046c8 <_lseek_r+0x28>)
  4046a6:	4611      	mov	r1, r2
  4046a8:	4606      	mov	r6, r0
  4046aa:	461a      	mov	r2, r3
  4046ac:	4628      	mov	r0, r5
  4046ae:	2300      	movs	r3, #0
  4046b0:	6023      	str	r3, [r4, #0]
  4046b2:	f7fc fdbb 	bl	40122c <_lseek>
  4046b6:	1c43      	adds	r3, r0, #1
  4046b8:	d000      	beq.n	4046bc <_lseek_r+0x1c>
  4046ba:	bd70      	pop	{r4, r5, r6, pc}
  4046bc:	6823      	ldr	r3, [r4, #0]
  4046be:	2b00      	cmp	r3, #0
  4046c0:	d0fb      	beq.n	4046ba <_lseek_r+0x1a>
  4046c2:	6033      	str	r3, [r6, #0]
  4046c4:	bd70      	pop	{r4, r5, r6, pc}
  4046c6:	bf00      	nop
  4046c8:	20401488 	.word	0x20401488

004046cc <_read_r>:
  4046cc:	b570      	push	{r4, r5, r6, lr}
  4046ce:	460d      	mov	r5, r1
  4046d0:	4c08      	ldr	r4, [pc, #32]	; (4046f4 <_read_r+0x28>)
  4046d2:	4611      	mov	r1, r2
  4046d4:	4606      	mov	r6, r0
  4046d6:	461a      	mov	r2, r3
  4046d8:	4628      	mov	r0, r5
  4046da:	2300      	movs	r3, #0
  4046dc:	6023      	str	r3, [r4, #0]
  4046de:	f7fb fd79 	bl	4001d4 <_read>
  4046e2:	1c43      	adds	r3, r0, #1
  4046e4:	d000      	beq.n	4046e8 <_read_r+0x1c>
  4046e6:	bd70      	pop	{r4, r5, r6, pc}
  4046e8:	6823      	ldr	r3, [r4, #0]
  4046ea:	2b00      	cmp	r3, #0
  4046ec:	d0fb      	beq.n	4046e6 <_read_r+0x1a>
  4046ee:	6033      	str	r3, [r6, #0]
  4046f0:	bd70      	pop	{r4, r5, r6, pc}
  4046f2:	bf00      	nop
  4046f4:	20401488 	.word	0x20401488

004046f8 <__aeabi_uldivmod>:
  4046f8:	b953      	cbnz	r3, 404710 <__aeabi_uldivmod+0x18>
  4046fa:	b94a      	cbnz	r2, 404710 <__aeabi_uldivmod+0x18>
  4046fc:	2900      	cmp	r1, #0
  4046fe:	bf08      	it	eq
  404700:	2800      	cmpeq	r0, #0
  404702:	bf1c      	itt	ne
  404704:	f04f 31ff 	movne.w	r1, #4294967295
  404708:	f04f 30ff 	movne.w	r0, #4294967295
  40470c:	f000 b97a 	b.w	404a04 <__aeabi_idiv0>
  404710:	f1ad 0c08 	sub.w	ip, sp, #8
  404714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404718:	f000 f806 	bl	404728 <__udivmoddi4>
  40471c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404724:	b004      	add	sp, #16
  404726:	4770      	bx	lr

00404728 <__udivmoddi4>:
  404728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40472c:	468c      	mov	ip, r1
  40472e:	460d      	mov	r5, r1
  404730:	4604      	mov	r4, r0
  404732:	9e08      	ldr	r6, [sp, #32]
  404734:	2b00      	cmp	r3, #0
  404736:	d151      	bne.n	4047dc <__udivmoddi4+0xb4>
  404738:	428a      	cmp	r2, r1
  40473a:	4617      	mov	r7, r2
  40473c:	d96d      	bls.n	40481a <__udivmoddi4+0xf2>
  40473e:	fab2 fe82 	clz	lr, r2
  404742:	f1be 0f00 	cmp.w	lr, #0
  404746:	d00b      	beq.n	404760 <__udivmoddi4+0x38>
  404748:	f1ce 0c20 	rsb	ip, lr, #32
  40474c:	fa01 f50e 	lsl.w	r5, r1, lr
  404750:	fa20 fc0c 	lsr.w	ip, r0, ip
  404754:	fa02 f70e 	lsl.w	r7, r2, lr
  404758:	ea4c 0c05 	orr.w	ip, ip, r5
  40475c:	fa00 f40e 	lsl.w	r4, r0, lr
  404760:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404764:	0c25      	lsrs	r5, r4, #16
  404766:	fbbc f8fa 	udiv	r8, ip, sl
  40476a:	fa1f f987 	uxth.w	r9, r7
  40476e:	fb0a cc18 	mls	ip, sl, r8, ip
  404772:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404776:	fb08 f309 	mul.w	r3, r8, r9
  40477a:	42ab      	cmp	r3, r5
  40477c:	d90a      	bls.n	404794 <__udivmoddi4+0x6c>
  40477e:	19ed      	adds	r5, r5, r7
  404780:	f108 32ff 	add.w	r2, r8, #4294967295
  404784:	f080 8123 	bcs.w	4049ce <__udivmoddi4+0x2a6>
  404788:	42ab      	cmp	r3, r5
  40478a:	f240 8120 	bls.w	4049ce <__udivmoddi4+0x2a6>
  40478e:	f1a8 0802 	sub.w	r8, r8, #2
  404792:	443d      	add	r5, r7
  404794:	1aed      	subs	r5, r5, r3
  404796:	b2a4      	uxth	r4, r4
  404798:	fbb5 f0fa 	udiv	r0, r5, sl
  40479c:	fb0a 5510 	mls	r5, sl, r0, r5
  4047a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4047a4:	fb00 f909 	mul.w	r9, r0, r9
  4047a8:	45a1      	cmp	r9, r4
  4047aa:	d909      	bls.n	4047c0 <__udivmoddi4+0x98>
  4047ac:	19e4      	adds	r4, r4, r7
  4047ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4047b2:	f080 810a 	bcs.w	4049ca <__udivmoddi4+0x2a2>
  4047b6:	45a1      	cmp	r9, r4
  4047b8:	f240 8107 	bls.w	4049ca <__udivmoddi4+0x2a2>
  4047bc:	3802      	subs	r0, #2
  4047be:	443c      	add	r4, r7
  4047c0:	eba4 0409 	sub.w	r4, r4, r9
  4047c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4047c8:	2100      	movs	r1, #0
  4047ca:	2e00      	cmp	r6, #0
  4047cc:	d061      	beq.n	404892 <__udivmoddi4+0x16a>
  4047ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4047d2:	2300      	movs	r3, #0
  4047d4:	6034      	str	r4, [r6, #0]
  4047d6:	6073      	str	r3, [r6, #4]
  4047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047dc:	428b      	cmp	r3, r1
  4047de:	d907      	bls.n	4047f0 <__udivmoddi4+0xc8>
  4047e0:	2e00      	cmp	r6, #0
  4047e2:	d054      	beq.n	40488e <__udivmoddi4+0x166>
  4047e4:	2100      	movs	r1, #0
  4047e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4047ea:	4608      	mov	r0, r1
  4047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047f0:	fab3 f183 	clz	r1, r3
  4047f4:	2900      	cmp	r1, #0
  4047f6:	f040 808e 	bne.w	404916 <__udivmoddi4+0x1ee>
  4047fa:	42ab      	cmp	r3, r5
  4047fc:	d302      	bcc.n	404804 <__udivmoddi4+0xdc>
  4047fe:	4282      	cmp	r2, r0
  404800:	f200 80fa 	bhi.w	4049f8 <__udivmoddi4+0x2d0>
  404804:	1a84      	subs	r4, r0, r2
  404806:	eb65 0503 	sbc.w	r5, r5, r3
  40480a:	2001      	movs	r0, #1
  40480c:	46ac      	mov	ip, r5
  40480e:	2e00      	cmp	r6, #0
  404810:	d03f      	beq.n	404892 <__udivmoddi4+0x16a>
  404812:	e886 1010 	stmia.w	r6, {r4, ip}
  404816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40481a:	b912      	cbnz	r2, 404822 <__udivmoddi4+0xfa>
  40481c:	2701      	movs	r7, #1
  40481e:	fbb7 f7f2 	udiv	r7, r7, r2
  404822:	fab7 fe87 	clz	lr, r7
  404826:	f1be 0f00 	cmp.w	lr, #0
  40482a:	d134      	bne.n	404896 <__udivmoddi4+0x16e>
  40482c:	1beb      	subs	r3, r5, r7
  40482e:	0c3a      	lsrs	r2, r7, #16
  404830:	fa1f fc87 	uxth.w	ip, r7
  404834:	2101      	movs	r1, #1
  404836:	fbb3 f8f2 	udiv	r8, r3, r2
  40483a:	0c25      	lsrs	r5, r4, #16
  40483c:	fb02 3318 	mls	r3, r2, r8, r3
  404840:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404844:	fb0c f308 	mul.w	r3, ip, r8
  404848:	42ab      	cmp	r3, r5
  40484a:	d907      	bls.n	40485c <__udivmoddi4+0x134>
  40484c:	19ed      	adds	r5, r5, r7
  40484e:	f108 30ff 	add.w	r0, r8, #4294967295
  404852:	d202      	bcs.n	40485a <__udivmoddi4+0x132>
  404854:	42ab      	cmp	r3, r5
  404856:	f200 80d1 	bhi.w	4049fc <__udivmoddi4+0x2d4>
  40485a:	4680      	mov	r8, r0
  40485c:	1aed      	subs	r5, r5, r3
  40485e:	b2a3      	uxth	r3, r4
  404860:	fbb5 f0f2 	udiv	r0, r5, r2
  404864:	fb02 5510 	mls	r5, r2, r0, r5
  404868:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40486c:	fb0c fc00 	mul.w	ip, ip, r0
  404870:	45a4      	cmp	ip, r4
  404872:	d907      	bls.n	404884 <__udivmoddi4+0x15c>
  404874:	19e4      	adds	r4, r4, r7
  404876:	f100 33ff 	add.w	r3, r0, #4294967295
  40487a:	d202      	bcs.n	404882 <__udivmoddi4+0x15a>
  40487c:	45a4      	cmp	ip, r4
  40487e:	f200 80b8 	bhi.w	4049f2 <__udivmoddi4+0x2ca>
  404882:	4618      	mov	r0, r3
  404884:	eba4 040c 	sub.w	r4, r4, ip
  404888:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40488c:	e79d      	b.n	4047ca <__udivmoddi4+0xa2>
  40488e:	4631      	mov	r1, r6
  404890:	4630      	mov	r0, r6
  404892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404896:	f1ce 0420 	rsb	r4, lr, #32
  40489a:	fa05 f30e 	lsl.w	r3, r5, lr
  40489e:	fa07 f70e 	lsl.w	r7, r7, lr
  4048a2:	fa20 f804 	lsr.w	r8, r0, r4
  4048a6:	0c3a      	lsrs	r2, r7, #16
  4048a8:	fa25 f404 	lsr.w	r4, r5, r4
  4048ac:	ea48 0803 	orr.w	r8, r8, r3
  4048b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4048b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4048b8:	fb02 4411 	mls	r4, r2, r1, r4
  4048bc:	fa1f fc87 	uxth.w	ip, r7
  4048c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4048c4:	fb01 f30c 	mul.w	r3, r1, ip
  4048c8:	42ab      	cmp	r3, r5
  4048ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4048ce:	d909      	bls.n	4048e4 <__udivmoddi4+0x1bc>
  4048d0:	19ed      	adds	r5, r5, r7
  4048d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4048d6:	f080 808a 	bcs.w	4049ee <__udivmoddi4+0x2c6>
  4048da:	42ab      	cmp	r3, r5
  4048dc:	f240 8087 	bls.w	4049ee <__udivmoddi4+0x2c6>
  4048e0:	3902      	subs	r1, #2
  4048e2:	443d      	add	r5, r7
  4048e4:	1aeb      	subs	r3, r5, r3
  4048e6:	fa1f f588 	uxth.w	r5, r8
  4048ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4048ee:	fb02 3310 	mls	r3, r2, r0, r3
  4048f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4048f6:	fb00 f30c 	mul.w	r3, r0, ip
  4048fa:	42ab      	cmp	r3, r5
  4048fc:	d907      	bls.n	40490e <__udivmoddi4+0x1e6>
  4048fe:	19ed      	adds	r5, r5, r7
  404900:	f100 38ff 	add.w	r8, r0, #4294967295
  404904:	d26f      	bcs.n	4049e6 <__udivmoddi4+0x2be>
  404906:	42ab      	cmp	r3, r5
  404908:	d96d      	bls.n	4049e6 <__udivmoddi4+0x2be>
  40490a:	3802      	subs	r0, #2
  40490c:	443d      	add	r5, r7
  40490e:	1aeb      	subs	r3, r5, r3
  404910:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404914:	e78f      	b.n	404836 <__udivmoddi4+0x10e>
  404916:	f1c1 0720 	rsb	r7, r1, #32
  40491a:	fa22 f807 	lsr.w	r8, r2, r7
  40491e:	408b      	lsls	r3, r1
  404920:	fa05 f401 	lsl.w	r4, r5, r1
  404924:	ea48 0303 	orr.w	r3, r8, r3
  404928:	fa20 fe07 	lsr.w	lr, r0, r7
  40492c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404930:	40fd      	lsrs	r5, r7
  404932:	ea4e 0e04 	orr.w	lr, lr, r4
  404936:	fbb5 f9fc 	udiv	r9, r5, ip
  40493a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40493e:	fb0c 5519 	mls	r5, ip, r9, r5
  404942:	fa1f f883 	uxth.w	r8, r3
  404946:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40494a:	fb09 f408 	mul.w	r4, r9, r8
  40494e:	42ac      	cmp	r4, r5
  404950:	fa02 f201 	lsl.w	r2, r2, r1
  404954:	fa00 fa01 	lsl.w	sl, r0, r1
  404958:	d908      	bls.n	40496c <__udivmoddi4+0x244>
  40495a:	18ed      	adds	r5, r5, r3
  40495c:	f109 30ff 	add.w	r0, r9, #4294967295
  404960:	d243      	bcs.n	4049ea <__udivmoddi4+0x2c2>
  404962:	42ac      	cmp	r4, r5
  404964:	d941      	bls.n	4049ea <__udivmoddi4+0x2c2>
  404966:	f1a9 0902 	sub.w	r9, r9, #2
  40496a:	441d      	add	r5, r3
  40496c:	1b2d      	subs	r5, r5, r4
  40496e:	fa1f fe8e 	uxth.w	lr, lr
  404972:	fbb5 f0fc 	udiv	r0, r5, ip
  404976:	fb0c 5510 	mls	r5, ip, r0, r5
  40497a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40497e:	fb00 f808 	mul.w	r8, r0, r8
  404982:	45a0      	cmp	r8, r4
  404984:	d907      	bls.n	404996 <__udivmoddi4+0x26e>
  404986:	18e4      	adds	r4, r4, r3
  404988:	f100 35ff 	add.w	r5, r0, #4294967295
  40498c:	d229      	bcs.n	4049e2 <__udivmoddi4+0x2ba>
  40498e:	45a0      	cmp	r8, r4
  404990:	d927      	bls.n	4049e2 <__udivmoddi4+0x2ba>
  404992:	3802      	subs	r0, #2
  404994:	441c      	add	r4, r3
  404996:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40499a:	eba4 0408 	sub.w	r4, r4, r8
  40499e:	fba0 8902 	umull	r8, r9, r0, r2
  4049a2:	454c      	cmp	r4, r9
  4049a4:	46c6      	mov	lr, r8
  4049a6:	464d      	mov	r5, r9
  4049a8:	d315      	bcc.n	4049d6 <__udivmoddi4+0x2ae>
  4049aa:	d012      	beq.n	4049d2 <__udivmoddi4+0x2aa>
  4049ac:	b156      	cbz	r6, 4049c4 <__udivmoddi4+0x29c>
  4049ae:	ebba 030e 	subs.w	r3, sl, lr
  4049b2:	eb64 0405 	sbc.w	r4, r4, r5
  4049b6:	fa04 f707 	lsl.w	r7, r4, r7
  4049ba:	40cb      	lsrs	r3, r1
  4049bc:	431f      	orrs	r7, r3
  4049be:	40cc      	lsrs	r4, r1
  4049c0:	6037      	str	r7, [r6, #0]
  4049c2:	6074      	str	r4, [r6, #4]
  4049c4:	2100      	movs	r1, #0
  4049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4049ca:	4618      	mov	r0, r3
  4049cc:	e6f8      	b.n	4047c0 <__udivmoddi4+0x98>
  4049ce:	4690      	mov	r8, r2
  4049d0:	e6e0      	b.n	404794 <__udivmoddi4+0x6c>
  4049d2:	45c2      	cmp	sl, r8
  4049d4:	d2ea      	bcs.n	4049ac <__udivmoddi4+0x284>
  4049d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4049da:	eb69 0503 	sbc.w	r5, r9, r3
  4049de:	3801      	subs	r0, #1
  4049e0:	e7e4      	b.n	4049ac <__udivmoddi4+0x284>
  4049e2:	4628      	mov	r0, r5
  4049e4:	e7d7      	b.n	404996 <__udivmoddi4+0x26e>
  4049e6:	4640      	mov	r0, r8
  4049e8:	e791      	b.n	40490e <__udivmoddi4+0x1e6>
  4049ea:	4681      	mov	r9, r0
  4049ec:	e7be      	b.n	40496c <__udivmoddi4+0x244>
  4049ee:	4601      	mov	r1, r0
  4049f0:	e778      	b.n	4048e4 <__udivmoddi4+0x1bc>
  4049f2:	3802      	subs	r0, #2
  4049f4:	443c      	add	r4, r7
  4049f6:	e745      	b.n	404884 <__udivmoddi4+0x15c>
  4049f8:	4608      	mov	r0, r1
  4049fa:	e708      	b.n	40480e <__udivmoddi4+0xe6>
  4049fc:	f1a8 0802 	sub.w	r8, r8, #2
  404a00:	443d      	add	r5, r7
  404a02:	e72b      	b.n	40485c <__udivmoddi4+0x134>

00404a04 <__aeabi_idiv0>:
  404a04:	4770      	bx	lr
  404a06:	bf00      	nop
  404a08:	7373654d 	.word	0x7373654d
  404a0c:	20656761 	.word	0x20656761
  404a10:	65636572 	.word	0x65636572
  404a14:	64657669 	.word	0x64657669
  404a18:	00000a21 	.word	0x00000a21
  404a1c:	5a5a4157 	.word	0x5a5a4157
  404a20:	5a5a5a5a 	.word	0x5a5a5a5a
  404a24:	5a5a5a5a 	.word	0x5a5a5a5a
  404a28:	5a5a5a5a 	.word	0x5a5a5a5a
  404a2c:	5a5a5a5a 	.word	0x5a5a5a5a
  404a30:	41414141 	.word	0x41414141
  404a34:	41414141 	.word	0x41414141
  404a38:	41414141 	.word	0x41414141
  404a3c:	41414141 	.word	0x41414141
  404a40:	41414141 	.word	0x41414141
  404a44:	41414141 	.word	0x41414141
  404a48:	69204141 	.word	0x69204141
  404a4c:	6874206e 	.word	0x6874206e
  404a50:	65622065 	.word	0x65622065
  404a54:	676e696e 	.word	0x676e696e
  404a58:	0a676e69 	.word	0x0a676e69
  404a5c:	00000000 	.word	0x00000000
  404a60:	65747845 	.word	0x65747845
  404a64:	6465646e 	.word	0x6465646e
  404a68:	20444920 	.word	0x20444920
  404a6c:	20746f6e 	.word	0x20746f6e
  404a70:	70707573 	.word	0x70707573
  404a74:	6574726f 	.word	0x6574726f
  404a78:	0a0d2164 	.word	0x0a0d2164
  404a7c:	00000000 	.word	0x00000000
  404a80:	434d203a 	.word	0x434d203a
  404a84:	62204e41 	.word	0x62204e41
  404a88:	6f207375 	.word	0x6f207375
  404a8c:	65206666 	.word	0x65206666
  404a90:	726f7272 	.word	0x726f7272
  404a94:	6572202c 	.word	0x6572202c
  404a98:	696e692d 	.word	0x696e692d
  404a9c:	6c616974 	.word	0x6c616974
  404aa0:	74617a69 	.word	0x74617a69
  404aa4:	2e6e6f69 	.word	0x2e6e6f69
  404aa8:	0d0a0d20 	.word	0x0d0a0d20
  404aac:	0000000a 	.word	0x0000000a
  404ab0:	75727453 	.word	0x75727453
  404ab4:	69207463 	.word	0x69207463
  404ab8:	696d2073 	.word	0x696d2073
  404abc:	6e697373 	.word	0x6e697373
  404ac0:	61642067 	.word	0x61642067
  404ac4:	00216174 	.word	0x00216174
  404ac8:	46494853 	.word	0x46494853
  404acc:	41435f54 	.word	0x41435f54
  404ad0:	52455f4e 	.word	0x52455f4e
  404ad4:	3a524f52 	.word	0x3a524f52
  404ad8:	0a732520 	.word	0x0a732520
  404adc:	00000000 	.word	0x00000000
  404ae0:	75727453 	.word	0x75727453
  404ae4:	69207463 	.word	0x69207463
  404ae8:	696d2073 	.word	0x696d2073
  404aec:	6e697373 	.word	0x6e697373
  404af0:	61642067 	.word	0x61642067
  404af4:	69536174 	.word	0x69536174
  404af8:	0021657a 	.word	0x0021657a
  404afc:	61746144 	.word	0x61746144
  404b00:	7a697320 	.word	0x7a697320
  404b04:	73692065 	.word	0x73692065
  404b08:	6f6f7420 	.word	0x6f6f7420
  404b0c:	72616c20 	.word	0x72616c20
  404b10:	00216567 	.word	0x00216567

00404b14 <_global_impure_ptr>:
  404b14:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  404b24:	46454443 00000000 33323130 37363534     CDEF....01234567
  404b34:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404b44:	0000296c                                l)..

00404b48 <blanks.7217>:
  404b48:	20202020 20202020 20202020 20202020                     

00404b58 <zeroes.7218>:
  404b58:	30303030 30303030 30303030 30303030     0000000000000000
  404b68:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404b78 <_ctype_>:
  404b78:	20202000 20202020 28282020 20282828     .         ((((( 
  404b88:	20202020 20202020 20202020 20202020                     
  404b98:	10108820 10101010 10101010 10101010      ...............
  404ba8:	04040410 04040404 10040404 10101010     ................
  404bb8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404bc8:	01010101 01010101 01010101 10101010     ................
  404bd8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404be8:	02020202 02020202 02020202 10101010     ................
  404bf8:	00000020 00000000 00000000 00000000      ...............
	...

00404c7c <_init>:
  404c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c7e:	bf00      	nop
  404c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404c82:	bc08      	pop	{r3}
  404c84:	469e      	mov	lr, r3
  404c86:	4770      	bx	lr

00404c88 <__init_array_start>:
  404c88:	00402ccd 	.word	0x00402ccd

00404c8c <__frame_dummy_init_array_entry>:
  404c8c:	0040018d                                ..@.

00404c90 <_fini>:
  404c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c92:	bf00      	nop
  404c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404c96:	bc08      	pop	{r3}
  404c98:	469e      	mov	lr, r3
  404c9a:	4770      	bx	lr

00404c9c <__fini_array_start>:
  404c9c:	00400169 	.word	0x00400169
